SUBROUTINE MAPPIN(KOPT)
  !
  ! LEAD MAPPINGS FOR DIFFERENT CODES LINKED TO CHEASE
  ! NEW FEATURE: WORK ON GENERIC MESH SMISO/PSIISO(1:NISO1EFF) CREATED IN PREMAP
  ! IN THIS WAY MOST DIFFERENCES BETWEEN NIDEAL CASES ARE IN PREMAP FOR THE MESH DEFINITION
  ! AND THEN AFTER THE CALCULATIONS OF THE VARIOUS QUANTITIES IN MAPPIN FOR THE CALUCLATIONS OF SPECIFIC
  ! OUTPUT VALUES FOR EACH MAPPING
  !
  ! THUS THE MESH "CS" DISAPPEARED SINCE WE ALSO DO THE INTEGRALS IN GLOQUA WITH INTERPOS, MORE PRECISE AND LOCATED ON SAME MESH
  ! ALL QUANTITIES FORMERLY ON CS ARE NOW ON SMISOP1 THUS FROM 0 TO 1 AS WITH CS BUT SMISOP1=[0. SMISO(:)], 
  ! WITH TYPICALLY SMISO=CSM or CS. So CSM should disappear as well, using SMISO everywhere.
  ! SURFACE is called on SMISO(1:NISO1EFF) thus SMISOP1(2:NISO1EFF1), from near-but-not-axis, s>0, to s=1.
  !
  ! CANNOT HAVE ARRAYS ON SMISOP1, SINCE WOULD SHIFT ALL INDICES BY ONE OF MANY ARRAYS, SO KEEP SEPARATE VALUES ON-AXIS AS NOW
  ! FOR EXAMPLE Q0 AND QPSI(:). BUT ALL ARRAYS IN EQCHEASE_... ARE ON SMISOP1 WITH MOST INFORMATION THERE
  ! SO TRY TO USE EQCHEASE_... WHEN POSSIBLE
  !
  ! CS MESH KEPT FOR EQ(1) AND EQ(3,..) IN ERDATA FOR EXAMPLE
  !
  !**********************************************************************
  !
  USE globals
  USE interpol
  IMPLICIT NONE
  !
  interface
     SUBROUTINE SURFACE(K,PSIGMA,PTETA,PGWGT,PS)
       USE globals
       USE interpol
       USE sigmaneomod
       IMPLICIT NONE
       !
       INTEGER ::              K
       REAL(RKIND)      ::     PGWGT(*), PSIGMA(*), PTETA(*)
       REAL(RKIND)      ::     PS
     end SUBROUTINE SURFACE
  end interface
  !
  INTEGER, INTENT(IN) :: KOPT
  !
  REAL(RKIND) :: ZTMF(NPISOEFF), ZTPR(NPISOEFF), ZCPR(NPISOEFF), &
       &   ZCPPR(NPISOEFF), ZQ(NPISOEFF),   ZQP(NPISOEFF)
  REAL(RKIND) :: ZMU0, DTHETA
  INTEGER :: IDCHSE
  INTEGER :: I, J, L, JISO, J34, J33, IPEN, JPEN, NPESUR
  !
  !----*----*----*---*----*----*----*----*----*----*----*----*----*----*-
  !
  ZMU0 = 4.E-07_RKIND * CPI
  !
  ! SINCE WE HAVE ALL ON CSM MESH, BUT PEOPLE WANT VALUES FROM CENTER TO EDGE, WE ADD AN EXTRA
  ! POINT AT RHO=0, THUS MESH HAS NISO1EFF+1 POINTS (SMISOP1)
  !
  ! NOW WE HAVE A GENERIC MESH PRE-DEFINED IN PRE-MAP, SO WE CAN DO GENERIC ALLOCATION BEFORE "GOTO" CASES
  !
  NCHIEFF = NCHI
  !  IF (NIDEAL .EQ. 5) NCHIEFF = NTNOVA
  !
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%PSI(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%PHI(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%PRESSURE(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%F_DIA(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%PPRIME(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%FFPRIME(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%JPHI(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%JPARALLEL(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%Q(NISO1EFF1))
  ! ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%SHEAR(NISO1EFF1))
  !
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%R_INBOARD(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%R_OUTBOARD(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%RHO_TOR(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%DPSIDRHO_TOR(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%RHO_VOL(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%BETA_POL(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%LI(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%ELONGATION(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%TRIA_UPPER(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%TRIA_LOWER(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%VOLUME(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%VPRIME(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%DVDRHO(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%AREA(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%APRIME(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%SURFACE(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%FTRAP(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM1(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM2(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM3(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM4(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM5(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM6(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM7(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM8(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%GM9(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%B_AV(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%B_MIN(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%B_MAX(NISO1EFF1))
  ! Some special place holders
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%phi_flow(NISO1EFF1)) ! DI
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%s_flow(NISO1EFF1))   ! DR
  ALLOCATE(EQCHEASE_OUT(1)%PROFILES_1D%h_flow(NISO1EFF1))   ! NCBAL
  !
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%GRID%DIM1(NISO1EFF1))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%GRID%DIM2(NCHIEFF))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%JACOBIAN(NISO1EFF1,NCHIEFF))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%G_11(NISO1EFF1,NCHIEFF))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%G_12(NISO1EFF1,NCHIEFF))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%G_13(NISO1EFF1,NCHIEFF))
  EQCHEASE_OUT(1)%COORD_SYS%G_13 = RC0P
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%G_22(NISO1EFF1,NCHIEFF))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%G_23(NISO1EFF1,NCHIEFF))
  EQCHEASE_OUT(1)%COORD_SYS%G_23 = RC0P
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%G_33(NISO1EFF1,NCHIEFF))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%POSITION%R(NISO1EFF1,NCHIEFF))
  ALLOCATE(EQCHEASE_OUT(1)%COORD_SYS%POSITION%Z(NISO1EFF1,NCHIEFF))
  !
  ! EQCHEASE_OUT_ADD MESH SO FAR WITHOUT EXTRA RHO=0 POINT, SHOULD BE ADDED AFTER
  !
  ALLOCATE(EQCHEASE_OUT_ADD_1D(NISO1EFF1,27))
  ALLOCATE(EQCHEASE_OUT_ADD_2D(NISO1EFF1,NCHIEFF,14))
  ALLOCATE(EQCHEASE_OUT_ADD_2D_RZ(NRBOX,NZBOX,1))
  !
  ALLOCATE(EQCHEASE_OUT_ADD_1D_VARNAMES(27))
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIRGEO) = 'RGEO'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIAMIN) = 'AMIN'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIDQDPSI) = 'DQDPSI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IID2QDPSI2) = 'D2QDPSI2'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IISHEAR) = 'SHEAR'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIDSHEARDPSI) = 'DSHEARDPSI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIGRADPSI_AV) = 'GRADPSI_AV'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIA_AV) = 'A_AV'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIR_AV) = 'R_AV'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIBMAX) = 'BMAX'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIBMIN) = 'BMIN'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIALPHA) = 'ALPHA'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIIPLAS) = 'IPLAS'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IITE)    = 'TE'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIDTEDPSI)= 'DTEDPSI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IINE)    = 'NE'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIDNEDPSI)= 'DNEDPSI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IITI)    = 'TI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIDTIDPSI)= 'DTIDPSI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IINI)    = 'NI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIDNIDPSI)= 'DNIDPSI'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIZEFF)  = 'ZEFF'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IINUESTAR)  = 'NUESTAR'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IISIGNEO)  = 'SIGNEO'
  EQCHEASE_OUT_ADD_1D_VARNAMES(IIJBSBAV)  = 'JBSBAV'
  !
  ALLOCATE(EQCHEASE_OUT_ADD_2D_VARNAMES(14))
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIB) = 'B'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDBDPSI) = 'DBDPSI'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDBDCHI) = 'DBDCHI'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDPSIDR) = 'DPSIDR'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDPSIDZ) = 'DPSIDZ'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDCHIDR) = 'DCHIDR'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDCHIDZ) = 'DCHIDZ'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDRDPSI) = 'DRDPSI'
  EQCHEASE_OUT_ADD_2D_VARNAMES(IIDRDCHI) = 'DRDCHI'
  eqchease_out_add_2d_varnames(iidZdpsi) = 'dZdpsi'
  eqchease_out_add_2d_varnames(iidZdchi) = 'dZdchi'
  eqchease_out_add_2d_varnames(iiAh) = 'Ah'
  eqchease_out_add_2d_varnames(iidAhdpsi) = 'dAhdpsi'
  eqchease_out_add_2d_varnames(iitheta) = 'theta'

  ALLOCATE(EQCHEASE_OUT_ADD_2D_RZ_VARNAMES(1))
  ! Note chi(R,Z) computed in psibox.f90 uses R,Z mesh as for EQDSPSI (and eqdsk), so psi(R,Z) in EQDSPSI
  eqchease_out_add_2d_RZ_varnames(iiRZ_chi) = 'chiRZ'
  !
  !
  eqchease_out(1)%coord_sys%grid%dim2(1:nchieff) = chim(1:nchi)
  !
  ! Perform calculations valid/useful for all cases. Could add here exception for "fast" version later
  !
  !
  ! Loop on SMISO(1:niso1eff) flux surfaces without axis (which is not a surface per se)
  ! same surfaces as SMISOP1(2:niso1eff1)
  ! Note: could have done DO, JISO=2,niso1eff1 to save surface quantities on j=2:niso1eff1, but then need to make
  ! sure indices are modified everywhere they are used. In addition, many surface integrals are not useful on axis
  ! However, many are useful to be known on axis, so decide that ALL the eqchease_xxx quantities are on niso1eff+1 points
  ! Note: all the outputs should thus use eqchease_xxx arrays on SMISOP1 mesh, since it is useful
  !
  DO JISO=1,niso1eff
   ! calculates quantities integrated on each flux surface
    CALL SURFACE(JISO,SIGPSI(1,JISO),TETPSI(1,JISO),WGTPSI(1,JISO),SMISO(JISO))
    call chipsimetrics(jiso,SMISO(jiso),niso1eff)
    !
  END DO
  !
  ! evaluate all relevant values on-axis
  !
  call surf_metrics_onaxis
  !
  ! Compute quantities directly on full mesh once values on each flux surface are known
  ! like psi integrals
  CALL GLOQUA(SMISO,NISO1EFF,1)
  !
  ! switch to specific mapping cases
  !
  GOTO(10,20,30) KOPT
  !
10 CONTINUE 
  !
  RETURN
  !
  !----*----*----*---*----*----*----*----*----*----*----*----*----*----*-
  !
20 CONTINUE 
  !
  IF (NIDEAL .EQ. 0) THEN
    !     NUMERICAL INT. TRANSFORM
    DO J34=1,NISO1EFF
      CALL GIJLIN(J34,SMISO(J34))
      IF (NFFTOPT .EQ. 0) THEN
        DO J33=1,MSMAX
          CALL FOURIER(J34,SIGPSI(1,J34),TETPSI(1,J34), &
               &                       WGTPSI(1,J34),J33-1)
          IF (J34 .EQ. NISO1EFF .AND. REXT .GT. 1._RKIND) THEN
            CALL VACUUM(J33-1)
          ENDIF
        END DO
      ELSE
        !     FFT TRANSFORM
        CALL FOURFFT(J34,TETPSI(1,J34),MSMAX-1)
        IF (J34 .EQ. NISO1EFF .AND. REXT .GT. 1._RKIND) &
             & CALL VACUFFT(MSMAX-1)
      ENDIF
    END DO
    !
    DO J=1,NSMAX
      DO I=1,MSMAX
        RM(I,J) = REAL(I - 1,RKIND)
        RN(J)     = REAL(J - 1,RKIND)
      END DO
    END DO
    !
  ELSE IF (NIDEAL .EQ. 3) THEN
    CALL OUTNVW
    !
  ELSE IF (NIDEAL .EQ. 5) THEN
    ! Note that the 3 routines, outxt, outastro and xtinit write onto record NXTOR 
    DO J=1,NISO1EFF
      CALL TPSI(NISO1EFF,J,1)
      CALL OUTXT(J,SMISO(J),1)
    END DO
    IF (NOUTXTOR==1) THEN
       DO J=1,NISO1EFF
          CALL TPSI(NISO1EFF,J,2)
          CALL OUTXT(J,SMISO(J),2)
       END DO
    ENDIF
    !
    IF (NOUTXTOR==1) THEN
       CALL OUTASTRO(NISO1EFF)
       CALL XTINIT(NISO1EFF,SMISO)
    ENDIF
    CLOSE(UNIT=NXTOR,STATUS='KEEP')
  ENDIF
  !
  RETURN
  !
  !----*----*----*---*----*----*----*----*----*----*----*----*----*----*-
  !
30 CONTINUE 
  !
  !
  DO JPEN=1,NISO1EFF
    IF (MOD(JPEN,6) .NE. 3) THEN
      IPEN = IPEN + 1
      CALL TPSI(NISO1EFF,JPEN,0)
      CALL OUTPEN(JPEN,IPEN)
      ZTMF(IPEN)  = TMF(JPEN)
      ZTPR(IPEN)  = TTP(JPEN)/TMF(JPEN)
      ZCPR(IPEN)  = CPR(JPEN)
      ZCPPR(IPEN) = CPPR(JPEN)
      ZQ(IPEN)    = QPSI(JPEN)
      ZQP(IPEN)   = CDQ(JPEN)
    ENDIF
  END DO
  !
  CLOSE(UNIT=NPENN,STATUS='KEEP')
  !
  NPESUR = NPENN
  !
  OPEN(UNIT=NPESUR,ACCESS='SEQUENTIAL',FORM='UNFORMATTED', &
       &        FILE='NPESUR')
  REWIND NPESUR
  !
  IDCHSE = 222
  !
  WRITE(NPESUR) IDCHSE
  WRITE(NPESUR) NPSI, NCHI, NMGAUS
  WRITE(NPESUR) RMAG, RZMAG, CPSRF, T0, Q0
  WRITE(NPESUR) (CSPEN(L),L=1,NPSI*(NMGAUS+1))
  WRITE(NPESUR) (CTPEN(L),L=1,NCHI*(NMGAUS+1))
  WRITE(NPESUR) (ZTMF(L),L=1,NPSI*(NMGAUS+1))
  WRITE(NPESUR) (ZTPR(L),L=1,NPSI*(NMGAUS+1))
  WRITE(NPESUR) (ZCPR(L),L=1,NPSI*(NMGAUS+1))
  WRITE(NPESUR) (ZCPPR(L),L=1,NPSI*(NMGAUS+1))
  WRITE(NPESUR) (ZQ(L),L=1,NPSI*(NMGAUS+1))
  WRITE(NPESUR) (ZQP(L),L=1,NPSI*(NMGAUS+1))
  CLOSE(UNIT=NPESUR,STATUS='KEEP')
  !
  RETURN
END SUBROUTINE MAPPIN
