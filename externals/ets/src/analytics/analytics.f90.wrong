! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
      MODULE ANALYTICS

       INTERFACE ANALYTICAL_PLASMA     
          MODULE PROCEDURE M_SOLUTION
        END INTERFACE

      CONTAINS



! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + ANALYTICAL SOLUTION:+ + + + + + + + + + +   
! This subroutine defines transport coefficients, sources
! and boundary conditions according to numerical examples
       
      SUBROUTINE M_SOLUTION                                   &
                (TIME, EQUILIBRIUM, COREPROF, CORETRANSP, CORESOURCE)       

      USE EUITM_SCHEMAS

      USE TYPE_ANALYTICS

      IMPLICIT NONE

      INTEGER, PARAMETER               :: DP = KIND(1.0D0)    ! Double precision  

      INTEGER                          :: NRHO                !number of radial points (input)
      INTEGER                          :: NION                !number of ion species (input)
      INTEGER                          :: NIMP                !number of impurity species (input)

      INTEGER                          :: IRHO                !current radial knot
      INTEGER                          :: IION                !current ion type

      INTEGER                          :: NSOL                !Number of analytical example

      REAL (DP)                        :: TIME                !Time
      REAL (DP), ALLOCATABLE           :: RHO(:)              !Radii
      REAL (DP), ALLOCATABLE           :: DIFF(:),VCONV(:)    !Analytical transport coefficients
      REAL (DP), ALLOCATABLE           :: SIMP(:,:),SEXP(:,:) !Analytycal sources
      REAL (DP), ALLOCATABLE           :: SOL(:),DSOL(:)      !Analytical solution and its derivative
      REAL (DP), ALLOCATABLE           :: LSOL(:)             !Analytical scale length

      REAL (DP), PARAMETER             :: PI = 3.14159265D0

! +++ CPO derived types:
      TYPE (TYPE_EQUILIBRIUM), POINTER :: EQUILIBRIUM(:)      !input CPO with geometry quantities
      TYPE (TYPE_COREPROF),    POINTER :: COREPROF(:)         !CPO with internal ETS parameters profiles from previous time step
      TYPE (TYPE_CORETRANSP),  POINTER :: CORETRANSP(:)       !CPO with transport coefficients
      TYPE (TYPE_CORESOURCE),  POINTER :: CORESOURCE(:)       !CPO with sources



! +++ Set up dimensions:
      NRHO      = SIZE(COREPROF(1)%rho_tor, DIM=1)
      NION      = SIZE(COREPROF(1)%composition%amn)
      NSOL      = 2



! +++ Parameter allocation:
      ALLOCATE (RHO(NRHO))                                    !allocation of radii
      ALLOCATE (DIFF(NRHO))                                   !allocation of analytical diffusion coefficient
      ALLOCATE (VCONV(NRHO))                                  !allocation of analytical convection velocity
      ALLOCATE (SIMP(2,NRHO))                                 !allocation of analytical source proportional to the value
      ALLOCATE (SEXP(2,NRHO))                                 !allocation of analytical external source
      ALLOCATE (SOL(NRHO))                                    !allocation of analytical solution
      ALLOCATE (DSOL(NRHO))                                   !allocation of derivative of analytical solution
      ALLOCATE (LSOL(NRHO))                                   !allocation of scale length of analytical solution



! +++ Calculation of physical quantities from analitycal example:
      DO IRHO = 1,NRHO
         RHO(IRHO) = COREPROF(1)%rho_tor(IRHO)
      ENDDO

      CALL ANALYTICAL_EXAMPLES                                        &
           (NSOL,NRHO,RHO,TIME,DIFF,VCONV,SIMP,SEXP,SOL,DSOL,LSOL)


      DO IION=1,NION

        DO IRHO=1,NRHO

! +++ Ion density:
          IF (COREPROF(1)%ni%boundary%type(IION).NE.0) THEN
!           Transport:
            CORETRANSP(1)%ni_transp%diff_eff(IRHO,IION,2)  = DIFF(IRHO)
            CORETRANSP(1)%ni_transp%vconv_eff(IRHO,IION,2) = VCONV(IRHO)
!           Source:
            CORESOURCE(1)%si%imp(IRHO,IION)                = SIMP(1,IRHO)
            CORESOURCE(1)%si%exp(IRHO,IION)                = SEXP(1,IRHO)
!           Analytical solution:
            COREPROF(1)%ni%value(IRHO,IION)                = SOL(IRHO)
            COREPROF(1)%ne%value(IRHO)                     = SOL(IRHO)
          END IF

! +++ Ion temperature:
          IF (COREPROF(1)%ti%boundary%type(IION).NE.0) THEN
!           Transport:
            CORETRANSP(1)%ti_transp%diff_eff(IRHO,IION)    = DIFF(IRHO)
            CORETRANSP(1)%ti_transp%vconv_eff(IRHO,IION)   = VCONV(IRHO)
!           Source:
            CORESOURCE(1)%qi%imp(IRHO,IION)                = SIMP(2,IRHO)
            CORESOURCE(1)%qi%exp(IRHO,IION)                = SEXP(2,IRHO)
!           Analytical solution:
            COREPROF(1)%ti%value(IRHO,IION)                = SOL(IRHO)
          END IF

! +++ Electron temperature:
          IF (COREPROF(1)%te%boundary%type.NE.0) THEN
!           Transport:
            CORETRANSP(1)%te_transp%diff_eff(IRHO)         = DIFF(IRHO)
            CORETRANSP(1)%te_transp%vconv_eff(IRHO)        = VCONV(IRHO)
!           Source:
            CORESOURCE(1)%qe%imp(IRHO)                     = SIMP(2,IRHO)
            CORESOURCE(1)%qe%exp(IRHO)                     = SEXP(2,IRHO)
!           Analytical solution:
            COREPROF(1)%te%value(IRHO)                     = SOL(IRHO)
          END IF

! +++ Ion rotation:
          IF (COREPROF(1)%vtor%boundary%type(IION).NE.0) THEN
!           Transport:
            CORETRANSP(1)%vtor_transp%diff_eff(IRHO,IION)  = DIFF(IRHO)
            CORETRANSP(1)%vtor_transp%diff_eff(IRHO,IION)  = VCONV(IRHO)
!           Source:
            CORESOURCE(1)%ui%imp(IRHO,IION)                = SIMP(1,IRHO)
            CORESOURCE(1)%ui%exp(IRHO,IION)                = SEXP(1,IRHO)
!           Analytical solution:
            COREPROF(1)%vtor%value(IRHO,IION)              = SOL(IRHO)
          END IF



        END DO          ! end of IRHO=1,NRHO


!      Boundary conditions:
          IF (COREPROF(1)%ni%boundary%type(IION).EQ.1)   COREPROF(1)%ni%boundary%value(IION,1)   =  SOL(NRHO)
          IF (COREPROF(1)%ni%boundary%type(IION).EQ.2)   COREPROF(1)%ni%boundary%value(IION,1)   = -DSOL(NRHO)
          IF (COREPROF(1)%ni%boundary%type(IION).EQ.3)   COREPROF(1)%ni%boundary%value(IION,1)   = -LSOL(NRHO)

          IF (COREPROF(1)%ti%boundary%type(IION).EQ.1)   COREPROF(1)%ti%boundary%value(IION,1)   =  SOL(NRHO)
          IF (COREPROF(1)%ti%boundary%type(IION).EQ.2)   COREPROF(1)%ti%boundary%value(IION,1)   = -DSOL(NRHO)
          IF (COREPROF(1)%ti%boundary%type(IION).EQ.3)   COREPROF%ti%boundary%value(IION,1)      = -LSOL(NRHO)

          IF (COREPROF(1)%te%boundary%type.EQ.1)         COREPROF(1)%te%boundary%value(1)        =  SOL(NRHO)
          IF (COREPROF(1)%te%boundary%type.EQ.2)         COREPROF(1)%te%boundary%value(1)        = -DSOL(NRHO)
          IF (COREPROF(1)%te%boundary%type.EQ.3)         COREPROF(1)%te%boundary%value(1)        = -LSOL(NRHO)

          IF (COREPROF(1)%vtor%boundary%type(IION).EQ.1) COREPROF(1)%vtor%boundary%value(IION,1) =  SOL(NRHO)
          IF (COREPROF(1)%vtor%boundary%type(IION).EQ.2) COREPROF(1)%vtor%boundary%value(IION,1) = -DSOL(NRHO)
          IF (COREPROF(1)%vtor%boundary%type(IION).EQ.3) COREPROF(1)%vtor%boundary%value(IION,1) = -LSOL(NRHO)

         END DO          ! end of IION=1,NION

! +++ Parameter deallocation:
        DEALLOCATE (RHO)                                     !deallocation of radii
        DEALLOCATE (DIFF)                                    !deallocation of analytical diffusion coefficient
        DEALLOCATE (VCONV)                                   !deallocation of analytical convection velocity
        DEALLOCATE (SIMP)                                    !deallocation of analytical source proportional to the value
        DEALLOCATE (SEXP)                                    !deallocation of analytical external source
        DEALLOCATE (SOL)                                     !deallocation of analytical solution
        DEALLOCATE (DSOL)                                    !deallocation of derivative of analytical solution
        DEALLOCATE (LSOL)                                    !deallocation of scale length of analytical solution


        RETURN

        END SUBROUTINE M_SOLUTION
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  





! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
        SUBROUTINE ANALYTICAL_EXAMPLES                                        &
                   (NSOL,NRHO,RHO,TIME,DIFF,VCONV,SIMP,SEXP,                  &
                   SOLUTION,DERIVATIVE,LENGTH)
!-------------------------------------------------------!
!                                                       !
!       This subroutine defines the analytical solution !
!       for single transport equation using two         !
!       numerical examples developed by R.Zagorski      !
!                                                       !
!-------------------------------------------------------!


         IMPLICIT NONE

         INTEGER, PARAMETER :: DP = 8                         ! Double precision  
         INTEGER   :: NSOL, NRHO                              !Example number, number of radial points           

         REAL (DP) :: RHO(NRHO)                               !Radii
         REAL (DP) :: TIME                                    !time

         REAL (DP) :: DIFF(NRHO)                              !Diffusion coefficient
         REAL (DP) :: VCONV(NRHO)                             !Convective velocity
         REAL (DP) :: SIMP(2,NRHO)                            !Source proportional to the value
         REAL (DP) :: SEXP(2,NRHO)                            !Source independent on the value 
         REAL (DP) :: SOLUTION(NRHO)                          !Analytical solution 
         REAL (DP) :: DERIVATIVE(NRHO)                        !Derivative of the solution
         REAL (DP) :: LENGTH(NRHO)                            !Scale length of the solution

         REAL (DP) :: W,P,Q,K                                 !Parameters
         REAL (DP), PARAMETER :: PI=3.14159265D0

         INTEGER :: I

        W = 1.D0
        P = 1.D0
        Q = 1.D0
        K = 5.D0*PI

        IF (NSOL.EQ.1) THEN
!      ========= EXAMPLE 1(from R.Zagorski): =========
           DO I = 1,NRHO
! +++ Transport:
              DIFF(I) = RHO(I)**2
              VCONV(I) = RHO(I)*(1.D0-DSIN(2.D0*PI*RHO(I))*DSIN(W*TIME))
! +++ Analytical solution:
              SOLUTION(I) = (1.D0-DEXP(-W*TIME))*DEXP(RHO(I)**2)  
              DERIVATIVE(I) = SOLUTION(I)*2.D0*RHO(I) 
              LENGTH(I) = 1.D0/2.D0/RHO(I)
! +++ Source:
              SIMP(1,I) = (2.D0*PI*RHO(I)*DCOS(2.D0*PI*RHO(I))*DSIN(W*TIME)+W)     
              SEXP(1,I) = W*DEXP(RHO(I)**2)+SOLUTION(I)*(2.D0*(1.D0+RHO(I)**2)*        &
                    (1.D0-DSIN(2.D0*PI*RHO(I))*DSIN(W*TIME))-                          &
                    4.D0*RHO(I)**2*(2.D0+RHO(I)**2))

              SIMP(2,I) = (2.D0*PI*RHO(I)*DCOS(2.D0*PI*RHO(I))*DSIN(W*TIME)+W*1.5D0)     
              SEXP(2,I) = 1.5D0*W*DEXP(RHO(I)**2)+SOLUTION(I)*(2.D0*(1.D0+RHO(I)**2)*  &
                    (1.D0-DSIN(2.D0*PI*RHO(I))*DSIN(W*TIME))-                          &
                    4.D0*RHO(I)**2*(2.D0+RHO(I)**2))
          END DO          ! end of I=1,NRHO


        ELSE IF (NSOL.EQ.2) THEN
!      ========= EXAMPLE 2(from R.Zagorski): =========
           DO I = 1,NRHO
! +++ Transport:
              DIFF(I) = P*RHO(I)**2
              VCONV(I) = Q*RHO(I)
! +++ Analytical solution:
              SOLUTION(I) = (1.d0-DEXP(-W*TIME))*DCOS(K*RHO(I))
              DERIVATIVE(I) = -(1.d0-DEXP(-W*TIME))*DSIN(K*RHO(I))*K
              LENGTH(I) = -1.D0/DTAN(K*RHO(I))/K
! +++ Source:
              SIMP(1,I) = -2.d0*Q
              SEXP(1,I) = W*DEXP(-W*TIME)*DCOS(K*RHO(I))+                              &
                 (-Q+3.d0*P)*K*RHO(I)*(1.d0-DEXP(-W*TIME))*                            &
                 DSIN(K*RHO(I))+P*K**2*RHO(I)**2*SOLUTION(I)
              SIMP(2,I) = -2.d0*Q
              SEXP(2,I) = 1.5D0*W*DEXP(-W*TIME)*DCOS(K*RHO(I))+                        &
                 (-Q+3.d0*P)*K*RHO(I)*(1.d0-DEXP(-W*TIME))*                            &
                 DSIN(K*RHO(I))+P*K**2*RHO(I)**2*SOLUTION(I)
          END DO          ! end of I=1,NRHO

          END IF

          RETURN
          END SUBROUTINE ANALYTICAL_EXAMPLES
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  




          END MODULE ANALYTICS
