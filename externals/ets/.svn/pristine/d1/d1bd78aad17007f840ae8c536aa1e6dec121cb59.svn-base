!--------------------------------------------------------
!> The module declares types of variables used in ETS (transport code)
!>
!> \author Denis Kalupin
!>
!> \version "$Id$"
!--------------------------------------------------------
MODULE ETS_PLASMA
!--------------------------------------------------------
!     The module declares types of variables            !
!     used in ETS (transport code)                      !
!--------------------------------------------------------
  USE      ITM_TYPES
  IMPLICIT NONE



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE MAGNETIC_GEOMETRY

     INTEGER            :: NRHO                            !number of radial points

! + + radius dependent:      
     REAL (R8), POINTER ::                            &
          RHO(:),                                     &    !radial coordinate array 
          HRHO(:),                                    &    !intervals between radial knots, hrho(i)=rho(i+1)-rho(i) 
          VPR(:),                                     &    !volume derivative, V' 
          G1(:),                                      &    !geometry coefficient, <[nabla_RHO]^2>  
          G2(:),                                      &    !geometry coefficient, <R>  
          G3(:),                                      &    !geometry coefficient, <[nabla_RHO/R]^2>  
          FDIA(:),                                    &    !diamagnetic function  
! + + radius independent:      
          R0,                                         &    !major radius at which B0 is defined
          B0,                                         &    !magnetic field 
          RGEO,                                       &    !major radius of LCMS centre 
          BGEO                                             !magnetic field at RGEO

  END TYPE MAGNETIC_GEOMETRY
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE PLASMA_PROFILES

! + + Dimensions:
     INTEGER            :: NRHO                            !number of radial points
     INTEGER            :: NION                            !number of ion species

     INTEGER            :: SIGMA_SOURCE                    !source of sigma

! + + Boundary conditions:
     INTEGER,   POINTER :: PSI_BND_TYPE                    !PSI, type of boundary conditions   (boundary dependent)
     REAL (R8), POINTER :: PSI_BND_RHO                     !PSI, type of boundary conditions   (boundary dependent)
     REAL (R8), POINTER :: PSI_BND(:)                      !PSI, boundary conditions (value),  (boundary and boundary type dependent)

     INTEGER,   POINTER :: NE_BND_TYPE                     !NE, type of boundary conditions    (boundary and ion type dependent) 
     REAL (R8), POINTER :: NE_BND_RHO                      !NE, boundary conditions radius
     REAL (R8), POINTER :: NE_BND(:)                       !NE, boundary conditions (value),   (boundary, boundary type and ion type dependent) 

     INTEGER,   POINTER :: NI_BND_TYPE(:)                  !NI, type of boundary conditions    (boundary and ion type dependent) 
     REAL (R8), POINTER :: NI_BND_RHO(:)                   !NI, boundary conditions radius 
     REAL (R8), POINTER :: NI_BND(:,:)                     !NI, boundary conditions (value),   (boundary, boundary type and ion type dependent) 

     INTEGER,   POINTER :: TI_BND_TYPE(:)                  !TI, type of boundary conditions    (boundary and ion type dependent)  
     REAL (R8), POINTER :: TI_BND_RHO(:)                   !TI, boundary conditions radius 
     REAL (R8), POINTER :: TI_BND(:,:)                     !TI, boundary conditions (value),   (boundary, boundary type and ion type dependent)  

     INTEGER,   POINTER :: TE_BND_TYPE                     !TE, type of boundary conditions,   (boundary dependent)
     REAL (R8), POINTER :: TE_BND_RHO                      !TE, boundary conditions radius
     REAL (R8), POINTER :: TE_BND(:)                       !TE, boundary conditions (value),   (boundary and boundary type dependent)

     INTEGER,   POINTER :: VTOR_BND_TYPE(:)                !VTOR, type of boundary conditions  (boundary and ion type dependent)
     REAL (R8), POINTER :: VTOR_BND_RHO(:)                 !VTOR, boundary conditions radius 
     REAL (R8), POINTER :: VTOR_BND(:,:)                   !VTOR, boundary conditions (value), (boundary, boundary type and ion type dependent)

     REAL (R8), POINTER ::                            &
          
! + + Plasma composition:
!     (ion type dependent):
          ZION(:),                                    &    !ion charge 
          ZION2(:),                                   &    !ion charge squared
          MION(:),                                    &    !ion mass number 
!
! + + parameters linked with current equations: 
!     (radius dependent):
          PSI(:),                                     &    !magnetic flux function
          DPSI(:),                                    &    !magnetic flux function derivative, AF - 25.Sep.2014
          QSF(:),                                     &    !safety factor (calculated)
          CURR_TOR(:),                                &    !density of toroidal current
          CURR_PAR(:),                                &    !density of parallel current
          E_PAR(:),                                   &    !density of parallel current
          PR(:),                                      &    !total pressure
          SIGMA(:),                                   &    !conductivity
          JNI(:),                                     &    !non-inductive current
          QOH(:),                                     &    !Ohmic heating
          INT_QOH(:),                                 &    !the integral of Ohmic heating
          JOH(:),                                     &    !Ohmic current
          VLOOP(:),                                   &    !loop voltage
          SHEAR(:),                                   &    !magnetic shear
          BPOL(:),                                    &    !poloidal magnetic field
!
! + + density and fluxes of all ion components: 
!     (radius and ion type  dependent):
          NI(:,:),                                    &    !ion density (calculated)
          DNI(:,:),                                   &    !ion density (calculated) derivative, AF - 25.Sep.2014
          FLUX_NI(:,:),                               &    !ion particle flux
          FLUX_NI_CONV(:,:),                          &    !ion particle flux contributing to heat transport
          INT_SOURCE_NI(:,:),                         &    !ion particle flux determined from the integral of sources
          DIFF_NI(:,:),                               &    !ion particle diffusion
          VCONV_NI(:,:),                              &    !ion particle pinch velocity
          SOURCE_NI(:,:),                             &    !ion particle sources
!
! + + electron density and flux: 
!     (radius dependent):
          NE(:),                                      &    !electron density 
          DNE(:),                                     &    !electron density derivative, AF - 25.Sep.2014
          FLUX_NE(:),                                 &    !electron flux 
          FLUX_NE_CONV(:),                            &    !electron flux contributing to heat transport
          INT_SOURCE_NE(:),                           &    !electron particle flux determined from the integral of sources
          DIFF_NE(:),                                 &    !effective particle diffusion
          VCONV_NE(:),                                &    !effective particle pinch velocity
          SOURCE_NE(:),                               &    !effective particle sources
!
          ZEFF(:),                                    &    !effective charge 
!
! + + temperature and heat fluxes of all ion components: 
!     (radius and ion type dependent):
          TI(:,:),                                    &    !ion temperature (calculated)
          DTI(:,:),                                   &    !ion temperature (calculated) derivative, AF - 25.Sep.2014
          FLUX_TI(:,:),                               &    !total ion heat flux
          FLUX_TI_COND(:,:),                          &    !conductive ion heat flux 
          FLUX_TI_CONV(:,:),                          &    !convective ion heat flux 
          INT_SOURCE_TI(:,:),                         &    !ion heat flux determined from the integral of sources
          DIFF_TI(:,:),                               &    !ion heat diffusion
          VCONV_TI(:,:),                              &    !ion heat pinch velocity
          SOURCE_TI(:,:),                             &    !ion heat sources
!
! + + electron temperature and heat flux: 
!     (radius dependent):
          TE(:),                                      &    !electron temperature (calculated)
          DTE(:),                                     &    !electron temperature (calculated) derivative, AF - 25.Sep.2014
          FLUX_TE(:),                                 &    !total electron heat flux 
          FLUX_TE_COND(:),                            &    !conductive electron heat flux 
          FLUX_TE_CONV(:),                            &    !convective electron heat flux 
          INT_SOURCE_TE(:),                           &    !electron heat flux determined from the integral of sources
          DIFF_TE(:),                                 &    !electron heat diffusion
          VCONV_TE(:),                                &    !electron heat pinch velocity
          SOURCE_TE(:),                               &    !electron heat sources
!
! + + toroidal momentum and rotation velocity: 
!     (radius and ion type dependent):
          VTOR(:,:),                                  &    !ion toroidal velocity (calculated)
          DVTOR(:,:),                                 &    !ion toroidal velocity (calculated) derivative, AF - 25.Sep.2014
          WTOR(:,:),                                  &    !ion toroidal angular velocity 
          MTOR(:,:),                                  &    !ion toridal momentun 
          MTOR_TOT(:),                                &    !total ion toridal momentun 
          FLUX_MTOR(:,:),                             &    !toroidal momentum flux 
          FLUX_MTOR_CONV(:,:),                        &    !convective contribution to toroidal momentum flux 
          FLUX_MTOR_COND(:,:),                        &    !conductive contribution to toroidal momentum flux 
          FLUX_MTOR_TOT(:),                           &    !total toroidal momentum flux 
          INT_SOURCE_MTOR(:,:),                       &    !ion momentum flux determined from the integral of sources
          DIFF_VTOR(:,:),                             &    !ion rotation diffusion
          VCONV_VTOR(:,:),                            &    !ion rotation pinch velocity
          SOURCE_MTOR(:,:),                           &    !ion momentum sources
!
! + + other plasma parameters (external): 
!     (radius and ion type dependent):
          VPOL(:,:),                                  &    !poloidal velocity of ions 
          KNEO(:,:)                                        !neoclassical coefficient, K

  END TYPE PLASMA_PROFILES
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE TRANSPORT_COEFFICIENTS

     INTEGER            :: NRHO                            !number of radial points
     INTEGER            :: NION                            !number of ion species
     INTEGER,   POINTER :: SIGMA_SOURCE                    !the source for plasma resistance (ETS/NCLASS)  

     REAL (R8), POINTER ::                            &
!
! + + current transport: 
!     (radius and model dependent):
          SIGMA(:),                                   &    !plasma parallel conductivity
!
! + + electron particle transport coefficients 
!     (radius, ion type and model  dependent):
          DIFF_NE(:,:),                               &    !partical diffusion 
          VCONV_NE(:,:),                              &    !particle pinch velocity         
!
! + + ion particle transport coefficients 
!     (radius, ion type and model  dependent):
          DIFF_NI(:,:,:),                             &    !partical diffusion 
          VCONV_NI(:,:,:),                            &    !particle pinch velocity         
!
! + + ion heat transport coefficients 
!     (model  dependent):
          C1(:),                                      &    !coefficient in front of convective flux 
!     (radius, ion type and model  dependent):
          DIFF_TI(:,:),                               &    !ion heat diffusion 
          VCONV_TI(:,:),                              &    !ion heat pinch velocity 
          QGI(:,:),                                   &    !flow energy exchange term in RHS of eq.
!
! + + electron heat transport coefficients 
!     (radius and model dependent):
          DIFF_TE(:),                                 &    !electron heat diffusion 
          VCONV_TE(:),                                &    !electron heat pinch velocity 
!
! + + ion velocity transport coefficients 
!     (radius, ion type and model dependent):
          DIFF_VTOR(:,:),                             &    !diffusion coefficient for ion velocity
          VCONV_VTOR(:,:)                                  !pinch velocity for ion velocity

  END TYPE TRANSPORT_COEFFICIENTS
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE SOURCES_AND_SINKS

     INTEGER            :: NRHO                          !number of radial points
     INTEGER            :: NION                          !number of ion species

     REAL (R8), POINTER ::                         &
!
! + + current transport: 
!     (radius dependent):
          SIGMA(:),                                &     !plasma parallel conductivity
!     (radius dependent):
          CURR_EXP(:),                             &     !non inductive current, explicit component
          CURR_IMP(:),                             &     !non inductive current, implicit component
!
! +++ electron particle sources 
!     (radius and ion type dependent):
          SE_EXP(:),                               &     !external ion sources, explicit component
          SE_IMP(:),                               &     !external ion sources, implicit component
!
! +++ ion particle sources 
!     (radius and ion type dependent):
          SI_EXP(:,:),                             &     !external ion sources, explicit component
          SI_IMP(:,:),                             &     !external ion sources, implicit component
!
! +++ ion heat sources 
!     (radius and ion type dependent):
          QI_EXP(:,:),                             &     !external ion heat sources, explicit component
          QI_IMP(:,:),                             &     !external ion heat sources, implicit component
!
! +++ electron heat sources 
!     (radius dependent):
          QOH(:),                                  &     !ohmic heating
          QE_EXP(:),                               &     !external electron heat sources, explicit component
          QE_IMP(:),                               &     !external electron heat sources, implicit component
!
! +++ ion momentum sources 
!     (radius and ion type dependent):
          UI_EXP(:,:),                             &     !external ion momentum sources, explicit component
          UI_IMP(:,:)                                    !external ion momentum sources, implicit component


  END TYPE SOURCES_AND_SINKS
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE COLLISIONALITY

     INTEGER            :: NRHO                            !number of radial points
     INTEGER            :: NION                            !number of ion species

     REAL (R8), POINTER ::                           &
!
! +++ various exchange components: 
!     (radius and ion type dependent):
          SIGMA(:),                                  &     !plasma parallel conductivity
          VZI(:,:),                                  &     !ion energy exchange to other ions, implicit (frequency)
          QZI(:,:),                                  &     !ion energy exchange to other ions, explicit
          VEI(:,:),                                  &     !ion energy exchange to electrons, implicit (frequency)
          QEI(:,:),                                  &     !ion energy exchange to electrons, explicit
          WZI(:,:),                                  &     !ion momentum exchange to other ions, implicit
          UZI(:,:),                                  &     !ion momentum exchange to other ions, explicit
          VIE(:),                                    &     !electron energy exchange to ions, implicit (frequency)
          QIE(:),                                    &     !electron energy exchange to ions, explicit
          VII(:,:,:),                                &     !ion-ion collision frequency (matrix)
          WII(:,:,:)                                       !ion-ion momentum exchange (matrix)


  END TYPE COLLISIONALITY
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE IMPURITY_PROFILES

     INTEGER :: NRHO                                       !number of radial points
     INTEGER :: NIMP                                       !number of impurity species
     INTEGER :: NZIMP                                      !maximum number of ionization states

     REAL (R8), POINTER ::                           &
! + + density and fluxes of impurities: 
!     (radius and impurity ion type  dependent):
          NZ(:,:,:),                                 &     !density 
          FLUX_NZ(:,:,:),                            &     !flux 
          ZIMP(:,:,:),                               &     !impurity charge 
          ZIMP2(:,:,:)                                     !impurity charge squared 

  END TYPE IMPURITY_PROFILES
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE TIME_EVOLUTION

     INTEGER :: NRHO                                       !number of radial points
     INTEGER :: NION                                       !number of ion species

     REAL (R8), POINTER ::                          &
          PSIM(:),                                  &      !flux function at previous time step
          DPSIM(:),                                 &      !flux function at previous time step derivative, AF - 25.Sep.2014
          NIM(:,:),                                 &      !ion density at previous time step
          DNIM(:,:),                                &      !ion density at previous time step derivative, AF - 25.Sep.2014
          TIM(:,:),                                 &      !ion temperature at previous time step     
          DTIM(:,:),                                &      !ion temperature at previous time step derivative, AF - 25.Sep.2014     
          NEM(:),                                   &      !electron density at previous time step   
          DNEM(:),                                  &      !electron density at previous time step derivative, AF - 25.Sep.2014   
          TEM(:),                                   &      !electron temperature at previous time step   
          DTEM(:),                                  &      !electron temperature at previous time step derivative, AF - 25.Sep.2014   
          VTORM(:,:),                               &      !ion toroidal velocity at previous time step  
          DVTORM(:,:),                              &      !ion toroidal velocity at previous time step derivative, AF - 25.Sep.2014  
          VPRM(:),                                  &      !V' at previous time step   
          G2M(:),                                   &      !<R> at previous time step   
          G3M(:),                                   &      !<[nabla_RHO/R]^2> at previous time step   
          BTM                                              !toroidal magnetic field at previous time step

  END TYPE  TIME_EVOLUTION
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE RUN_CONTROL

     INTEGER :: SOLVER_TYPE                                !options for numerical solver 
                                                           !1-"standard" RITM;
                                                           !2-"integral" RITM;
                                                           !3-"PROGONKA"

     INTEGER :: SIGMA_SOURCE                               !option for origin of Plasma electrical conductivity
                                                           !0: plasma collisions
                                                           !1: transport module
                                                           !2: source module


     INTEGER :: QUASI_NEUT                                 !option for origin of Plasma electrical conductivity
                                                           !0: electrons
                                                           !1: ions from BC: ni1/ni1_bnd=ni2/ni2_bnd=...
                                                           !2: ions from carge: ni1*Z1=ni2*Z2=...

     INTEGER :: DEBUG_LEVEL

     REAL (R8) :: ohmic_heating_multiplier

     REAL (R8), POINTER ::                           &
          TAU,                                       &     !time step
          AMIX,                                      &     !mixing factor for profile
          AMIXTR,                                    &     !mixing factor for transport coefficients
          CONV,                                      &     !actual convergence
          CONVREC

  END TYPE  RUN_CONTROL
!--------------------------------------------------------
!--------------------------------------------------------



!--------------------------------------------------------
!--------------------------------------------------------
  TYPE DIAGNOSTIC

     CHARACTER*1000    :: ERROR_MESSAGE 
     INTEGER           :: IERR

  END TYPE DIAGNOSTIC
!--------------------------------------------------------
!--------------------------------------------------------





! + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + 
CONTAINS





! ----------------------- MAGNETIC GEOMETRY ---------------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate the magnetic geometry needed by the transport solver

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate the magnetic geometry needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_MAGNETIC_GEOMETRY (NRHO, GEOMETRY, ifail)

! +++ Input/Output:
    INTEGER, INTENT (IN)     :: NRHO
    TYPE (MAGNETIC_GEOMETRY) :: GEOMETRY
    INTEGER, INTENT (INOUT)  :: ifail

! +++ Local variables:
    INTEGER                  :: ISTAT

    ALLOCATE (GEOMETRY%RHO(NRHO),                     &
         GEOMETRY%HRHO(NRHO),                    &
         GEOMETRY%VPR(NRHO),                     &
         GEOMETRY%G1(NRHO),                      &
         GEOMETRY%G2(NRHO),                      &
         GEOMETRY%G3(NRHO),                      &
         GEOMETRY%FDIA(NRHO),                    &
         GEOMETRY%R0,                            &
         GEOMETRY%B0,                            &
         GEOMETRY%RGEO,                          &
         GEOMETRY%BGEO,                          &
         STAT=ISTAT)

! +++ Error checking and reporting:
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_MAGNETIC_GEOMETRY: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set dimensions
    GEOMETRY%NRHO          = NRHO

! +++ Zero out arrays
    GEOMETRY%RHO(:)        = 0.0_R8
    GEOMETRY%HRHO(:)       = 0.0_R8
    GEOMETRY%VPR(:)        = 0.0_R8
    GEOMETRY%G1(:)         = 0.0_R8
    GEOMETRY%G2(:)         = 0.0_R8
    GEOMETRY%G3(:)         = 0.0_R8
    GEOMETRY%FDIA(:)       = 0.0_R8
    GEOMETRY%R0            = 0.0_R8
    GEOMETRY%B0            = 0.0_R8
    GEOMETRY%RGEO          = 0.0_R8
    GEOMETRY%BGEO          = 0.0_R8

  END SUBROUTINE ALLOCATE_MAGNETIC_GEOMETRY


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate the magnetic geometry needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate the magnetic geometry needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_MAGNETIC_GEOMETRY (GEOMETRY, ifail)

! +++ Input/Output:
    TYPE (MAGNETIC_GEOMETRY) :: GEOMETRY
    INTEGER, INTENT (INOUT)  :: ifail

! +++ Local variables
    INTEGER                  :: ISTAT

    DEALLOCATE (GEOMETRY%RHO,                         &
         GEOMETRY%HRHO,                        &
         GEOMETRY%VPR,                         &
         GEOMETRY%G1,                          &
         GEOMETRY%G2,                          &
         GEOMETRY%G3,                          &
         GEOMETRY%FDIA,                        &
         GEOMETRY%R0,                          &
         GEOMETRY%B0,                          &
         GEOMETRY%RGEO,                        &
         GEOMETRY%BGEO,                        &
         STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_MAGNETIC_GEOMETRY: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_MAGNETIC_GEOMETRY



! ----------------------- PLASMA PROFILES ---------------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate plasma profiles needed by the transport solver

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_PLASMA_PROFILES (NRHO, NION, PROFILES, ifail)

! +++ Input/Output:
    INTEGER, INTENT (IN)    :: NRHO, NION
    TYPE (PLASMA_PROFILES)  :: PROFILES
    INTEGER, INTENT (INOUT) :: ifail

! +++ Local variables:
    INTEGER                 :: ISTAT    

    ALLOCATE (PROFILES%ZION(NION),               &
         PROFILES%ZION2(NION),                   &
         PROFILES%MION(NION),                    &
!         
         PROFILES%PSI(NRHO),                     &                  
         PROFILES%DPSI(NRHO),                    & 
         PROFILES%QSF(NRHO),                     &
         PROFILES%CURR_TOR(NRHO),                &
         PROFILES%CURR_PAR(NRHO),                &
         PROFILES%E_PAR(NRHO),                   &
         PROFILES%PR(NRHO),                      &
         PROFILES%SIGMA(NRHO),                   &
         PROFILES%JNI(NRHO),                     &
         PROFILES%QOH(NRHO),                     &
         PROFILES%INT_QOH(NRHO),                 &
         PROFILES%JOH(NRHO),                     &
         PROFILES%VLOOP(NRHO),                   &
         PROFILES%SHEAR(NRHO),                   &
         PROFILES%BPOL(NRHO),                    &
!
         PROFILES%PSI_BND(3),                    &
         PROFILES%PSI_BND_TYPE,                  &
         PROFILES%PSI_BND_RHO,                   &
!
         PROFILES%NI(NRHO,NION),                 &
         PROFILES%DNI(NRHO,NION),                & 
         PROFILES%FLUX_NI(NRHO,NION),            &
         PROFILES%FLUX_NI_CONV(NRHO,NION),       &
         PROFILES%INT_SOURCE_NI(NRHO,NION),      &
         PROFILES%NI_BND(3,NION),                &
         PROFILES%NI_BND_TYPE(NION),             &
         PROFILES%NI_BND_RHO(NION),              &
         PROFILES%DIFF_NI(NRHO,NION),            &
         PROFILES%VCONV_NI(NRHO,NION),           &
         PROFILES%SOURCE_NI(NRHO,NION),          &
!
         PROFILES%NE(NRHO),                      &
         PROFILES%DNE(NRHO),                     & 
         PROFILES%FLUX_NE(NRHO),                 &
         PROFILES%FLUX_NE_CONV(NRHO),            &
         PROFILES%INT_SOURCE_NE(NRHO),           &
         PROFILES%NE_BND(3),                     &
         PROFILES%NE_BND_TYPE,                   &
         PROFILES%NE_BND_RHO,                    &
         PROFILES%ZEFF(NRHO),                    &
         PROFILES%DIFF_NE(NRHO),                 &
         PROFILES%VCONV_NE(NRHO),                &
         PROFILES%SOURCE_NE(NRHO),               &
!   
         PROFILES%TI(NRHO,NION),                 &
         PROFILES%DTI(NRHO,NION),                & 
         PROFILES%FLUX_TI(NRHO,NION),            &
         PROFILES%FLUX_TI_COND(NRHO,NION),       &
         PROFILES%FLUX_TI_CONV(NRHO,NION),       &
         PROFILES%INT_SOURCE_TI(NRHO,NION),      &
         PROFILES%TI_BND(3,NION),                &
         PROFILES%TI_BND_TYPE(NION),             &
         PROFILES%TI_BND_RHO(NION),              &
         PROFILES%DIFF_TI(NRHO,NION),            &
         PROFILES%VCONV_TI(NRHO,NION),           &
         PROFILES%SOURCE_TI(NRHO,NION),          &
!
         PROFILES%TE(NRHO),                      &
         PROFILES%DTE(NRHO),                     & 
         PROFILES%FLUX_TE(NRHO),                 &
         PROFILES%FLUX_TE_COND(NRHO),            &
         PROFILES%FLUX_TE_CONV(NRHO),            &
         PROFILES%INT_SOURCE_TE(NRHO),           &
         PROFILES%TE_BND(3),                     &
         PROFILES%TE_BND_RHO,                    &
         PROFILES%TE_BND_TYPE,                   &
         PROFILES%DIFF_TE(NRHO),                 &
         PROFILES%VCONV_TE(NRHO),                &
         PROFILES%SOURCE_TE(NRHO),               &
!
         PROFILES%VTOR(NRHO,NION),               &
         PROFILES%DVTOR(NRHO,NION),              & 
         PROFILES%WTOR(NRHO,NION),               &
         PROFILES%MTOR(NRHO,NION),               &
         PROFILES%MTOR_TOT(NRHO),                &
         PROFILES%FLUX_MTOR(NRHO,NION),          &
         PROFILES%FLUX_MTOR_CONV(NRHO,NION),     &
         PROFILES%FLUX_MTOR_COND(NRHO,NION),     &
         PROFILES%FLUX_MTOR_TOT(NRHO),           &
         PROFILES%INT_SOURCE_MTOR(NRHO,NION),    &
         PROFILES%VTOR_BND(3,NION),              &
         PROFILES%VTOR_BND_TYPE(NION),           &
         PROFILES%VTOR_BND_RHO(NION),            &
         PROFILES%DIFF_VTOR(NRHO,NION),          &
         PROFILES%VCONV_VTOR(NRHO,NION),         &
         PROFILES%SOURCE_MTOR(NRHO,NION),        &
!
         PROFILES%VPOL(NRHO,NION),               &
         PROFILES%KNEO(NRHO,NION),               &
!
         STAT=ISTAT)

! +++ Error checking and reporting:
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_PLASMA_PROFILES: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set dimensions
    PROFILES%NRHO = NRHO
    PROFILES%NION = NION

    PROFILES%SIGMA_SOURCE = -1

! +++ Plasma composition:
    PROFILES%ZION(:)             = 0.0_R8
    PROFILES%ZION2(:)            = 0.0_R8
    PROFILES%MION(:)             = 0.0_R8

! +++ Zero out arrays:
    PROFILES%PSI(:)              = 0.0_R8
    PROFILES%DPSI(:)             = 0.0_R8 
    PROFILES%QSF(:)              = 0.0_R8
    PROFILES%CURR_TOR(:)         = 0.0_R8
    PROFILES%CURR_PAR(:)         = 0.0_R8
    PROFILES%E_PAR(:)            = 0.0_R8
    PROFILES%PR(:)               = 0.0_R8
    PROFILES%SIGMA(:)            = 0.0_R8
    PROFILES%JNI(:)              = 0.0_R8
    PROFILES%QOH(:)              = 0.0_R8
    PROFILES%INT_QOH(:)          = 0.0_R8
    PROFILES%JOH(:)              = 0.0_R8
    PROFILES%VLOOP(:)            = 0.0_R8
    PROFILES%SHEAR(:)            = 0.0_R8
    PROFILES%BPOL(:)             = 0.0_R8

    PROFILES%PSI_BND(:)          = 0.0_R8
    PROFILES%PSI_BND_TYPE        = 0
    PROFILES%PSI_BND_RHO         = 0.0_R8

    PROFILES%NI(:,:)             = 0.0_R8
    PROFILES%DNI(:,:)            = 0.0_R8 
    PROFILES%FLUX_NI(:,:)        = 0.0_R8
    PROFILES%FLUX_NI_CONV(:,:)   = 0.0_R8
    PROFILES%INT_SOURCE_NI(:,:)  = 0.0_R8
    PROFILES%NI_BND(:,:)         = 0.0_R8
    PROFILES%NI_BND_TYPE(:)      = 0
    PROFILES%NI_BND_RHO(:)       = 0.0_R8
    PROFILES%DIFF_NI(:,:)        = 0.0_R8
    PROFILES%VCONV_NI(:,:)       = 0.0_R8
    PROFILES%SOURCE_NI(:,:)      = 0.0_R8

    PROFILES%NE(:)               = 0.0_R8
    PROFILES%DNE(:)              = 0.0_R8 
    PROFILES%FLUX_NE(:)          = 0.0_R8
    PROFILES%FLUX_NE_CONV(:)     = 0.0_R8
    PROFILES%INT_SOURCE_NE(:)    = 0.0_R8
    PROFILES%NE_BND(:)           = 0.0_R8
    PROFILES%NE_BND_TYPE         = 0
    PROFILES%NE_BND_RHO          = 0.0_R8
    PROFILES%ZEFF(:)             = 1.0_R8
    PROFILES%DIFF_NE(:)          = 0.0_R8
    PROFILES%VCONV_NE(:)         = 0.0_R8
    PROFILES%SOURCE_NE(:)        = 0.0_R8

    PROFILES%TI(:,:)             = 0.0_R8
    PROFILES%DTI(:,:)            = 0.0_R8 
    PROFILES%FLUX_TI(:,:)        = 0.0_R8
    PROFILES%FLUX_TI_COND(:,:)   = 0.0_R8
    PROFILES%FLUX_TI_CONV(:,:)   = 0.0_R8
    PROFILES%INT_SOURCE_TI(:,:)  = 0.0_R8
    PROFILES%TI_BND(:,:)         = 0.0_R8
    PROFILES%TI_BND_TYPE(:)      = 0
    PROFILES%TI_BND_RHO(:)       = 0.0_R8
    PROFILES%DIFF_TI(:,:)        = 0.0_R8
    PROFILES%VCONV_TI(:,:)       = 0.0_R8
    PROFILES%SOURCE_TI(:,:)      = 0.0_R8

    PROFILES%TE(:)               = 0.0_R8
    PROFILES%DTE(:)              = 0.0_R8 
    PROFILES%FLUX_TE(:)          = 0.0_R8
    PROFILES%FLUX_TE_COND(:)     = 0.0_R8
    PROFILES%FLUX_TE_CONV(:)     = 0.0_R8
    PROFILES%INT_SOURCE_TE(:)    = 0.0_R8
    PROFILES%TE_BND(:)           = 0.0_R8
    PROFILES%TE_BND_TYPE         = 0
    PROFILES%TE_BND_RHO          = 0.0_R8
    PROFILES%DIFF_TE(:)          = 0.0_R8
    PROFILES%VCONV_TE(:)         = 0.0_R8
    PROFILES%SOURCE_TE(:)        = 0.0_R8

    PROFILES%VTOR(:,:)           = 0.0_R8
    PROFILES%DVTOR(:,:)          = 0.0_R8 
    PROFILES%WTOR(:,:)           = 0.0_R8
    PROFILES%MTOR(:,:)           = 0.0_R8
    PROFILES%MTOR_TOT(:)         = 0.0_R8
    PROFILES%FLUX_MTOR(:,:)      = 0.0_R8
    PROFILES%FLUX_MTOR_CONV(:,:) = 0.0_R8
    PROFILES%FLUX_MTOR_COND(:,:) = 0.0_R8
    PROFILES%FLUX_MTOR_TOT(:)    = 0.0_R8
    PROFILES%INT_SOURCE_MTOR(:,:)= 0.0_R8
    PROFILES%VTOR_BND(:,:)       = 0.0_R8
    PROFILES%VTOR_BND_TYPE(:)    = 0
    PROFILES%VTOR_BND_RHO(:)     = 0.0_R8
    PROFILES%DIFF_VTOR(:,:)      = 0.0_R8
    PROFILES%VCONV_VTOR(:,:)     = 0.0_R8
    PROFILES%SOURCE_MTOR(:,:)    = 0.0_R8

    PROFILES%VPOL(:,:)           = 0.0_R8
    PROFILES%KNEO(:,:)           = 0.0_R8

  END SUBROUTINE ALLOCATE_PLASMA_PROFILES


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate plasma profiles needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_PLASMA_PROFILES (PROFILES, ifail)

! +++ Input/Output:
    TYPE (PLASMA_PROFILES)  :: PROFILES
    INTEGER, INTENT (INOUT) :: ifail

! +++ Local variables:
    INTEGER                 :: ISTAT

    DEALLOCATE (PROFILES%ZION,        &
         PROFILES%ZION2,              &
         PROFILES%MION,               &
!
         PROFILES%PSI,                &
         PROFILES%DPSI,               & 
         PROFILES%QSF,                &
         PROFILES%CURR_TOR,           &
         PROFILES%CURR_PAR,           &
         PROFILES%E_PAR,              &
         PROFILES%PR,                 &
         PROFILES%SIGMA,              &
         PROFILES%PSI_BND_RHO,        &
         PROFILES%JNI,                &
         PROFILES%QOH,                &
         PROFILES%INT_QOH,            &
         PROFILES%JOH,                &
         PROFILES%VLOOP,              &
         PROFILES%SHEAR,              &
         PROFILES%BPOL,               &
!
         PROFILES%PSI_BND,            &
         PROFILES%PSI_BND_TYPE,       &
!
         PROFILES%NI,                 &
         PROFILES%DNI,                & 
         PROFILES%FLUX_NI,            &
         PROFILES%FLUX_NI_CONV,       &
         PROFILES%INT_SOURCE_NI,      &
         PROFILES%NI_BND,             &
         PROFILES%NI_BND_TYPE,        &
         PROFILES%NI_BND_RHO,         &
         PROFILES%DIFF_NI,            &
         PROFILES%VCONV_NI,           &
         PROFILES%SOURCE_NI,          &
!
         PROFILES%NE,                 &
         PROFILES%DNE,                & 
         PROFILES%FLUX_NE,            &
         PROFILES%FLUX_NE_CONV,       &
         PROFILES%INT_SOURCE_NE,      &
         PROFILES%NE_BND,             &
         PROFILES%NE_BND_TYPE,        &
         PROFILES%NE_BND_RHO,         &
         PROFILES%ZEFF,               &
         PROFILES%DIFF_NE,            &
         PROFILES%VCONV_NE,           &
         PROFILES%SOURCE_NE,          &
!
         PROFILES%TI,                 &
         PROFILES%DTI,                & 
         PROFILES%FLUX_TI,            &
         PROFILES%FLUX_TI_COND,       &
         PROFILES%FLUX_TI_CONV,       &
         PROFILES%INT_SOURCE_TI,      &
         PROFILES%TI_BND,             &
         PROFILES%TI_BND_TYPE,        &
         PROFILES%TI_BND_RHO,         &
         PROFILES%DIFF_TI,            &
         PROFILES%VCONV_TI,           &
         PROFILES%SOURCE_TI,          &
!
         PROFILES%TE,                 &
         PROFILES%DTE,                & 
         PROFILES%FLUX_TE,            &
         PROFILES%FLUX_TE_COND,       &
         PROFILES%FLUX_TE_CONV,       &
         PROFILES%INT_SOURCE_TE,      &
         PROFILES%TE_BND,             &
         PROFILES%TE_BND_TYPE,        &
         PROFILES%TE_BND_RHO,         &
         PROFILES%DIFF_TE,            &
         PROFILES%VCONV_TE,           &
         PROFILES%SOURCE_TE,          &
!
         PROFILES%VTOR,               &
         PROFILES%DVTOR,              & 
         PROFILES%WTOR,               &
         PROFILES%MTOR,               &
         PROFILES%MTOR_TOT,           &
         PROFILES%FLUX_MTOR,          &
         PROFILES%FLUX_MTOR_CONV,     &
         PROFILES%FLUX_MTOR_COND,     &
         PROFILES%FLUX_MTOR_TOT,      &
         PROFILES%INT_SOURCE_MTOR,    &
         PROFILES%VTOR_BND,           &
         PROFILES%VTOR_BND_TYPE,      &
         PROFILES%VTOR_BND_RHO,       &
         PROFILES%DIFF_VTOR,          &
         PROFILES%VCONV_VTOR,         &
         PROFILES%SOURCE_MTOR,        &
!
         PROFILES%VPOL,               &
         PROFILES%KNEO,               &
!
         STAT=ISTAT)

! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_PLASMA_PROFILES: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_PLASMA_PROFILES






! ----------------------- TRANSPORT_COEFFICIENTS ---------------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate profiles of transport coefficients needed by the transport solver

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate profiles of transport coefficients needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_TRANSPORT_COEFFICIENTS (NRHO, NION, TRANSPORT, ifail)

! +++ Input/Output:
    INTEGER, INTENT (IN)          :: NRHO, NION
    TYPE (TRANSPORT_COEFFICIENTS) :: TRANSPORT
    INTEGER, INTENT (INOUT)       :: ifail

! +++ Local variables
    INTEGER                       :: ISTAT

    ALLOCATE (TRANSPORT%SIGMA_SOURCE,            &
         TRANSPORT%SIGMA(NRHO),                  &
!             
         TRANSPORT%DIFF_NE(NRHO,3),              &
         TRANSPORT%VCONV_NE(NRHO,3),             &
!             
         TRANSPORT%DIFF_NI(NRHO,NION,3),         &
         TRANSPORT%VCONV_NI(NRHO,NION,3),        &
!
         TRANSPORT%C1(3),                        &
         TRANSPORT%DIFF_TI(NRHO,NION),           &
         TRANSPORT%VCONV_TI(NRHO,NION),          &
         TRANSPORT%QGI(NRHO,NION),               &
!
         TRANSPORT%DIFF_TE(NRHO),                &
         TRANSPORT%VCONV_TE(NRHO),               &
!
         TRANSPORT%DIFF_VTOR(NRHO,NION),         &
         TRANSPORT%VCONV_VTOR(NRHO,NION),        &
!
         STAT=ISTAT)

! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_TRANSPORT_COEFFICIENTS: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set dimensions
    TRANSPORT%NRHO               = NRHO
    TRANSPORT%NION               = NION

    TRANSPORT%SIGMA_SOURCE       = 1

! Zero out arrays

    TRANSPORT%SIGMA(:)           = 0.0_R8

    TRANSPORT%DIFF_NE(:,:)       = 0.0_R8
    TRANSPORT%VCONV_NE(:,:)      = 0.0_R8

    TRANSPORT%DIFF_NI(:,:,:)     = 0.0_R8
    TRANSPORT%VCONV_NI(:,:,:)    = 0.0_R8

    TRANSPORT%C1(:)              = 0.0_R8
    TRANSPORT%DIFF_TI(:,:)       = 0.0_R8
    TRANSPORT%VCONV_TI(:,:)      = 0.0_R8
    TRANSPORT%QGI(:,:)           = 0.0_R8

    TRANSPORT%DIFF_TE(:)         = 0.0_R8
    TRANSPORT%VCONV_TE(:)        = 0.0_R8

    TRANSPORT%DIFF_VTOR(:,:)     = 0.0_R8
    TRANSPORT%VCONV_VTOR(:,:)    = 0.0_R8


  END SUBROUTINE ALLOCATE_TRANSPORT_COEFFICIENTS


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate plasma profiles needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_TRANSPORT_COEFFICIENTS (TRANSPORT, ifail)

! +++ Input/Output:
    TYPE (TRANSPORT_COEFFICIENTS) :: TRANSPORT
    INTEGER, INTENT (INOUT)       :: ifail

! +++ Local variables:
    INTEGER                       :: ISTAT

    DEALLOCATE (TRANSPORT%SIGMA_SOURCE,               &
         TRANSPORT%SIGMA,                      &
!  
         TRANSPORT%DIFF_NI,                    &
         TRANSPORT%VCONV_NI,                   &
!
         TRANSPORT%DIFF_NE,                    &
         TRANSPORT%VCONV_NE,                   &
!
         TRANSPORT%C1,                         &
         TRANSPORT%DIFF_TI,                    &
         TRANSPORT%VCONV_TI,                   &
         TRANSPORT%QGI,                        &
!
         TRANSPORT%DIFF_TE,                    &
         TRANSPORT%VCONV_TE,                   &
!
         TRANSPORT%DIFF_VTOR,                  &
         TRANSPORT%VCONV_VTOR,                 &
!
         STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_TRANSPORT_COEFFICIENTS: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_TRANSPORT_COEFFICIENTS






! ----------------------- SOURCES & SINKS ---------------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate profiles of sources needed by the transport solver

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate profiles of sources needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_SOURCES_AND_SINKS (NRHO, NION, SOURCES, ifail)

! +++ Input/Output:
    INTEGER, INTENT (IN)     :: NRHO, NION
    TYPE (SOURCES_AND_SINKS) :: SOURCES
    INTEGER, INTENT (INOUT)  :: ifail

! Local variables
    INTEGER :: ISTAT

    ALLOCATE (SOURCES%SIGMA(NRHO),              &     
!
              SOURCES%CURR_EXP(NRHO),           &  
              SOURCES%CURR_IMP(NRHO),           & 
!
              SOURCES%SE_EXP(NRHO),             &     
              SOURCES%SE_IMP(NRHO),             &    
!
              SOURCES%SI_EXP(NRHO,NION),        &     
              SOURCES%SI_IMP(NRHO,NION),        &    
!
              SOURCES%QI_EXP(NRHO,NION),        &     
              SOURCES%QI_IMP(NRHO,NION),        &    
!
              SOURCES%QOH(NRHO),                &   
              SOURCES%QE_EXP(NRHO),             &  
              SOURCES%QE_IMP(NRHO),             & 
!
              SOURCES%UI_EXP(NRHO,NION),        &    
              SOURCES%UI_IMP(NRHO,NION),        &    
!
              STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_SOURCES_AND_SINKS: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set dimensions
    SOURCES%NRHO             = NRHO
    SOURCES%NION             = NION

! +++ Zero out arrays
    SOURCES%SIGMA(:)       = 0.0_R8  

    SOURCES%CURR_EXP(:)    = 0.0_R8
    SOURCES%CURR_IMP(:)    = 0.0_R8

    SOURCES%SE_EXP(:)      = 0.0_R8  
    SOURCES%SE_IMP(:)      = 0.0_R8  

    SOURCES%SI_EXP(:,:)    = 0.0_R8  
    SOURCES%SI_IMP(:,:)    = 0.0_R8  

    SOURCES%QI_EXP(:,:)    = 0.0_R8 
    SOURCES%QI_IMP(:,:)    = 0.0_R8   

    SOURCES%QOH(:)         = 0.0_R8
    SOURCES%QE_EXP(:)      = 0.0_R8
    SOURCES%QE_IMP(:)      = 0.0_R8

    SOURCES%UI_EXP(:,:)    = 0.0_R8   
    SOURCES%UI_IMP(:,:)    = 0.0_R8  

  END SUBROUTINE ALLOCATE_SOURCES_AND_SINKS


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate plasma profiles needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_SOURCES_AND_SINKS (SOURCES, ifail)

! +++ Input/Output:
    TYPE (SOURCES_AND_SINKS) :: SOURCES
    INTEGER, INTENT (INOUT)  :: ifail

! +++ Local variables:
    INTEGER                  :: ISTAT

    DEALLOCATE (SOURCES%SIGMA,                        &     
!
                SOURCES%CURR_EXP,                     &     
                SOURCES%CURR_IMP,                     &    
!
                SOURCES%SE_EXP,                       &     
                SOURCES%SE_IMP,                       &    
!
                SOURCES%SI_EXP,                       &     
                SOURCES%SI_IMP,                       &    
!
                SOURCES%QI_EXP,                       &     
                SOURCES%QI_IMP,                       &  
!
                SOURCES%QOH,                          &   
                SOURCES%QE_EXP,                       &   
                SOURCES%QE_IMP,                       & 
!
                SOURCES%UI_EXP,                       &  
                SOURCES%UI_IMP,                       &  
!
                STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_SOURCES_AND_SINKS: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_SOURCES_AND_SINKS









! ----------------------- COLLISIONS ---------------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate profiles of sources needed by the transport solver

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate profiles of sources needed by the transport solver???
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_COLLISIONALITY (NRHO, NION, COLLISIONS, ifail)

! +++ Input/Output:
    INTEGER, INTENT (IN)     :: NRHO, NION
    TYPE (COLLISIONALITY)    :: COLLISIONS
    INTEGER, INTENT (INOUT)  :: ifail

! Local variables
    INTEGER :: ISTAT

    ALLOCATE (COLLISIONS%SIGMA(NRHO),                    &  
         COLLISIONS%VZI(NRHO,NION),                 &  
         COLLISIONS%QZI(NRHO,NION),                 &  
         COLLISIONS%VEI(NRHO,NION),                 &  
         COLLISIONS%QEI(NRHO,NION),                 &  
         COLLISIONS%WZI(NRHO,NION),                 &   
         COLLISIONS%UZI(NRHO,NION),                 &   
         COLLISIONS%VIE(NRHO),                      &  
         COLLISIONS%QIE(NRHO),                      &  
         COLLISIONS%VII(NRHO,NION,NION),            &  
         COLLISIONS%WII(NRHO,NION,NION),            &  
!
         STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_COLLISIONALITY: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set dimensions
    COLLISIONS%NRHO             = NRHO
    COLLISIONS%NION             = NION

! +++ Zero out arrays
    COLLISIONS%SIGMA(:)         = 0.0_R8
    COLLISIONS%VZI(:,:)         = 0.0_R8
    COLLISIONS%QZI(:,:)         = 0.0_R8
    COLLISIONS%VEI(:,:)         = 0.0_R8
    COLLISIONS%QEI(:,:)         = 0.0_R8
    COLLISIONS%WZI(:,:)         = 0.0_R8
    COLLISIONS%UZI(:,:)         = 0.0_R8
    COLLISIONS%VIE(:)           = 0.0_R8
    COLLISIONS%QIE(:)           = 0.0_R8
    COLLISIONS%VII(:,:,:)       = 0.0_R8
    COLLISIONS%WII(:,:,:)       = 0.0_R8

  END SUBROUTINE ALLOCATE_COLLISIONALITY


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate plasma profiles needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_COLLISIONALITY (COLLISIONS, ifail)

! +++ Input/Output:
    TYPE (COLLISIONALITY)    :: COLLISIONS
    INTEGER, INTENT (INOUT)  :: ifail

! +++ Local variables:
    INTEGER                  :: ISTAT

    DEALLOCATE (COLLISIONS%SIGMA,                     &   
         COLLISIONS%VZI,                       &   
         COLLISIONS%QZI,                       &  
         COLLISIONS%VEI,                       &   
         COLLISIONS%QEI,                       &  
         COLLISIONS%WZI,                       &   
         COLLISIONS%UZI,                       &   
         COLLISIONS%VIE,                       &  
         COLLISIONS%QIE,                       &   
         COLLISIONS%VII,                       &  
         COLLISIONS%WII,                       &  
!
         STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_COLLISIONALITY: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_COLLISIONALITY



! ----------------------- IMPURITY PROFILES ---------------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate plasma profiles needed by the transport solver

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_IMPURITY_PROFILES (NRHO, NIMP, NZIMP, IMPURITY, ifail)

! +++ Input/Output:
    INTEGER, INTENT (IN)     :: NRHO, NIMP, NZIMP
    TYPE (IMPURITY_PROFILES) :: IMPURITY
    INTEGER, INTENT (INOUT)  :: ifail

! +++ Local variables:
    INTEGER                  :: ISTAT    

    ALLOCATE (IMPURITY%NZ(NRHO,NIMP,NZIMP),           &
         IMPURITY%FLUX_NZ(NRHO,NIMP,NZIMP),      &
         IMPURITY%ZIMP(NRHO,NIMP,NZIMP),         &
         IMPURITY%ZIMP2(NRHO,NIMP,NZIMP),        &
         STAT=ISTAT)

! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_IMPURITY_PROFILES: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set dimensions
    IMPURITY%NRHO             = NRHO
    IMPURITY%NIMP             = NIMP
    IMPURITY%NZIMP            = NZIMP

! Zero out arrays

    IMPURITY%NZ(:,:,:)        = 0.0_R8
    IMPURITY%FLUX_NZ(:,:,:)   = 0.0_R8
    IMPURITY%ZIMP(:,:,:)      = 0.0_R8
    IMPURITY%ZIMP2(:,:,:)     = 0.0_R8


  END SUBROUTINE ALLOCATE_IMPURITY_PROFILES


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate plasma profiles needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_IMPURITY_PROFILES (IMPURITY, ifail)

! +++ Input/Output:
    TYPE (IMPURITY_PROFILES) :: IMPURITY
    INTEGER, INTENT (INOUT)  :: ifail

! +++ Local variables:
    INTEGER                  :: ISTAT

    DEALLOCATE (IMPURITY%NZ,                          &
         IMPURITY%FLUX_NZ,                     &
         IMPURITY%ZIMP,                        &
         IMPURITY%ZIMP2,                       &
         STAT=ISTAT) 


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_IMPURITY_PROFILES: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_IMPURITY_PROFILES




! ---------------- PARAMETERS FOR TIME EVOLUTION --------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate parameters required by time evolution 

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate parameters required by time evolution 
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_TIME_EVOLUTION (NRHO, NION, EVOLUTION, ifail)

! +++ Input/Output:
    INTEGER, INTENT (IN)         :: NRHO, NION
    TYPE (TIME_EVOLUTION)        :: EVOLUTION
    INTEGER, INTENT (INOUT)      :: ifail

! +++ Local variables:
    INTEGER                      :: ISTAT



    ALLOCATE (EVOLUTION%PSIM(NRHO),                   &
         EVOLUTION%DPSIM(NRHO),                  & 
         EVOLUTION%NIM(NRHO,NION),               &
         EVOLUTION%DNIM(NRHO,NION),              & 
         EVOLUTION%TIM(NRHO,NION),               &
         EVOLUTION%DTIM(NRHO,NION),              & 
         EVOLUTION%NEM(NRHO),                    &
         EVOLUTION%DNEM(NRHO),                   & 
         EVOLUTION%TEM(NRHO),                    &
         EVOLUTION%DTEM(NRHO),                   & 
         EVOLUTION%VTORM(NRHO,NION),             &
         EVOLUTION%DVTORM(NRHO,NION),            & 
         EVOLUTION%VPRM(NRHO),                   &
         EVOLUTION%G2M(NRHO),                    &
         EVOLUTION%BTM,                          &
         STAT=ISTAT)

! +++ Error checking and reporting:
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_TIME_EVOLUTION: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set control parameters:
    EVOLUTION%PSIM(:)       = 0.0_R8
    EVOLUTION%DPSIM(:)      = 0.0_R8 
    EVOLUTION%NIM(:,:)      = 0.0_R8
    EVOLUTION%DNIM(:,:)     = 0.0_R8 
    EVOLUTION%TIM(:,:)      = 0.0_R8
    EVOLUTION%DTIM(:,:)     = 0.0_R8 
    EVOLUTION%NEM(:)        = 0.0_R8
    EVOLUTION%DNEM(:)       = 0.0_R8 
    EVOLUTION%TEM(:)        = 0.0_R8
    EVOLUTION%DTEM(:)       = 0.0_R8 
    EVOLUTION%VTORM(:,:)    = 0.0_R8
    EVOLUTION%DVTORM(:,:)   = 0.0_R8 
    EVOLUTION%VPRM(:)       = 0.0_R8
    EVOLUTION%G2M(:)        = 0.0_R8
    EVOLUTION%BTM           = 0.0_R8

  END SUBROUTINE ALLOCATE_TIME_EVOLUTION


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate plasma profiles needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_TIME_EVOLUTION (EVOLUTION, ifail)

! +++ Input/Output:
    TYPE (TIME_EVOLUTION)        :: EVOLUTION
    INTEGER, INTENT (INOUT)      :: ifail

! +++ Local variables:
    INTEGER :: ISTAT

    DEALLOCATE (EVOLUTION%PSIM,                &
         EVOLUTION%DPSIM,                      & 
         EVOLUTION%NIM,                        &
         EVOLUTION%DNIM,                       & 
         EVOLUTION%TIM,                        &
         EVOLUTION%DTIM,                       & 
         EVOLUTION%NEM,                        &
         EVOLUTION%DNEM,                       & 
         EVOLUTION%TEM,                        &
         EVOLUTION%DTEM,                       & 
         EVOLUTION%VTORM,                      &
         EVOLUTION%DVTORM,                     & 
         EVOLUTION%VPRM,                       &
         EVOLUTION%G2M,                        &
         EVOLUTION%BTM,                        &
         STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_TIME_EVOLUTION: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_TIME_EVOLUTION




! ---------------- RUN_CONTROL  --------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate parameters required by the run control and 
!     iterations loop

! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Allocate parameters required by the run control and iterations loop
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE ALLOCATE_RUN_CONTROL (CONTROL, ifail)

! +++ Input/Output:
    TYPE (RUN_CONTROL)           :: CONTROL
    INTEGER, INTENT (INOUT)      :: ifail

! +++ Local variables:
    INTEGER                      :: ISTAT

    ALLOCATE (CONTROL%TAU,                          &
              CONTROL%AMIX,                         &
              CONTROL%AMIXTR,                       &
              CONTROL%CONV,                         &
              CONTROL%CONVREC,                      &
              STAT=ISTAT)

! +++ Error checking and reporting:
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'ALLOCATE_RUN_CONTROL: Failure to allocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

! +++ Set control parameters:
    CONTROL%SOLVER_TYPE  = 0                               
    CONTROL%SIGMA_SOURCE = 1     ! default to taking plasma electrical conductivity from the transport module
    CONTROL%QUASI_NEUT   = 0     ! default: electrons fron quasi-neutrality
    CONTROL%TAU          = 0.0_R8
    CONTROL%AMIX         = 1.0_R8
    CONTROL%AMIXTR       = 1.0_R8
    CONTROL%CONV         = 1.0_R8
    CONTROL%CONVREC      = 0.0_R8

  END SUBROUTINE ALLOCATE_RUN_CONTROL


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate plasma profiles needed by the transport solver
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Deallocate plasma profiles needed by the transport solver
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
  SUBROUTINE DEALLOCATE_RUN_CONTROL (CONTROL, ifail)

! +++ Input/Output:
    TYPE (RUN_CONTROL)           :: CONTROL
    INTEGER, INTENT (INOUT)      :: ifail

! +++ Local variables:
    INTEGER :: ISTAT

    DEALLOCATE (CONTROL%TAU,                        &
                CONTROL%AMIX,                       &
                CONTROL%AMIXTR,                     &
                CONTROL%CONV,                       &
                CONTROL%CONVREC,                    &
                STAT=ISTAT)


! +++ Error checking and reporting
    IF (ISTAT /= 0) THEN
       ifail = MAX(ifail,1)    ! Failure to allocate
       write(*,*) 'DEALLOCATE_RUN_CONTROL: Failure to deallocate'
       RETURN
    ELSE
       ifail = MAX(ifail,0)    ! Normal return
    END IF

  END SUBROUTINE DEALLOCATE_RUN_CONTROL







! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  

END MODULE ETS_PLASMA







