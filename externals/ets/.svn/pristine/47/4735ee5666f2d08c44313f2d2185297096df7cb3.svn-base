
Property changes on: src/helena_lib/mnewtax.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/spwert.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/helena_lib/euitm_schemas.f90
===================================================================
--- src/helena_lib/euitm_schemas.f90	(revision 252)
+++ src/helena_lib/euitm_schemas.f90	(working copy)
@@ -1,2087 +0,0 @@
-! ITM FORTRAN 90 type definitions
-
-! Version phase 4.07b,  generated 14/09/2009
-
-module euITM_utilities    ! declare the set of types common to all sub-trees
-
-integer, parameter, private :: DP=kind(1.0D0)
-
-type type_codeparam  !    
-  character(len=132), dimension(:), pointer ::codename => null()       ! /codeparam/codename - Name of the code
-  character(len=132), dimension(:), pointer ::codeversion => null()       ! /codeparam/codeversion - Version of the code (as in the ITM repository)
-  character(len=132), dimension(:), pointer ::parameters => null()       ! /codeparam/parameters - List of the code specific parameters, string expected to be in XML format.
-  character(len=132), dimension(:), pointer ::output_diag => null()       ! /codeparam/output_diag - List of the code specific diagnostic/output, string expected to be in XML format.
-  integer  :: output_flag=-999999999       ! /codeparam/output_flag - Output flag : 0 means the run is successful, other values meaning some difficulty has been encountered, the exact meaning is then 
-endtype
-
-type type_param  !    
-  character(len=132), dimension(:), pointer ::parameters => null()       ! /param/parameters - Actual value of the code parameters (instance of coparam/parameters in XML format).
-  character(len=132), dimension(:), pointer ::default_param => null()       ! /param/default_param - Default value of the code parameters (instance of coparam/parameters in XML format).
-  character(len=132), dimension(:), pointer ::schema => null()       ! /param/schema - Code parameters schema.
-endtype
-
-type type_composition  !    
-  real(DP),pointer  :: amn(:) => null()     ! /composition/amn - Atomic mass number (lumped ions are allowed); Vector (nion)
-  real(DP),pointer  :: zn(:) => null()     ! /composition/zn - Nuclear charge (lumped ions are allowed); Vector (nion)
-  real(DP),pointer  :: zion(:) => null()     ! /composition/zion - Ion charge (of the dominant ionisation state; lumped ions are allowed); Vector (nion)
-  integer,pointer  :: imp_flag(:) => null()      ! /composition/imp_flag - Multiple charge state calculation flag : 0-Only one charge state is considered; 1-Multiple charge state are considered and are des
-endtype
-
-type type_whatref  !    
-  character(len=132), dimension(:), pointer ::user => null()       ! /whatref/user - Name of the user if private data, public if public ITM database.
-  character(len=132), dimension(:), pointer ::machine => null()       ! /whatref/machine - Name of the device
-  integer  :: shot=-999999999       ! /whatref/shot - Shot number
-  integer  :: run=-999999999       ! /whatref/run - Run number
-  integer  :: occurrence=-999999999       ! /whatref/occurrence - Occurrence number of the CPO in the reference entry
-endtype
-
-type type_putinfo  !    Structure which is type independent, describing the data item
-  character(len=132), dimension(:), pointer ::putmethod => null()       ! /putinfo/putmethod - Storage method for this data
-  character(len=132), dimension(:), pointer ::putaccess => null()       ! /putinfo/putaccess - Instructions to access the data using this method
-  character(len=132), dimension(:), pointer ::putlocation => null()       ! /putinfo/putlocation - Name of this data under this method
-  character(len=132), dimension(:), pointer ::rights => null()       ! /putinfo/rights - Access rights to this data
-endtype
-
-type type_datainfo  !    
-  character(len=132), dimension(:), pointer ::dataprovider => null()       ! /datainfo/dataprovider - Name of the actual data provider (the person who filled the data)
-  character(len=132), dimension(:), pointer ::putdate => null()       ! /datainfo/putdate - Date at which the data has been put in the DB
-  character(len=132), dimension(:), pointer ::source => null()       ! /datainfo/source - Exact reference of the data source (e.g. original reference in the native machine data base)
-  character(len=132), dimension(:), pointer ::comment => null()       ! /datainfo/comment - Any additional comment
-  integer  :: isref=-999999999       ! /datainfo/isref - 1 if the data can be found in the present data base entry; 2 if the data can be found in a parent data base entry; 0 if no data co
-  type (type_whatref) :: whatref  ! /datainfo/whatref - 
-  type (type_putinfo) :: putinfo  ! /datainfo/putinfo - 
-endtype
-
-type type_spot  !    
-  real(DP),pointer  :: waist(:,:) => null()     ! /spot/waist - Waist for the spot ellipse [m], Matrix (nantenna,2). Time-dependent
-  real(DP),pointer  :: angle(:) => null()     ! /spot/angle - Rotation angle for the spot ellipse [rd], Vector(nantenna). Time-dependent
-endtype
-
-type type_phaseellipse  !    
-  real(DP),pointer  :: invcurvrad(:,:) => null()     ! /phaseellipse/invcurvrad - Inverse curvature radii for the phase ellipse [m-1], Matrix (nantenna,2). Time-dependent
-  real(DP),pointer  :: angle(:) => null()     ! /phaseellipse/angle - Rotation angle for the phase ellipse [rd], Vector(nantenna). Time-dependent
-endtype
-
-type type_b0r0  !    Characteristics of the vacuum toroidal field, redundant with the toroidfield CPO, normalisation used by the ETS
-  real(DP)  :: r0=-9.0D40       ! /r0 - Characteristic major radius of the device (used in publications, usually middle of the vessel at the equatorial midplane) [m]. Sca
-  real(DP)  :: b0=-9.0D40       ! /b0 - Vacuum field at r0 [T]; Positive sign means anti-clockwise when viewed from above. Scalar. Time-dependent. 
-endtype
-
-type type_boundaryel  !    Structure for the boundary condition of core transport equations (electrons) Time-dependent;
-  real(DP),pointer  :: value(:) => null()     ! /value - Value of the boundary condition (in case flag = 2). Unit depends on type, respectively [1-field, 2-field.m^-1, 3-m, 4-field.s^-1].
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the boundary condition (any comment describing its origin : code, path to diagnostic signals, massaging); String
-  integer  :: type=-999999999       ! /type - Type of the boundary condition for the transport solver (in case flag = 2). 0- equation not solved; 1- value of the field y; 2-rad
-  real(DP)  :: rho_tor=-9.0D40       ! /rho_tor - Position of the boundary condition (in terms of toroidal flux coordinate) for the transport solver [m]. Outside this boundary, the
-endtype
-
-type type_boundaryion  !    Structure for the boundary condition of core transport equations (ions) Time-dependent
-  real(DP),pointer  :: value(:,:) => null()     ! /value - Value of the boundary condition (in case flag = 2). Unit depends on type, respectively [1-field, 2-field.m^-1, 3-m, 4-field.s^-1].
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the boundary condition (any comment describing its origin : code, path to diagnostic signals, massaging); Array of strin
-  integer,pointer  :: type(:) => null()      ! /type - Type of the boundary condition for the transport solver (in case flag = 2). 0- equation not solved; 1- value of the field y; 2-rad
-  real(DP),pointer  :: rho_tor(:) => null()     ! /rho_tor - Position of the boundary condition (in terms of toroidal flux coordinate) for the transport solver [m]. Outside this boundary, the
-endtype
-
-type type_entry_def  !    Structure defining a database entry
-  character(len=132), dimension(:), pointer ::user => null()       ! /user - Name of the user if private data. Value should be ITM if stored in the official common ITM tree
-  character(len=132), dimension(:), pointer ::machine => null()       ! /machine - Name of the device
-  integer  :: shot=-999999999       ! /shot - Shot number
-  integer  :: run=-999999999       ! /run - Run number
-endtype
-
-type type_exp0D  !    Structure for experimental time-dependent scalar signal
-  real(DP)  :: value=-9.0D40       ! /value - Signal value; Time-dependent; Scalar
-  real(DP)  :: abserror=-9.0D40       ! /abserror - Absolute error on signal; Time-dependent; Scalar
-  real(DP)  :: relerror=-9.0D40       ! /relerror - Relative error on signal (normalised to signal value); Time-dependent; Scalar
-endtype
-
-type type_exp1D  !    Structure for experimental 1D signal
-  real(DP),pointer  :: value(:) => null()     ! /value - Signal value; Time-dependent; Vector
-  real(DP),pointer  :: abserror(:) => null()     ! /abserror - Absolute error on signal; Time-dependent; Vector
-  real(DP),pointer  :: relerror(:) => null()     ! /relerror - Relative error on signal (normalised to signal value); Time-dependent; Vector
-endtype
-
-type type_exp2D  !    Structure for experimental 2D signal
-  real(DP),pointer  :: value(:,:) => null()     ! /value - Signal value; Time-dependent; Matrix
-  real(DP),pointer  :: abserror(:,:) => null()     ! /abserror - Absolute error on signal; Time-dependent; Matrix
-  real(DP),pointer  :: relerror(:,:) => null()     ! /relerror - Relative error on signal (normalised to signal value); Time-dependent; Matrix
-endtype
-
-type type_offdiagel  !    Subtree containing the full transport matrix from a transport model, for the electrons. Time-dependent.
-  real(DP),pointer  :: d_ni(:,:) => null()     ! /d_ni - Off-Diagonal term coupling ion density gradient to the transport equation [m.^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: d_ti(:,:) => null()     ! /d_ti - Off-Diagonal term coupling ion density gradient to the transport equation [m.^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: d_ne(:) => null()     ! /d_ne - Off-Diagonal term coupling electron density gradient to the transport equation [m.^2.s^-1]. Time-dependent. Vector (nrho)
-  real(DP),pointer  :: d_te(:) => null()     ! /d_te - Off-Diagonal term coupling electron temperature gradient to the transport equation [m.^2.s^-1]. Time-dependent. Vector (nrho)
-  real(DP),pointer  :: d_epar(:) => null()     ! /d_epar - Off-Diagonal term coupling parallel electric field to the transport equation [m.^2.s^-1]. Time-dependent. Vector (nrho)
-  real(DP),pointer  :: d_mtor(:) => null()     ! /d_mtor - Off-Diagonal term coupling total toroidal momentum to the transport equation [m.^2.s^-1]. Time-dependent. Vector (nrho)
-endtype
-
-type type_offdiagion  !    Subtree containing the full transport matrix from a transport model, for the various ion species
-  real(DP),pointer  :: d_ni(:,:,:) => null()     ! /d_ni - Off-Diagonal term coupling ion density gradient to the transport equation [m.^2.s^-1]. Time-dependent. Array3d (nrho,nion,nion)
-  real(DP),pointer  :: d_ti(:,:,:) => null()     ! /d_ti - Off-Diagonal term coupling ion density gradient to the transport equation [m.^2.s^-1]. Time-dependent. Array3d (nrho,nion,nion)
-  real(DP),pointer  :: d_ne(:,:) => null()     ! /d_ne - Off-Diagonal term coupling electron density gradient to the transport equation [m.^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: d_te(:,:) => null()     ! /d_te - Off-Diagonal term coupling electron temperature gradient to the transport equation [m.^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: d_epar(:,:) => null()     ! /d_epar - Off-Diagonal term coupling parallel electric field to the transport equation [m.^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: d_mtor(:,:) => null()     ! /d_mtor - Off-Diagonal term coupling total toroidal momentum to the transport equation [m.^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-endtype
-
-type type_reduced  !    Structure for a reduced data signal (0D data)
-  real(DP)  :: value=-9.0D40       ! /value - Data value; Real
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Path to the source signal (diagnostic or genprof, from which to read all info on the signal); String
-  real(DP)  :: time=-9.0D40       ! /time - Time (exact time slice used from the time array of the source signal); Real
-endtype
-
-type type_reggrid  !    Generic structure for a regular grid
-  real(DP),pointer  :: dim1(:) => null()     ! /dim1 - First dimension values; Vector (ndim1) 
-  real(DP),pointer  :: dim2(:) => null()     ! /dim2 - Second dimension values; Vector (ndim2) 
-endtype
-
-type type_rf_beam  !    Beam characteristics (RF wave description)
-  type (type_spot) :: spot  ! /spot - Spot characteristics
-  type (type_phaseellipse) :: phaseellipse  ! /phaseellipse - Phase ellipse characteristics of the spot
-endtype
-
-type type_rz0D  !    Structure for one (R,Z) position (0D)
-  real(DP)  :: r=-9.0D40       ! /r - Major radius [m]
-  real(DP)  :: z=-9.0D40       ! /z - Altitude [m]
-endtype
-
-type type_rz1D  !    Structure for list of R,Z positions (1D)
-  real(DP),pointer  :: r(:) => null()     ! /r - Major radius [m]
-  real(DP),pointer  :: z(:) => null()     ! /z - Altitude [m]
-endtype
-
-type type_rz1D_npoints  !    Structure for list of R,Z positions (1D)
-  real(DP),pointer  :: r(:) => null()     ! /r - Major radius [m]. Vector(max_npoints). Time-dependent
-  real(DP),pointer  :: z(:) => null()     ! /z - Altitude [m]. Vector(max_npoints). Time-dependent
-  integer  :: npoints=-999999999       ! /npoints - Number of meaningful points in the above vectors at a given time slice. Time-dependent
-endtype
-
-type type_rz2D  !    Structure for list of R,Z positions (2D)
-  real(DP),pointer  :: r(:,:) => null()     ! /r - Major radius [m]
-  real(DP),pointer  :: z(:,:) => null()     ! /z - Altitude [m]
-endtype
-
-type type_rz3D  !    Structure for list of R,Z positions (3D)
-  real(DP),pointer  :: r(:,:,:) => null()     ! /r - Major radius [m]
-  real(DP),pointer  :: z(:,:,:) => null()     ! /z - Altitude [m]
-endtype
-
-type type_rzphi1D  !    Structure for list of R,Z,phi positions (1D)
-  real(DP),pointer  :: r(:) => null()     ! /r - Major radius [m]
-  real(DP),pointer  :: z(:) => null()     ! /z - Altitude [m]
-  real(DP),pointer  :: phi(:) => null()     ! /phi - Toroidal angle [rad]
-endtype
-
-type type_rzphi2D  !    Structure for list of R,Z,phi positions (2D)
-  real(DP),pointer  :: r(:,:) => null()     ! /r - Major radius [m]
-  real(DP),pointer  :: z(:,:) => null()     ! /z - Altitude [m]
-  real(DP),pointer  :: phi(:,:) => null()     ! /phi - Toroidal angle [rad]
-endtype
-
-type type_setup_line  !    Geometric description of the lines of sight for line integral diagnostic
-   type (type_rzphi1D)  :: pivot_point  ! /pivot_point - Pivot point of each line of sight; Vector (nchords)
-  real(DP),pointer  :: polchordang(:) => null()     ! /polchordang - Viewing angle in poloidal plane [rad]; 0 is directed towards low field side, pi is towards high field side. Positive is anti-clock
-  real(DP),pointer  :: torchordang(:) => null()     ! /torchordang - Viewing angle in horizontal plane [rad]; positive is anti-clockwise when viewed from above. Vector (nchords)
-   type (type_rzphi1D)  :: second_point  ! /second_point - Second point defining the line of sight together with the pivot_point. This data is redundant with polchordang and torchordang, bu
-  integer  :: nchordpoints=-999999999       ! /nchordpoints - Number of points along the viewing chords (used for synthetic diagnostic signal reconstruction)
-endtype
-
-type type_source_ion  !    Subtree containing source terms for the various ion species
-  real(DP),pointer  :: exp(:,:) => null()     ! /exp - Explicit source term [same unit as root quantity]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: imp(:,:) => null()     ! /imp - Implicit source term [s^-1.m^-3]. Time-dependent. Matrix (nrho,nion)
-endtype
-
-type type_source_imp  !    Subtree containing source terms for the impurity species
-  real(DP),pointer  :: exp(:,:,:) => null()     ! /exp - Explicit source term [same unit as root quantity]. Time-dependent. Array3d (nrho,nimp,max_nzimp)
-  real(DP),pointer  :: imp(:,:,:) => null()     ! /imp - Implicit source term [s^-1.m^-3]. Time-dependent. Array3d (nrho,nimp,max_nzimp)
-endtype
-
-type type_source_el  !    Subtree containing source terms for electrons
-  real(DP),pointer  :: exp(:) => null()     ! /exp - Explicit source term [same unit as root quantity]. Time-dependent. Vector (nrho)
-  real(DP),pointer  :: imp(:) => null()     ! /imp - Implicit source term [s^-1.m^-3]. Time-dependent. Vector (nrho)
-endtype
-
-type type_transcoefion  !    Subtree containing transport coefficients from a transport model, for the various ion species, including the energy exchange term 
-  real(DP),pointer  :: diff_eff(:,:) => null()     ! /diff_eff - Effective diffusivity [m^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: vconv_eff(:,:) => null()     ! /vconv_eff - Effective convection [m.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: exchange(:,:) => null()     ! /exchange - Ion to electron energy exchange [W.m^-3]. Time-dependent. Matrix(nrho,nion).
-  real(DP),pointer  :: qgi(:,:) => null()     ! /qgi - Energy exchange term due to transport. [W.m^-3]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: flux(:,:) => null()     ! /flux - Flux. Not used in transport equations [field.m.s^-1,.m^-3 if field is not a density itself]. Time-dependent. Matrix (nrho,nion)
-   type (type_offdiagion)  :: off_diagonal  ! /off_diagonal - Details of the transport matrix, just for diagnostic (not used in transport equations). Time-dependent.
-  integer  :: flag=-999999999       ! /flag - Flag describing the form of transport produced by the original model : 0- not calculated, 1- D and V, 2- flux, 3- full transport m
-endtype
-
-type type_transcoefel  !    Subtree containing transport coefficients from a transport model, for the electrons
-  real(DP),pointer  :: diff_eff(:) => null()     ! /diff_eff - Effective diffusivity [m^2.s^-1]. Time-dependent. Vector (nrho)
-  real(DP),pointer  :: vconv_eff(:) => null()     ! /vconv_eff - Effective convection [m.s^-1]. Time-dependent. Vector (nrho)
-  real(DP),pointer  :: flux(:) => null()     ! /flux - Flux. Not used in transport equations [field.m.s^-1,.m^-3 if field is not a density itself]. Time-dependent. Vector (nrho)
-   type (type_offdiagel)  :: off_diagonal  ! /off_diagonal - Details of the transport matrix, just for diagnostic (not used in transport equations). Time-dependent.
-  integer  :: flag=-999999999       ! /flag - Flag describing the form of transport produced by the original model : 0- not calculated, 1- D and V, 2- flux, 3- full transport m
-endtype
-
-type type_transcoefvtor  !    Subtree containing transport coefficients from a transport model, for the various ion species
-  real(DP),pointer  :: diff_eff(:,:) => null()     ! /diff_eff - Effective diffusivity [m^2.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: vconv_eff(:,:) => null()     ! /vconv_eff - Effective convection [m.s^-1]. Time-dependent. Matrix (nrho,nion)
-  real(DP),pointer  :: flux(:,:) => null()     ! /flux - Flux. Not used in transport equations [field.m.s^-1,.m^-3 if field is not a density itself]. Time-dependent. Matrix (nrho,nion)
-   type (type_offdiagion)  :: off_diagonal  ! /off_diagonal - Details of the transport matrix, just for diagnostic (not used in transport equations). Time-dependent.
-  integer  :: flag=-999999999       ! /flag - Flag describing the form of transport produced by the original model : 0- not calculated, 1- D and V, 2- flux, 3- full transport m
-endtype
-
-type type_transcoefimp  !    Subtree containing transport coefficients from a transport model, for the various impurity species (multiple charge states)
-  real(DP),pointer  :: diff_eff(:,:,:) => null()     ! /diff_eff - Effective diffusivity [m^2.s^-1]. Time-dependent. Array3d (nrho,nimp,max_nzimp)
-  real(DP),pointer  :: vconv_eff(:,:,:) => null()     ! /vconv_eff - Effective convection [m.s^-1]. Time-dependent. Array3d (nrho,nimp,max_nzimp)
-  real(DP),pointer  :: exchange(:,:,:) => null()     ! /exchange - Ion to electron energy exchange [W.m^-3]. Time-dependent. Array3d (nrho,nimp,max_nzimp)
-  real(DP),pointer  :: flux(:,:,:) => null()     ! /flux - Flux. Not used in transport equations [field.m.s^-1,.m^-3 if field is not a density itself]. Time-dependent. Array3d (nrho,nimp,ma
-  integer  :: flag=-999999999       ! /flag - Flag describing the form of transport produced by the original model : 0- not calculated, 1- D and V, 2- flux, 3- full transport m
-endtype
-
-type type_lineintegraldiag  !    General line integral diagnostic
-  type (type_datainfo) :: datainfo  ! /datainfo - 
-  character(len=132), dimension(:), pointer ::expression => null()       ! /expression - Formal expression for the line integral to be evaluated as a function of ne, ni, Te, Ti, Zeff, Br, Bz
-   type (type_setup_line)  :: setup_line  ! /setup_line - Geometric description of the lines of sight
-   type (type_exp1D)  :: measure  ! /measure - Measured value. Time-dependent; Vector (nchords)
-  real(DP)  :: time=-9.0D40       ! /time - Time [s]; Time-dependent; Scalar
-endtype
-
-end module ! end of the utilities module
-
-module     euitm_schemas       ! declaration of all CPOs
-
-use euITM_utilities
-
-integer, parameter, private :: DP=kind(1.0D0)
-
-! ***********  Include antennas.xsd
-type type_waveguides  !    
-  integer,pointer  :: nwm_theta(:) => null()      ! /modules/waveguides/nwm_theta - Number of waveguides per module in the poloidal direction. Vector of integers (nantenna_lh).
-  integer,pointer  :: nwm_phi(:) => null()      ! /modules/waveguides/nwm_phi - Number of waveguides per module in the toroidal direction. Vector of integers (nantenna_lh).
-  integer,pointer  :: mask(:,:) => null()     ! /modules/waveguides/mask - Mask of passive and active waveguides for an internal module, Matrix of integers (nantenna_lh,max_nwm_phi)
-  integer,pointer  :: npwbm_phi(:) => null()      ! /modules/waveguides/npwbm_phi - Number of passive waveguide between modules in the toroidal direction. Vector of integers (nantenna_lh).
-  integer,pointer  :: npwe_phi(:) => null()      ! /modules/waveguides/npwe_phi - Number of passive waveguides on each antenna edge in the toroidal direction. Vector of integers (nantenna_lh).
-  real(DP),pointer  :: sw_theta(:) => null()     ! /modules/waveguides/sw_theta - Spacing between poloidally neighboring waveguides [m], Vector (nantenna_lh)
-  real(DP),pointer  :: hw_theta(:) => null()     ! /modules/waveguides/hw_theta - Height of waveguides in the poloidal direction [m], Vector (nantenna_lh)
-  real(DP),pointer  :: bwa(:) => null()     ! /modules/waveguides/bwa - Width of active waveguides [m], Vector (nantenna_lh)
-  real(DP),pointer  :: biwp(:) => null()     ! /modules/waveguides/biwp - Width of internal passive waveguides [m], Vector (nantenna_lh)
-  real(DP),pointer  :: bewp(:) => null()     ! /modules/waveguides/bewp - Width of edge passive waveguides [m], Vector (nantenna_lh)
-  real(DP),pointer  :: e_phi(:,:) => null()     ! /modules/waveguides/e_phi - Thickness between waveguides in the toroidal direction [m], Matrix (nantenna_lh,nthick_phi). Reminder : nthick_phi = nmp_phi*nwm_p
-  real(DP),pointer  :: scl(:,:) => null()     ! /modules/waveguides/scl - Short circuit length for passive waveguides [m], Matrix (nantenna_lh,nshort_phi). Reminder : nshort _phi = nmp_phi* npwm_phi  + (n
-endtype
-
-type type_modules  !    
-  integer,pointer  :: nma_theta(:) => null()      ! /modules/nma_theta - Number of modules per antenna in the poloidal direction. Vector of integers (nantenna_lh).
-  integer,pointer  :: nma_phi(:) => null()      ! /modules/nma_phi - Number of modules per antenna in the toroidal direction. Vector of integers (nantenna_lh).
-  real(DP),pointer  :: sm_theta(:) => null()     ! /modules/sm_theta - Spacing between poloidally neighboring modules [m], Vector (nantenna_lh)
-  real(DP),pointer  :: amplitude(:,:,:) => null()     ! /modules/amplitude - Amplitude of the TE10 mode injected in the module [W], Array 3D (nantenna_lh,nma_phi,nm_theta). Time-dependent
-  real(DP),pointer  :: phase(:,:,:) => null()     ! /modules/phase - Phase of the TE10 mode injected in the module [rd], Array 3D (nantenna_lh, nma_phi, nm_theta). Time-dependent
-  type (type_waveguides) :: waveguides  ! /modules/waveguides - Waveguides description
-endtype
-
-type type_antennalh_setup  !    Detailed description of LH antennas
-  type (type_modules) :: modules  ! /modules - Modules description
-endtype
-
-type type_launchangles  !    
-  real(DP),pointer  :: alpha(:) => null()     ! /antennas/antenna_ec/launchangles/alpha - Poloidal launching angle between the horizontal plane and the poloidal component of the nominal beam centerline (trigonometric con
-  real(DP),pointer  :: beta(:) => null()     ! /antennas/antenna_ec/launchangles/beta - Toroidal launching angle between the horizontal plane and the poloidal component of the nominal beam centerline (trigonometric con
-endtype
-
-type type_plasmaedge  !    
-  integer,pointer  :: nmode(:) => null()      ! /antennas/antenna_lh/plasmaedge/nmode - Number of modes used for antenna/plasma coupling. Vector of integers (nantenna_lh).
-  integer,pointer  :: npoints(:) => null()      ! /antennas/antenna_lh/plasmaedge/npoints - Number of points in the distance grid. Vector of integers (nantenna_lh).
-  real(DP),pointer  :: distance(:,:) => null()     ! /antennas/antenna_lh/plasmaedge/distance - Grid for electron density, defined as the perpendicular distance to the antenna waveguide plane (the origin being described in the
-  real(DP),pointer  :: density(:,:) => null()     ! /antennas/antenna_lh/plasmaedge/density - Electron density in front of the antenna [m^-3]. Matrix (nantenna_lh,max_npoints). Time-dependent.
-endtype
-
-type type_antenna_ec  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /antennas/antenna_ec/name - Antenna name, Vector of strings (nantenna_ec)
-  real(DP),pointer  :: frequency(:) => null()     ! /antennas/antenna_ec/frequency - Frequency [Hz], Vector (nantenna_ec)
-   type (type_exp1D)  :: power  ! /antennas/antenna_ec/power - Power [W], Vector (nantenna_ec). Time-dependent
-  integer,pointer  :: mode(:) => null()      ! /antennas/antenna_ec/mode - Incoming wave mode (+ or -1 for O/X mode), Vector of integers (nantenna_ec). Time-dependent
-   type (type_rzphi1D)  :: position  ! /antennas/antenna_ec/position - Reference global position of the last mirror. Vectors (nantenna_ec). Time-dependent
-  type (type_launchangles) :: launchangles  ! /antennas/antenna_ec/launchangles - Launching angles of the beam
-   type (type_rf_beam)  :: beam  ! /antennas/antenna_ec/beam - Beam characteristics
-endtype
-
-type type_antenna_ic  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /antennas/antenna_ic/name - Antenna name, Vector of strings (nantenna_ic)
-  real(DP),pointer  :: frequency(:) => null()     ! /antennas/antenna_ic/frequency - Frequency [Hz], Vector (nantenna_ic)
-   type (type_exp1D)  :: power  ! /antennas/antenna_ic/power - Power [W], Vector (nantenna_ic). Time-dependent
-   type (type_rzphi1D)  :: position  ! /antennas/antenna_ic/position - Reference global antenna position. Vectors (nantenna_ic). Time-dependent
-endtype
-
-type type_antenna_lh  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /antennas/antenna_lh/name - Antenna name, Vector of strings (nantenna_lh)
-  real(DP),pointer  :: frequency(:) => null()     ! /antennas/antenna_lh/frequency - Frequency [Hz], Vector (nantenna_lh)
-   type (type_exp1D)  :: power  ! /antennas/antenna_lh/power - Power [W], Vector (nantenna_lh). Time-dependent
-  integer,pointer  :: mode(:) => null()      ! /antennas/antenna_lh/mode - Incoming wave mode (+ or -1 for slow/fast LH wave mode). Vector of integers (nantenna_lh). Time-dependent
-   type (type_rzphi1D)  :: position  ! /antennas/antenna_lh/position - Reference global antenna position. Vectors (nantenna_lh). Time-dependent
-   type (type_antennalh_setup)  :: setup  ! /antennas/antenna_lh/setup - Detailed description of LH antennas.
-  type (type_plasmaedge) :: plasmaedge  ! /antennas/antenna_lh/plasmaedge - Plasma edge characteristics in front of the antenna.
-   type (type_rf_beam)  :: beam  ! /antennas/antenna_lh/beam - Beam characteristics
-endtype
-
-type type_antennas  !    
-  type (type_datainfo) :: datainfo  ! /antennas/datainfo - 
-  type (type_antenna_ec) :: antenna_ec  ! /antennas/antenna_ec - Electron Cyclotron antennas
-  type (type_antenna_ic) :: antenna_ic  ! /antennas/antenna_ic - Ion Cyclotron antennas
-  type (type_antenna_lh) :: antenna_lh  ! /antennas/antenna_lh - Lower Hybrid antennas
-  type (type_codeparam) :: codeparam  ! /antennas/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /antennas/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include controllers.xsd
-type type_statespace  !    
-  character(len=132), dimension(:), pointer ::observable => null()       ! /controllers/statespace/observable - Name of the observable signals (for ABCD type description); List of signal names (as they appear in the data structure, subtrees d
-  real(DP),pointer  :: A(:,:) => null()     ! /controllers/statespace/A - A matrix
-  real(DP),pointer  :: B(:,:) => null()     ! /controllers/statespace/B - B matrix
-  real(DP),pointer  :: C(:,:) => null()     ! /controllers/statespace/C - C matrix
-  real(DP),pointer  :: D(:,:) => null()     ! /controllers/statespace/D - D matrix
-  real(DP)  :: deltat=-9.0D40       ! /controllers/statespace/deltat - Discrete time sampling interval [s]; scalar
-endtype
-
-type type_transferpid  !    
-  real(DP)  :: gp=-9.0D40       ! /controllers/transferpid/gp - Proportional gain. Scalar.
-  real(DP)  :: gd=-9.0D40       ! /controllers/transferpid/gd - Derivative gain. Scalar.
-  real(DP)  :: gi=-9.0D40       ! /controllers/transferpid/gi - Integral gain. Scalar.
-endtype
-
-type type_controllers  !    
-  type (type_datainfo) :: datainfo  ! /controllers/datainfo - 
-  character(len=132), dimension(:), pointer ::name => null()       ! /controllers/name - Name of this controller
-  character(len=132), dimension(:), pointer ::purpose => null()       ! /controllers/purpose - Purpose of this controller
-  character(len=132), dimension(:), pointer ::type => null()       ! /controllers/type - One of a known type of controllers
-  character(len=132), dimension(:), pointer ::input => null()       ! /controllers/input - Name of the input signals; List of signal names (as they appear in the data structure, subtrees denoted by "/" as in a Unix path);
-  character(len=132), dimension(:), pointer ::output => null()       ! /controllers/output - Name of the output signals (actuators); List of signal names (as they appear in the data structure, subtrees denoted by "/" as in 
-  character(len=132), dimension(:), pointer ::descriptor => null()       ! /controllers/descriptor - Simulikn/Scicos controller description, in case the controller is implemented under such tools. String.
-  type (type_statespace) :: statespace  ! /controllers/statespace - Statespace controller in discrete time, formally described as follows : Xn+1 = A*Xn+B*Un; and Yn = C*Xn+D*Un; X is the vector of o
-  type (type_transferpid) :: transferpid  ! /controllers/transferpid - Transfer function used to define a PID controller
-  real(DP),pointer  :: reference(:) => null()     ! /controllers/reference - Time-dependent reference value to be reached by the controller. The corresponding signal name is given by the "input" node; Time-d
-  type (type_codeparam) :: codeparam  ! /controllers/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /controllers/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include coredelta.xsd
-type type_coredelta  !    
-  type (type_datainfo) :: datainfo  ! /coredelta/datainfo - 
-  type (type_composition) :: composition  ! /coredelta/composition - 
-  real(DP),pointer  :: rho_tor(:) => null()     ! /coredelta/rho_tor - Toroidal flux coordinate (not normalised, equivalent to rho_tor_norm) [m];  Vector (nrho). Time-dependent.
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /coredelta/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-  real(DP),pointer  :: delta_psi(:) => null()     ! /coredelta/delta_psi - Instant change of the poloidal flux [Wb]. Time-dependent. Vector(nrho).
-  real(DP),pointer  :: delta_te(:) => null()     ! /coredelta/delta_te - Instant change of the electron temperature [eV]. Time-dependent. Vector(nrho). 
-  real(DP),pointer  :: delta_ti(:,:) => null()     ! /coredelta/delta_ti - Instant change of the ion temperature [eV]. Time-dependent. Matrix (nrho,nion).
-  real(DP),pointer  :: delta_tz(:,:,:) => null()     ! /coredelta/delta_tz - Instant change of the impurity (multiple charge states) temperature [eV]. Time-dependent. Array3d (nrho,nimp,max_nzimp).
-  real(DP),pointer  :: delta_ne(:) => null()     ! /coredelta/delta_ne - Instant change of the electron density [m^-3]. Time-dependent. Vector(nrho).
-  real(DP),pointer  :: delta_ni(:,:) => null()     ! /coredelta/delta_ni - Instant change of the ion density [m^-3]. Time-dependent. Matrix (nrho,nion).
-  real(DP),pointer  :: delta_nz(:,:,:) => null()     ! /coredelta/delta_nz - Instant change of the impurity (multiple charge states) density [m^-3]. Time-dependent. Array3d (nrho,nimp,max_nzimp).
-  real(DP),pointer  :: delta_vtor(:,:) => null()     ! /coredelta/delta_vtor - Instant change of the toroidal toroidal velocity [m.s^-1]. Time-dependent. Matrix (nrho,nion).
-  type (type_codeparam) :: codeparam  ! /coredelta/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /coredelta/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include coreimpur.xsd
-type type_sourceimp  !    Structure for the total source term for the transport equation (impurities). Time-dependent;
-  real(DP),pointer  :: value(:,:,:) => null()     ! /value - Value of the source term [m^-3.s^-1]; Time-dependent; Array3D (nrho,nimp,max_nzimp)
-  real(DP),pointer  :: integral(:,:,:) => null()     ! /integral - Integral from 0 to rho of the source term. Time-dependent; Array3D(nsource,nimp,max_nzimp)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the impurity profiles : code, path to diagnostic signals, massaging, .
-endtype
-
-type type_coretransimp  !    Structure for the transport coefficients for the transport equation (impurities). Time-dependent;
-  real(DP),pointer  :: diff(:,:,:) => null()     ! /diff - Diffusion coefficient [m^2.s^-1]. Time-dependent; Array3D(nrho,nimp,max_nzimp)
-  real(DP),pointer  :: vconv(:,:,:) => null()     ! /vconv - Convection coefficient [m.s^-1]. Time-dependent; Array3D (nrho,nimp,max_nzimp)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the impurity profiles : code, path to diagnostic signals, massaging, .
-endtype
-
-type type_boundaryimp  !    Structure for the boundary condition of core transport equations (impurities) Time-dependent
-  real(DP),pointer  :: value(:,:,:) => null()     ! /value - Value of the boundary condition (in case flag = 2). Unit depends on type, respectively [1-field, 2-field.m^-1, 3-m, 4-field.s^-1].
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the boundary condition (any comment describing its origin : code, path to diagnostic signals, massaging); Array of strin
-  integer,pointer  :: type(:,:) => null()     ! /type - Type of the boundary condition for the transport solver (in case flag = 2). 0- equation not solved; 1- value of the field y; 2-rad
-  real(DP),pointer  :: rho(:,:) => null()     ! /rho - Position of the boundary condition (in terms of toroidal flux coordinate) for the transport solver [m]. Outside this boundary, the
-  type (type_codeparam) :: codeparam  ! /codeparam - 
-endtype
-
-type type_fluximp  !    Structure for the fluxes of a field of the core transport equations (impurities); Time-dependent;
-  real(DP),pointer  :: flux_dv(:,:,:) => null()     ! /flux_dv - Flux of the field calculated from the transport coefficients. Time-dependent; Array3D (nrho,nion,max_nzimp)
-  real(DP),pointer  :: flux_interp(:,:,:) => null()     ! /flux_interp - Interpretative flux deduced from measured data, the integral of the source term, and the time derivative of the field. Time-depend
-endtype
-
-type type_desc_impur  !    
-  real(DP),pointer  :: amn(:) => null()     ! /coreimpur/desc_impur/amn - Atomic mass number of the impurity; Vector (nimp)
-  integer,pointer  :: zn(:) => null()      ! /coreimpur/desc_impur/zn - Nuclear charge of the impurity; Vector (nimp)
-  integer,pointer  :: i_ion(:) => null()      ! /coreimpur/desc_impur/i_ion - Index of the impurity species in the coreprof ion species ordering. Vector (nimp)
-  integer,pointer  :: nzimp(:) => null()      ! /coreimpur/desc_impur/nzimp - Number of charge states (or bundles) considered for each impurity species. Vector (nimp)
-  integer,pointer  :: zmin(:,:) => null()     ! /coreimpur/desc_impur/zmin - Minimum Z of impurity ionisation state bundle. Matrix (nimp,max_nzimp)
-  integer,pointer  :: zmax(:,:) => null()     ! /coreimpur/desc_impur/zmax - Maximum Z of impurity ionisation state bundle. If no bundle, zmax=zmin. Matrix (nimp,max_nzimp)
-endtype
-
-type type_coreimpur  !    
-  type (type_datainfo) :: datainfo  ! /coreimpur/datainfo - 
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /coreimpur/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-  real(DP),pointer  :: rho_tor(:) => null()     ! /coreimpur/rho_tor - Toroidal flux coordinate (not normalised, equivalent to rho_tor_norm) [m];  Vector (nrho). Time-dependent.
-  character(len=132), dimension(:), pointer ::source => null()       ! /coreimpur/source - Source of the profile (any comment describing the origin of the impurity profiles : code, path to diagnostic signals, massaging, .
-  integer,pointer  :: flag(:) => null()      ! /coreimpur/flag - Flag describing how the profile has been processed : 0-not calculated; 1-interpretative; 2-calculated by the transport solver; 3-c
-  type (type_desc_impur) :: desc_impur  ! /coreimpur/desc_impur - Description of the impurities and their charge states
-  real(DP),pointer  :: z(:,:,:) => null()     ! /coreimpur/z - Impurity ionisation state (averaged for bundle); Time-dependent; Array3D (nrho,nimp,max_nzimp)
-  real(DP),pointer  :: zsq(:,:,:) => null()     ! /coreimpur/zsq - Z^2, Square of impurity ionisation state (averaged for bundle); Time-dependent; Array3D (nrho,nimp,max_nzimp)
-  real(DP),pointer  :: nz(:,:,:) => null()     ! /coreimpur/nz - Density of impurity in a given charge state [m^-3]. Time-dependent; Array3D (nrho,nimp,max_nzimp)
-   type (type_sourceimp)  :: source_term  ! /coreimpur/source_term - Source term for each charge state. Time-dependent.
-   type (type_boundaryimp)  :: boundary  ! /coreimpur/boundary - Boundary condition for each charge state. Time-dependent
-   type (type_coretransimp)  :: transp_coef  ! /coreimpur/transp_coef - Transport coefficients for each charge state
-   type (type_fluximp)  :: flux  ! /coreimpur/flux - Fluxes of impurity particles, two definitions [m^-2.s^-1]. Time-dependent.
-  real(DP),pointer  :: time_deriv(:,:,:) => null()     ! /coreimpur/time_deriv - Integral of the time derivative term of the transport equation. Time-dependent. Array3D (nrho,nimp,max_nzimp)
-  character(len=132), dimension(:), pointer ::atomic_data => null()       ! /coreimpur/atomic_data - Reference for the atomic data used for each impurity. Array of strings (nimp)
-  real(DP)  :: time=-9.0D40       ! /coreimpur/time - Time [s]; Time-dependent; Scalar.
-  type (type_codeparam) :: codeparam  ! /coreimpur/codeparam - 
-endtype
-
-! ***********  Include coreneutrals.xsd
-type type_atomlist  !    
-  real(DP),pointer  :: amn(:) => null()     ! /atomlist/amn - Atomic mass number; Vector (natm)
-  real(DP),pointer  :: zn(:) => null()     ! /atomlist/zn - Nuclear charge; Vector (natm)
-endtype
-
-type type_neutrallist  !    
-  integer,pointer  :: ncomp(:) => null()      ! /neutrallist/ncomp - For each neutral species, number of distinct atoms that enter the composition of this species (1 if the neutral is an atom, more f
-  integer,pointer  :: tatm(:,:) => null()     ! /neutrallist/tatm - For each neutral species, and each of its atomic component, index of the atom (referring to the atomlist). Matrix of integers (nne
-  integer,pointer  :: multatm(:,:) => null()     ! /neutrallist/multatm - For each neutral species, and each of its atomic component, number of such atoms. Matrix of integers (nneut,max_ncomp)
-endtype
-
-type type_typelist  !    
-  integer,pointer  :: ntype(:) => null()      ! /typelist/ntype - For each neutral species, number of possible types considered (in terms of energy : cold, thermal, fast, NBI, ...). Vector of inte
-  integer,pointer  :: type(:,:) => null()     ! /typelist/type - Type of neutral, in terms of energy : 0=cold, 1=thermal, 2= fast, 3=NBI. Matrix of integers (nneut,max_ntype)
-endtype
-
-type type_boundary_neutrals  !    Structure for the boundary condition of core transport equations (neutrals). Time-dependent;
-  real(DP),pointer  :: value(:,:,:) => null()     ! /value - Value of the boundary condition. Unit depends on type, respectively [1-field, 2-field.m^-1, 3-m, 4-field.s^-1]. For type 1 to 4, o
-  integer,pointer  :: type(:,:) => null()     ! /type - Type of the boundary condition for the transport solver. 0- equation not solved; 1- value of the field y; 2-radial derivative of t
-  integer,pointer  :: rho_tor(:,:) => null()     ! /rho_tor - Position of the boundary condition (in terms of toroidal flux coordinate) for the transport solver [m]. Outside this boundary, the
-endtype
-
-type type_corefieldneutral  !    Structure for a main field of core neutral transport equations; Time-dependent;
-  real(DP),pointer  :: value(:,:,:) => null()     ! /value - Signal value; Array3D(nrho,nneut,max_ntype). Time-dependent
-  real(DP),pointer  :: flux(:,:,:) => null()     ! /flux - Net neutral flux through the magnetic surface, positive values correspond to the direction from the center to the edge [s^-1]. Arr
-   type (type_boundary_neutrals)  :: boundary  ! /boundary - Boundary condition for the transport equation. Time-dependent.
-endtype
-
-type type_corefieldneutrale  !    Structure for a main field of core neutral transport equations, (Temperature, with flux as energy); Time-dependent;
-  real(DP),pointer  :: value(:,:,:) => null()     ! /value - Signal value; Array3D(nrho,nneut,max_ntype). Time-dependent
-  real(DP),pointer  :: flux(:,:,:) => null()     ! /flux - Net flux of the kinetic energy through the magnetic surface (3/2*E*n*V), positive values correspond to the direction from the cent
-   type (type_boundary_neutrals)  :: boundary  ! /boundary - Boundary condition for the transport equation. Time-dependent.
-endtype
-
-type type_corefieldneutralv  !    Structure for a main field of core neutral transport equations (without flux variable); Time-dependent;
-  real(DP),pointer  :: value(:,:,:) => null()     ! /value - Signal value; Array3D(nrho,nneut,max_ntype)Time-dependent; 
-   type (type_boundary_neutrals)  :: boundary  ! /boundary - Boundary condition for the transport equation. Time-dependent.
-endtype
-
-type type_corefieldneutralv0  !    Neutral velocity
-   type (type_corefieldneutralv)  :: toroidal  ! /toroidal - Neutral velocity in the toroidal direction [m.s^-1]. Positive is anti-clockwise when viewed from above. Time-dependent;
-   type (type_corefieldneutralv)  :: poloidal  ! /poloidal - Velocity of neutrals in the poloidal direction. 0 is directed towards low field side, pi is towards high field side. Positive is a
-   type (type_corefieldneutralv)  :: radial  ! /radial - Neutral velocity in the radial direction (perpendicular to the magnetic surface), positive is from the centre to the edge [m.s^-1]
-endtype
-
-type type_recycling_neutrals  !    Recycling coefficients
-  real(DP),pointer  :: particles(:,:) => null()     ! /particles - Particle recycling coefficient corresponding to the conversion of ion type IION to the neutral type INEUT. Matrix(nneut,nion). Tim
-  real(DP),pointer  :: energy(:,:) => null()     ! /energy - Energy recycling coefficient corresponding to the conversion of ion type IION to the neutral type INEUT. Matrix(nneut,nion). Time-
-endtype
-
-type type_sputtering_neutrals  !    Sputtering coefficients
-  real(DP),pointer  :: physical(:,:) => null()     ! /physical - Effective coefficient of physical sputtering of the neutral type INEUT due to ion type IION. Matrix(nneut,nion). Time-dependent.
-  real(DP),pointer  :: chemical(:,:) => null()     ! /chemical - Effective coefficient of chemical sputtering of the neutral type INEUT due to ion type IION. Matrix(nneut,nion). Time-dependent.
-endtype
-
-type type_composition_neutrals  !    Description of neutrals species
-  type (type_atomlist) :: atomlist  ! /atomlist - List of the atoms that enter the composition of the neutral species
-  type (type_neutrallist) :: neutrallist  ! /neutrallist - Definition of neutral species
-  type (type_typelist) :: typelist  ! /typelist - Definition of types for each neutral species
-endtype
-
-type type_coefficients_neutrals  !    Recycling and sputtering coefficients used by the neutral solver. The nion index refers to the various ions (and charge states) co
-   type (type_recycling_neutrals)  :: recycling  ! /recycling - Recycling coefficients
-   type (type_sputtering_neutrals)  :: sputtering  ! /sputtering - Sputtering coefficients
-endtype
-
-type type_profiles_neutrals  !    Profiles derived from the fields solved in the transport equations, or from experiment.
-   type (type_corefieldneutral)  :: n0  ! /n0 - Neutral density [m^-3].  Time-dependent;
-   type (type_corefieldneutrale)  :: t0  ! /t0 - Neutral temperature [eV]. Time-dependent;
-   type (type_corefieldneutralv0)  :: v0  ! /v0 - Neutral velocity
-  real(DP),pointer  :: prad0(:,:) => null()     ! /prad0 - Power radiated by neutrals [W.m^-3]. Matrix (nrho,nneut). Time-dependent.
-endtype
-
-type type_coreneutrals  !    
-  type (type_datainfo) :: datainfo  ! /coreneutrals/datainfo - 
-  real(DP),pointer  :: rho_tor(:) => null()     ! /coreneutrals/rho_tor - Toroidal flux coordinate (not normalised, equivalent to rho_tor_norm) [m];  Vector (nrho). Time-dependent.
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /coreneutrals/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-   type (type_composition_neutrals)  :: composition  ! /coreneutrals/composition - Description of neutrals species
-   type (type_profiles_neutrals)  :: profiles  ! /coreneutrals/profiles - Profiles derived from the fields solved in the transport equations, or from experiment.
-   type (type_coefficients_neutrals)  :: coefficients  ! /coreneutrals/coefficients - Recycling and sputtering coefficients used by the neutral solver. The nion index refers to the various ions (and charge states) co
-  type (type_codeparam) :: codeparam  ! /coreneutrals/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /coreneutrals/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include coreprof.xsd
-type type_sourceel  !    Structure for the total source term for the transport equation (electrons). Time-dependent;
-  real(DP),pointer  :: value(:) => null()     ! /value - Value of the source term; Time-dependent; Vector (nrho)
-  real(DP),pointer  :: integral(:) => null()     ! /integral - Integral from 0 to rho of the source term. Time-dependent; Vector (nrho)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Strin
-endtype
-
-type type_sourceion  !    Structure for the total source term for the transport equation (ions). Time-dependent;
-  real(DP),pointer  :: value(:,:) => null()     ! /value - Value of the source term; Time-dependent; Matrix (nrho,nion)
-  real(DP),pointer  :: integral(:,:) => null()     ! /integral - Integral from 0 to rho of the source term. Time-dependent; Matrix (nrho,nion)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Array
-endtype
-
-type type_coretransel  !    Structure for the transport coefficients for the transport equation (electrons). Time-dependent;
-  real(DP),pointer  :: diff(:) => null()     ! /diff - Diffusion coefficient [m^2.s^-1]. Time-dependent; Vector (nrho)
-  real(DP),pointer  :: vconv(:) => null()     ! /vconv - Convection coefficient [m.s^-1]. Time-dependent; Vector (nrho)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Strin
-endtype
-
-type type_coretransion  !    Structure for the transport coefficients for the transport equation (ions). Time-dependent;
-  real(DP),pointer  :: diff(:,:) => null()     ! /diff - Diffusion coefficient [m^2.s^-1]. Time-dependent; Matrix (nrho,nion)
-  real(DP),pointer  :: vconv(:,:) => null()     ! /vconv - Convection coefficient [m.s^-1]. Time-dependent; Matrix (nrho,nion)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Array
-endtype
-
-type type_fluxel  !    Structure for the fluxes of a field of the core transport equations (electrons); Time-dependent;
-  real(DP),pointer  :: flux_dv(:) => null()     ! /flux_dv - Flux of the field calculated from the transport coefficients. Time-dependent; Vector (nrho)
-  real(DP),pointer  :: flux_interp(:) => null()     ! /flux_interp - Interpretative flux deduced from measured data, the integral of the source term, and the time derivative of the field. Time-depend
-endtype
-
-type type_fluxion  !    Structure for the fluxes of a field of the core transport equations (ions); Time-dependent;
-  real(DP),pointer  :: flux_dv(:,:) => null()     ! /flux_dv - Flux of the field calculated from the transport coefficients. Time-dependent; Matrix (nrho,nion)
-  real(DP),pointer  :: flux_interp(:,:) => null()     ! /flux_interp - Interpretative flux deduced from measured data, the integral of the source term, and the time derivative of the field. Time-depend
-endtype
-
-type type_corefield  !    Structure for a main field of core transport equations; Time-dependent;
-  real(DP),pointer  :: value(:) => null()     ! /value - Signal value; Time-dependent; Vector (nrho)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Strin
-  integer  :: flag=-999999999       ! /flag - Flag describing how the profile has been processed : 0-not calculated 1-interpretative; 2-calculated by the transport solver; 3-ca
-   type (type_boundaryel)  :: boundary  ! /boundary - Boundary condition for the transport equation. Time-dependent.
-   type (type_sourceel)  :: source_term  ! /source_term - Total source term for the transport equation. Time-dependent.
-   type (type_coretransel)  :: transp_coef  ! /transp_coef - Total transport coefficients. Time-dependent.
-   type (type_fluxel)  :: flux  ! /flux - Fluxes of the quantity, two definitions. Time-dependent.
-  real(DP),pointer  :: time_deriv(:) => null()     ! /time_deriv - Integral of the time derivative term of the transport equation. Time-dependent. Vector (nrho)
-  type (type_codeparam) :: codeparam  ! /codeparam - 
-endtype
-
-type type_corefieldion  !    Structure for an ion field of core transport equations; Time-dependent;
-  real(DP),pointer  :: value(:,:) => null()     ! /value - Signal value; Time-dependent; Vector (nrho,nion)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Array
-  integer,pointer  :: flag(:) => null()      ! /flag - Flag describing how the profile has been processed : 0-not calculated 1-interpretative; 2-calculated by the transport solver; 3-ca
-   type (type_boundaryion)  :: boundary  ! /boundary - Boundary condition for the transport equation
-   type (type_sourceion)  :: source_term  ! /source_term - Total source term for the transport equation. Time-dependent.
-   type (type_coretransion)  :: transp_coef  ! /transp_coef - Total transport coefficients. Time-dependent.
-   type (type_fluxion)  :: flux  ! /flux - Fluxes of the quantity, two definitions. Time-dependent.
-  real(DP),pointer  :: time_deriv(:,:) => null()     ! /time_deriv - Integral of the time derivative term of the transport equation. Time-dependent. Matrix (nrho,nion)
-  type (type_codeparam) :: codeparam  ! /codeparam - 
-endtype
-
-type type_coreprofile  !    Structure for core plasma profile; Time-dependent
-  real(DP),pointer  :: value(:) => null()     ! /value - Signal value; Time-dependent; Vector (nrho)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Strin
-endtype
-
-type type_coreprofion  !    Structure for core plasma ion profile; Time-dependent
-  real(DP),pointer  :: value(:,:) => null()     ! /value - Signal value; Time-dependent; Vector (nrho,nion)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Array
-endtype
-
-type type_boundary  !    
-  real(DP),pointer  :: value(:) => null()     ! /coreprof/psi/boundary/value - Value of the boundary condition (in case flag = 2). Unit depends on type, respectively [1-Wb, 2-A, 3-V]. For type 1 to 3, only the
-  character(len=132), dimension(:), pointer ::source => null()       ! /coreprof/psi/boundary/source - Source of the boundary condition (any comment describing its origin : code, path to diagnostic signals, massaging); String
-  integer  :: type=-999999999       ! /coreprof/psi/boundary/type - Type of the boundary condition for the transport solver (in case flag = 2).     0- equation not solved; 1- edge value of poloidal 
-  real(DP)  :: rho=-9.0D40       ! /coreprof/psi/boundary/rho - Position of the boundary condition (in terms of toroidal flux coordinate) for the transport solver [m].  Outside this boundary, th
-  type (type_codeparam) :: codeparam  ! /coreprof/psi/boundary/codeparam - 
-endtype
-
-type type_jni  !    
-  real(DP),pointer  :: value(:) => null()     ! /coreprof/psi/jni/value - Value of jni; Time-dependent; Vector (nrho)
-  real(DP),pointer  :: integral(:) => null()     ! /coreprof/psi/jni/integral - Integral from 0 to rho of jni. Time-dependent; Vector (nrho)
-  character(len=132), dimension(:), pointer ::source => null()       ! /coreprof/psi/jni/source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Strin
-endtype
-
-type type_toroid_field  !    
-  real(DP)  :: b0=-9.0D40       ! /coreprof/toroid_field/b0 - Vacuum field at r0 [T]; Time-dependent. Scalar.
-  real(DP)  :: b0prime=-9.0D40       ! /coreprof/toroid_field/b0prime - Time derivative of the vacuum field at r0 [T/s]; Time-dependent. Scalar.
-  real(DP)  :: r0=-9.0D40       ! /coreprof/toroid_field/r0 - Characteristic major radius of the device (used in publications, usually middle of the vessel at the equatorial midplane) [m]. Sca
-  real(DP)  :: time=-9.0D40       ! /coreprof/toroid_field/time - Time [s] (exact time slice used from the time array of the source signal, here the toroidfield CPO. If the time slice does not exi
-endtype
-
-type type_psi  !    
-  real(DP),pointer  :: value(:) => null()     ! /coreprof/psi/value - Signal value [Wb]; Time-dependent; Vector (nrho)
-  character(len=132), dimension(:), pointer ::source => null()       ! /coreprof/psi/source - Source of the profile (any comment describing the origin of the profile : code, path to diagnostic signals, massaging, ...); Strin
-  integer  :: flag=-999999999       ! /coreprof/psi/flag - Flag describing how the profile has been processed : 0-not calculated; 1-interpretative; 2-calculated by the transport solver; 3-c
-  type (type_boundary) :: boundary  ! /coreprof/psi/boundary - Boundary condition for the transport equation. Time-dependent.
-  type (type_jni) :: jni  ! /coreprof/psi/jni - Non-inductive parallel current density [A/m^2]; Time-dependent;
-   type (type_coreprofile)  :: sigma_par  ! /coreprof/psi/sigma_par - Parallel conductivity [ohm^-1.m^-1]. Time-dependent
-  type (type_codeparam) :: codeparam  ! /coreprof/psi/codeparam - 
-endtype
-
-type type_profiles1d  !    
-   type (type_coreprofile)  :: pe  ! /coreprof/profiles1d/pe - Electron pressure [Pa]; Time-dependent;
-   type (type_coreprofion)  :: pi  ! /coreprof/profiles1d/pi - Ion pressure [Pa]; Time-dependent;
-   type (type_coreprofile)  :: pr_th  ! /coreprof/profiles1d/pr_th - Thermal pressure (electrons+ions) [Pa]; Time-dependent;
-   type (type_coreprofile)  :: pr_perp  ! /coreprof/profiles1d/pr_perp - Total perpendicular pressure (electrons+ions, thermal+non-thermal) [Pa]; Time-dependent;
-   type (type_coreprofile)  :: pr_parallel  ! /coreprof/profiles1d/pr_parallel - Total parallel pressure (electrons+ions, thermal+non-thermal) [Pa]; Time-dependent;
-   type (type_coreprofile)  :: jtot  ! /coreprof/profiles1d/jtot - total parallel current density = average(jtot.B) / B0, where B0 = coreprof/toroid_field/b0 [A/m^2]; Time-dependent;
-   type (type_coreprofile)  :: jni  ! /coreprof/profiles1d/jni - non-inductive parallel current density = average(jni.B) / B0, where B0 = coreprof/toroid_field/b0 [A/m^2]; Time-dependent;
-   type (type_coreprofile)  :: joh  ! /coreprof/profiles1d/joh - ohmic parallel current density = average(joh.B) / B0, where B0 = coreprof/toroid_field/b0 [A/m^2]; Time-dependent;
-   type (type_coreprofile)  :: vloop  ! /coreprof/profiles1d/vloop - Toroidal loop voltage [V].  Time-dependent.
-   type (type_coreprofile)  :: sigmapar  ! /coreprof/profiles1d/sigmapar - Parallel conductivity [ohm^-1.m^-1].  Time-dependent. 
-   type (type_coreprofile)  :: qoh  ! /coreprof/profiles1d/qoh - ohmic heating [W/m^3]; Time-dependent;
-   type (type_coreprofile)  :: eparallel  ! /coreprof/profiles1d/eparallel - Parallel electric field = average(E.B) / B0, where B0 = coreprof/toroid_field/b0 [V.m^-1].  Time-dependent. 
-   type (type_coreprofile)  :: e_b  ! /coreprof/profiles1d/e_b - Average(E.B) [V.T.m^-1].  Time-dependent. 
-   type (type_coreprofile)  :: q  ! /coreprof/profiles1d/q - Safety factor profile; Time-dependent;
-   type (type_coreprofile)  :: shear  ! /coreprof/profiles1d/shear - Magnetic shear profile; Time-dependent;
-   type (type_coreprofion)  :: ns  ! /coreprof/profiles1d/ns - Density of fast ions, for the various ion species [m^-3]; Time-dependent;
-   type (type_coreprofion)  :: mtor  ! /coreprof/profiles1d/mtor - Toroidal momentum of the various ion species [UNITS?]; Time-dependent;
-   type (type_coreprofion)  :: wtor  ! /coreprof/profiles1d/wtor - Angular toroidal rotation frequency of the various ion species [s^-1]; Time-dependent;
-   type (type_coreprofile)  :: zeff  ! /coreprof/profiles1d/zeff - Effective charge profile; Time-dependent;
-endtype
-
-type type_globalparam  !    
-  real(DP)  :: current_tot=-9.0D40       ! /coreprof/globalparam/current_tot - Total plasma current [A]; Time-dependent; Scalar
-  real(DP)  :: current_bnd=-9.0D40       ! /coreprof/globalparam/current_bnd - Plasma current inside transport solver boundary rho_tor_bnd [A]; Time-dependent; Scalar
-  real(DP)  :: vloop=-9.0D40       ! /coreprof/globalparam/vloop - Toroidal loop voltage [V]; Time-dependent; Scalar
-  real(DP)  :: li=-9.0D40       ! /coreprof/globalparam/li - Internal inductance; Time-dependent; Scalar
-endtype
-
-type type_coreprof  !    
-  type (type_datainfo) :: datainfo  ! /coreprof/datainfo - 
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /coreprof/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-  real(DP),pointer  :: rho_tor(:) => null()     ! /coreprof/rho_tor - Toroidal flux coordinate (not normalised, equivalent to rho_tor_norm) [m];  Vector (nrho). Time-dependent.
-  real(DP),pointer  :: drho_dt(:) => null()     ! /coreprof/drho_dt - Time derivative of rho_tor  [m/s];  Vector (nrho). Time-dependent.
-  type (type_toroid_field) :: toroid_field  ! /coreprof/toroid_field - Toroidal field information  entering the definition of rho_tor, for reference only. The physical value of the toroidal field shoul
-  type (type_composition) :: composition  ! /coreprof/composition - 
-  type (type_psi) :: psi  ! /coreprof/psi - Poloidal magnetic flux [Wb]; Time-dependent;
-   type (type_corefield)  :: te  ! /coreprof/te - Electron temperature [eV]; (source term in [W.m^-3]). Time-dependent;
-   type (type_corefieldion)  :: ti  ! /coreprof/ti - Ion temperature [eV]; (source term in [W.m^-3]). Time-dependent;
-   type (type_corefield)  :: ne  ! /coreprof/ne - Electron density [m^-3]; (source term in [m^-3]).Time-dependent;
-   type (type_corefieldion)  :: ni  ! /coreprof/ni - Ion density [m^-3]; (source term in [m^-3]). Time-dependent;
-   type (type_corefieldion)  :: vtor  ! /coreprof/vtor - Toroidal velocity of the various ion species [m.s^-1]; Time-dependent;
-  type (type_profiles1d) :: profiles1d  ! /coreprof/profiles1d - Profiles derived from the fields solved in the transport equations, or from experiment.
-  type (type_globalparam) :: globalparam  ! /coreprof/globalparam - Various global quantities calculated from the 1D profiles. Time-dependent
-  type (type_codeparam) :: codeparam  ! /coreprof/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /coreprof/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include coresource.xsd
-type type_coresource  !    
-  type (type_datainfo) :: datainfo  ! /coresource/datainfo - 
-  real(DP),pointer  :: rho_tor(:) => null()     ! /coresource/rho_tor - Toroidal flux coordinate (not normalised, equivalent to rho_tor_norm) [m];  Vector (nrho). Time-dependent.
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /coresource/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-  type (type_composition) :: composition  ! /coresource/composition - 
-   type (type_b0r0)  :: toroid_field  ! /coresource/toroid_field - Characteristics of the vacuum toroidal field, redundant with the toroidfield CPO, to document the normalisation of j in this CPO.
-  real(DP),pointer  :: j(:) => null()     ! /coresource/j - Parallel current source for psi transport equation, = average(j.B) / B0, where B0  = coresource/toroid_field/b0 [A.m^-2]. Vector(n
-  real(DP),pointer  :: sigma(:) => null()     ! /coresource/sigma - Induced parallel conductivity [ohm^-1.m^-1]. EXACT DEFINITION PENDING. Vector(nrho). Time-dependent.
-   type (type_source_ion)  :: si  ! /coresource/si - Particle source for ion density transport equation [m^-3.s^-1]. Time-dependent.
-   type (type_source_el)  :: se  ! /coresource/se - Particle source for electron density transport equation [m^-3.s^-1]. Time-dependent.
-   type (type_source_imp)  :: sz  ! /coresource/sz - Particle source for impurity density transport equation [m^-3.s^-1]. Time-dependent.
-   type (type_source_ion)  :: qi  ! /coresource/qi - Heat source for ion heat transport equations [W.m^-3]. Time-dependent.
-   type (type_source_el)  :: qe  ! /coresource/qe - Heat source for electron heat transport equation [W.m^-3]. Time-dependent.
-   type (type_source_imp)  :: qz  ! /coresource/qz - Heat source for impurity heat transport equations [W.m^-3].  Time-dependent.
-   type (type_source_ion)  :: ui  ! /coresource/ui - Velocity source for toroidal velocity transport equation [kg.m^-1.s^-2]. Vector(nrho). Time-dependent.
-  type (type_codeparam) :: codeparam  ! /coresource/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /coresource/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include coretransp.xsd
-type type_ni_transp  !    
-  real(DP),pointer  :: diff_eff(:,:,:) => null()     ! /coretransp/ni_transp/diff_eff - Effective diffusivity [m^2.s^-1]. The last index of the array describes which multiplier should be applied to the particule flux w
-  real(DP),pointer  :: vconv_eff(:,:,:) => null()     ! /coretransp/ni_transp/vconv_eff - Effective convection [m.s^-1]. The last index of the array describes which multiplier should be applied to the particule flux when
-  real(DP),pointer  :: flux(:,:) => null()     ! /coretransp/ni_transp/flux - Flux. Not used in transport equations [field.m.s^-1,.m^-3 if field is not a density itself]. Time-dependent. Matrix (nrho,nion)
-   type (type_offdiagion)  :: off_diagonal  ! /coretransp/ni_transp/off_diagonal - Details of the transport matrix, just for diagnostic (not used in transport equations). Time-dependent.
-  integer  :: flag=-999999999       ! /coretransp/ni_transp/flag - Flag describing the form of transport produced by the original model : 0- not calculated, 1- D and V, 2- flux, 3- full transport m
-endtype
-
-type type_ne_transp  !    
-  real(DP),pointer  :: diff_eff(:,:) => null()     ! /coretransp/ne_transp/diff_eff - Effective diffusivity [m^2.s^-1]. The last index of the array describes which multiplier should be applied to the particule flux w
-  real(DP),pointer  :: vconv_eff(:,:) => null()     ! /coretransp/ne_transp/vconv_eff - Effective convection [m.s^-1]. The last index of the array describes which multiplier should be applied to the particule flux when
-  real(DP),pointer  :: flux(:) => null()     ! /coretransp/ne_transp/flux - Flux. Not used in transport equations [field.m.s^-1,.m^-3 if field is not a density itself]. Time-dependent. Vector (nrho)
-   type (type_offdiagel)  :: off_diagonal  ! /coretransp/ne_transp/off_diagonal - Details of the transport matrix, just for diagnostic (not used in transport equations). Time-dependent.
-  integer  :: flag=-999999999       ! /coretransp/ne_transp/flag - Flag describing the form of transport produced by the original model : 0- not calculated, 1- D and V, 2- flux, 3- full transport m
-endtype
-
-type type_coretransp  !    
-  type (type_datainfo) :: datainfo  ! /coretransp/datainfo - 
-  type (type_composition) :: composition  ! /coretransp/composition - 
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /coretransp/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-  real(DP),pointer  :: rho_tor(:) => null()     ! /coretransp/rho_tor - Toroidal flux coordinate (not normalised, equivalent to rho_tor_norm) [m];  Vector (nrho). Time-dependent.
-  real(DP),pointer  :: sigma(:) => null()     ! /coretransp/sigma - Parallel conductivity [ohm^-1.m^-1]. Time-dependent. Vector(nrho).
-  type (type_ni_transp) :: ni_transp  ! /coretransp/ni_transp - Transport coefficients for ion density equation. Time-dependent.
-  type (type_ne_transp) :: ne_transp  ! /coretransp/ne_transp - Transport coefficients for electron density equation. Time-dependent.
-   type (type_transcoefimp)  :: nz_transp  ! /coretransp/nz_transp - Transport coefficients for impurity (multiple charge state) density equation. Time-dependent.
-   type (type_transcoefion)  :: ti_transp  ! /coretransp/ti_transp - Transport coefficients for ion temperature equation. Time-dependent.
-   type (type_transcoefel)  :: te_transp  ! /coretransp/te_transp - Transport coefficients for electron temperature equation. Time-dependent.
-   type (type_transcoefimp)  :: tz_transp  ! /coretransp/tz_transp - Transport coefficients for impurity  (multiple charge state) temperature equation. Time-dependent.
-   type (type_transcoefvtor)  :: vtor_transp  ! /coretransp/vtor_transp - Transport coefficients for toroidal velocity equation. Time-dependent.
-  type (type_codeparam) :: codeparam  ! /coretransp/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /coretransp/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include eqcoord_sys.xsd
-type type_coord_sys  !    
-  character(len=132), dimension(:), pointer ::grid_type => null()       ! /coord_sys/grid_type - Type of coordinate system
-   type (type_reggrid)  :: grid  ! /coord_sys/grid - Regular grid definition; Time-dependent
-  real(DP),pointer  :: jacobian(:,:) => null()     ! /coord_sys/jacobian - Jacobian of the coordinate system; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: g_11(:,:) => null()     ! /coord_sys/g_11 - metric coefficients g_11; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: g_12(:,:) => null()     ! /coord_sys/g_12 - metric coefficients g_12; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: g_13(:,:) => null()     ! /coord_sys/g_13 - metric coefficients g_13; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: g_22(:,:) => null()     ! /coord_sys/g_22 - metric coefficients g_22; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: g_23(:,:) => null()     ! /coord_sys/g_23 - metric coefficients g_23; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: g_33(:,:) => null()     ! /coord_sys/g_33 - metric coefficients g_33; Time-dependent; Matrix (ndim1, ndim2)
-   type (type_rz2D)  :: position  ! /coord_sys/position - R and Z position of grid points; Time-dependent; Matrix (ndim1, ndim2)
-endtype
-
-! ***********  Include eqconstraint.xsd
-type type_eqmes0D  !    Structure for equilibrium measurement 0D signal
-  real(DP)  :: measured=-9.0D40       ! /measured - Measured value of the signal; Time-dependent; Scalar.
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Path to the source signal (diagnostic or genprof, from which to read all info on the signal); String
-  real(DP)  :: time=-9.0D40       ! /time - Time (exact time slice used from the time array of the source signal. If the time slice does not exist in the time array of the so
-  integer  :: exact=-999999999       ! /exact - 1 means exact data, is not fitted; 0 means the equilibrium code does a least square fit; scalar integer
-  real(DP)  :: weight=-9.0D40       ! /weight - weight given to the measurement (>= 0); Time-dependent; Scalar.
-  real(DP)  :: sigma=-9.0D40       ! /sigma - standard deviation of the measurement; Time-dependent; Scalar.
-  real(DP)  :: calculated=-9.0D40       ! /calculated - Signal as recalculated by the equilibrium code; Time-dependent; Scalar.
-  real(DP)  :: chi2=-9.0D40       ! /chi2 - chi^2 of (calculated-measured); Time-dependent; Scalar.
-endtype
-
-type type_eqmes1D  !    Structure for equilibrium measurement 1D signal
-  real(DP),pointer  :: measured(:) => null()     ! /measured - Measured value of the signal; Time-dependent; Array(nmeas)
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Path to the source signal (diagnostic or genprof, from which to read all info on the signal), e.g. 'magdiag/bpol_probes/measure/va
-  real(DP)  :: time=-9.0D40       ! /time - Exact time slice used from the time array of the source signal. If the time slice does not exist in the time array of the source s
-  integer,pointer  :: exact(:) => null()      ! /exact - 1 means exact data, is not fitted; 0 means the equilibrium code does a least square fit; Time-dependent; Array(nmeas)
-  real(DP),pointer  :: weight(:) => null()     ! /weight - weight given to the measurement (>= 0); Time-dependent; Array(nmeas)
-  real(DP),pointer  :: sigma(:) => null()     ! /sigma - standard deviation of the measurement; Time-dependent; Array(nmeas)
-  real(DP),pointer  :: calculated(:) => null()     ! /calculated - Signal as recalculated by the equilibrium code; Time-dependent; Array(nmeas)
-  real(DP),pointer  :: chi2(:) => null()     ! /chi2 - chi^2 of (calculated-measured); Time-dependent; Array(nmeas)
-endtype
-
-type type_isoflux  !    
-   type (type_rz1D)  :: position  ! /eqconstraint/isoflux/position - Position of the points at which the flux is considered the same; Time-dependent; Vector (nmeas)
-  character(len=132), dimension(:), pointer ::source => null()       ! /eqconstraint/isoflux/source - Description or path to the source signal (diagnostic or genprof, from which to read all info on the signal), e.g. 'magdiag/bpol_pr
-  real(DP),pointer  :: weight(:) => null()     ! /eqconstraint/isoflux/weight - weight given to the measurement (>= 0); -1 if exact data; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: sigma(:) => null()     ! /eqconstraint/isoflux/sigma - standard deviation of the measurement; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: calculated(:) => null()     ! /eqconstraint/isoflux/calculated - Signal as recalculated by the equilibrium code; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: chi2(:) => null()     ! /eqconstraint/isoflux/chi2 - chi^2 of (calculated-measured); Time-dependent; Vector (nmeas)
-endtype
-
-type type_magnet_iron  !    
-   type (type_eqmes1D)  :: mr  ! /eqconstraint/magnet_iron/mr - Magnetisation along the R axis [T];
-   type (type_eqmes1D)  :: mz  ! /eqconstraint/magnet_iron/mz - Magnetisation along the Z axis [T];
-endtype
-
-type type_q  !    
-  real(DP),pointer  :: qvalue(:) => null()     ! /eqconstraint/q/qvalue - Safety factor values; Time-dependent; Vector (nmeas)
-   type (type_rz1D)  :: position  ! /eqconstraint/q/position - Major radius of the given safety factor values [m]; Time-dependent; Vector (nmeas)
-  character(len=132), dimension(:), pointer ::source => null()       ! /eqconstraint/q/source - Description or path to the source signal (diagnostic or genprof, from which to read all info on the signal), e.g. 'magdiag/bpol_pr
-  integer  :: exact=-999999999       ! /eqconstraint/q/exact - 1 means exact data, is not fitted; 0 means the equilibrium code does a least square fit; scalar integer
-  real(DP),pointer  :: weight(:) => null()     ! /eqconstraint/q/weight - weight given to the measurement (>= 0); Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: sigma(:) => null()     ! /eqconstraint/q/sigma - standard deviation of the measurement; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: calculated(:) => null()     ! /eqconstraint/q/calculated - Signal as recalculated by the equilibrium code; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: chi2(:) => null()     ! /eqconstraint/q/chi2 - chi^2 of (calculated-measured); Time-dependent; Vector (nmeas)
-endtype
-
-type type_xpts  !    
-   type (type_rz1D)  :: position  ! /eqconstraint/xpts/position - Position of the X-point(s); Time-dependent; Vector (nmeas)
-  character(len=132), dimension(:), pointer ::source => null()       ! /eqconstraint/xpts/source - Description or path to the source signal (diagnostic or genprof, from which to read all info on the signal), e.g. 'magdiag/bpol_pr
-  real(DP),pointer  :: weight(:) => null()     ! /eqconstraint/xpts/weight - weight given to the measurement (>= 0); -1 if exact data; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: sigma(:) => null()     ! /eqconstraint/xpts/sigma - standard deviation of the measurement; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: calculated(:) => null()     ! /eqconstraint/xpts/calculated - Signal as recalculated by the equilibrium code; Time-dependent; Vector (nmeas)
-  real(DP),pointer  :: chi2(:) => null()     ! /eqconstraint/xpts/chi2 - chi^2 of (calculated-measured); Time-dependent; Vector (nmeas)
-endtype
-
-type type_eqconstraint  !    
-   type (type_eqmes1D)  :: bpol  ! /eqconstraint/bpol - poloidal pickup coils [T]
-   type (type_eqmes0D)  :: bvac_r  ! /eqconstraint/bvac_r - Vacuum field times radius in the toroidal field magnet [T.m];
-   type (type_eqmes1D)  :: faraday  ! /eqconstraint/faraday - Faraday rotation angles [rad]
-   type (type_eqmes1D)  :: flux  ! /eqconstraint/flux - Poloidal flux loops [Wb]
-   type (type_eqmes0D)  :: i_plasma  ! /eqconstraint/i_plasma - Plasma current [A];
-  type (type_isoflux) :: isoflux  ! /eqconstraint/isoflux - Point series at which the flux is considered the same
-   type (type_eqmes1D)  :: jsurf  ! /eqconstraint/jsurf - Average of current density on the flux surface [A/m^2]
-  type (type_magnet_iron) :: magnet_iron  ! /eqconstraint/magnet_iron - Magnetisation in iron segments [T]
-   type (type_eqmes1D)  :: mse  ! /eqconstraint/mse - MSE angles [rad]
-   type (type_eqmes1D)  :: ne  ! /eqconstraint/ne - Electron density [m^-3 for local measurement, m^-2 if line integrated]
-   type (type_eqmes1D)  :: pfcurrent  ! /eqconstraint/pfcurrent - Current in poloidal field coils [A]
-   type (type_eqmes1D)  :: pressure  ! /eqconstraint/pressure - Total pressure [Pa]
-  type (type_q) :: q  ! /eqconstraint/q - Safety factor
-  type (type_xpts) :: xpts  ! /eqconstraint/xpts - Position of the X-point(s)
-endtype
-
-! ***********  Include emcalc.xsd
-type type_plasmagrid  !    
-  character(len=132), dimension(:), pointer ::grid_type => null()       ! /emcalc/plasmagrid/grid_type - Selection of one of a set of grid types
-   type (type_reggrid)  :: grid  ! /emcalc/plasmagrid/grid - Regular grid of the plasma area
-  real(DP),pointer  :: dflux_grid(:,:,:) => null()     ! /emcalc/plasmagrid/dflux_grid - Coupling from plasma grid currents to the magdiag flux loops [H]; Array 3D (nloops from magdiag/flux_loops,ndim1,ndim2)
-  real(DP),pointer  :: bpol_grid(:,:,:) => null()     ! /emcalc/plasmagrid/bpol_grid - Coupling from plasma grid currents to the magdiag bpol [T]; Array 3D (nprobes from magdiag/bpol_probes,ndim1,ndim2);  
-  real(DP),pointer  :: pol_grid(:,:,:) => null()     ! /emcalc/plasmagrid/pol_grid - Coupling from plasma grid currents to the poloidal coils [active, passive] [H]; Array 3D (nloops from magdiag/flux_loops,ndim1,ndi
-  real(DP),pointer  :: grid_grid(:,:,:,:) => null()     ! /emcalc/plasmagrid/grid_grid - Coupling from plasma grid currents to the plasma grid currents [H]; Array 4D (ndim1,ndim2,ndim1,ndim2)
-endtype
-
-type type_emcalc  !    
-  type (type_datainfo) :: datainfo  ! /emcalc/datainfo - Title of the block, for display
-  integer,pointer  :: modelnrnz(:) => null()      ! /emcalc/modelnrnz - nR and nZ used to model the poloidal field coils; Vector(2)
-  integer  :: npolcurrents=-999999999       ! /emcalc/npolcurrents - Number of poloidal currents (circuits) = nactive + npassive
-  real(DP),pointer  :: mut_pol_pol(:,:) => null()     ! /emcalc/mut_pol_pol - Mutual inductance matrix between all poloidal circuits in order [active, passive] [H]; Matrix (npol,npol);  
-  real(DP),pointer  :: br_pol_pol(:,:) => null()     ! /emcalc/br_pol_pol - Radial field at poloidal currents due to poloidal currents [T]; Matrix (npol,npol);  
-  real(DP),pointer  :: bz_pol_pol(:,:) => null()     ! /emcalc/bz_pol_pol - Vertical field at poloidal currents due to poloidal currents [T]; Matrix (npol,npol);  
-  real(DP),pointer  :: bpol_pol(:,:) => null()     ! /emcalc/bpol_pol - Field from poloidal currents at the magdiag bpol [T]; Matrix (nprobes from magdiag/bpol_probes,npol);  
-  real(DP),pointer  :: dflux_pol(:,:) => null()     ! /emcalc/dflux_pol - Coupling from poloidal currents to the magdiag flux loops [H]; Matrix(nloops from magdiag/flux_loops,npol)
-  type (type_plasmagrid) :: plasmagrid  ! /emcalc/plasmagrid - Basic plasma grid
-endtype
-
-! ***********  Include flush.xsd
-type type_flush  !    
-  type (type_datainfo) :: datainfo  ! /flush/datainfo - 
-   type (type_rz1D)  :: position  ! /flush/position - Major radius and altitude of the FLUSH grid [m]; Time-dependent; Vectors resp. (nR) and (nZ)
-  real(DP),pointer  :: coef(:,:) => null()     ! /flush/coef - Coefficients of the fit; Time-dependent; Matrix 2D (nR,nZ)
-  type (type_codeparam) :: codeparam  ! /flush/codeparam - 
-endtype
-
-! ***********  Include fp.xsd
-type type_fp_src_snk_vol  !    
-  real(DP),pointer  :: particles(:,:) => null()     ! /particles - Source/sink particles [1/s]; Time-dependedent; Matrix(ndist_spec, npsin)
-  real(DP),pointer  :: power(:,:) => null()     ! /power - Power associated with the source/sink of particles [W]; Time-dependent; Matrix(ndist_spec, npsin)
-  real(DP),pointer  :: torque(:,:) => null()     ! /torque - Torque due to the source/sink of particles [N.m]; Time-dependent; Matrix (ndist_spec, npsin).
-endtype
-
-type type_fp_src_snk_surf  !    
-  real(DP),pointer  :: particlesd(:,:) => null()     ! /particlesd - Source/sink  particles [s^-1 m^-3]; Time-dependedent; Matrix(ndist_spec, npsin)
-  real(DP),pointer  :: powerd(:,:) => null()     ! /powerd - Power density associated with the source/sink of particles [W.m^-3]; Time-dependent; Matrix(ndist_spec, npsin)
-  real(DP),pointer  :: torqued(:,:) => null()     ! /torqued - Torque density due to the source/sink of particles [N.m^-2]; Time-dependent; Matrix(ndist_spec, npsin).
-endtype
-
-type type_fp_src_snk_tot  !    
-  real(DP),pointer  :: particles(:) => null()     ! /particles - Source/sink  particles [1/s]; Time-dependedent; Vector(ndist_spec)
-  real(DP),pointer  :: power(:) => null()     ! /power - Power associated with the source/sink of particles [W]; Time-dependent; Vector(ndist_spec)
-  real(DP),pointer  :: torque(:) => null()     ! /torque - Torque due to the source/sink of particles [N.m]; Time-dependent; Vector (ndist_spec).
-endtype
-
-type type_fp_test_part  !    Distribution given as a set of test particles.
-  real(DP),pointer  :: nvar(:) => null()     ! /nvar - Number of variables associated with a test particle; Vector (ndist_spec)
-  integer,pointer  :: var_id(:,:) => null()     ! /var_id - Identification of a variable; Matrix (ndist_spec, 5)
-  real(DP),pointer  :: var1(:,:) => null()     ! /var1 - Phase space variables one characterising a test particle; Time-dependent; Matrix (ndist_spec, ntpart)
-  real(DP),pointer  :: var2(:,:) => null()     ! /var2 - Phase space variables two characterising a test particle; Time-dependent; Matrix  (ndist_spec, ntpart)
-  real(DP),pointer  :: var3(:,:) => null()     ! /var3 - Phase space variables three characterising a test particle; Time-dependent; Matrix (ndist_spec, ntpart)
-  integer,pointer  :: var4(:,:) => null()     ! /var4 - Phase space variables four characterising a test particle; Time-dependent; Matrix  (ndist_spec, ntpart)
-  integer,pointer  :: var5(:,:) => null()     ! /var5 - Phase space variables five characterising a test particle; Time-dependent; Matrix  (ndist_spec, ntpart)
-  real(DP),pointer  :: weight(:,:) => null()     ! /weight - Weight of a test particle; Time-dependent; Matrix (ndist_spec, ntpart)
-endtype
-
-type type_fp_grid  !    Grid on which the distribution function is calculated.
-  real(DP),pointer  :: dim1(:,:) => null()     ! /dim1 - First dimension in phase space; Time-dependent; Matrix (ndist_spec, max_ndim1).
-  integer,pointer  :: ndim1(:) => null()      ! /ndim1 - Size of the first dimension in phase space, for each species; Vector (ndist_spec).
-  real(DP),pointer  :: dim2(:,:) => null()     ! /dim2 - Second dimension in phase space; Time-dependent; Matrix (ndist_spec, max_ndim2).
-  integer,pointer  :: ndim2(:) => null()      ! /ndim2 - Size of the second dimension in phase space, for each species; Vector (ndist_spec).
-  real(DP),pointer  :: dim3(:,:) => null()     ! /dim3 - Third dimension in phase space; Time-dependent; Matrix (ndist_spec, max_ndim3).
-  integer,pointer  :: ndim3(:) => null()      ! /ndim3 - Size of the third dimension in phase space, for each species; Vector (ndist_spec).
-  real(DP),pointer  :: jacobian(:,:,:,:,:) => null()     ! /jacobian - Jacobian of the transformation of the phase space grid variables; Time-dependent; vector (ndist_spec, max_ndim1, max_ndim2, max_nd
-endtype
-
-type type_fp_ff  !    Orbit averaged (or Bounce averaged) zero order distribution function.
-  integer,pointer  :: grid_type(:) => null()      ! /grid_type - Type of grid. Vector (ndist_spec).
-   type (type_fp_grid)  :: grid  ! /grid - Grid on which the distribution function is calculated.
-  real(DP),pointer  :: value(:,:,:,:) => null()     ! /value - Orbit (or bounce) averaged distribution function given on a grid [1/m^3 (m/s)^-3]; Time-dependent; array(ndist_spec, max_ndim1, ma
-endtype
-
-type type_fp_particle_src  !    Particle source
-   type (type_fp_src_snk_tot)  :: total  ! /total - Total source of particles and power (NBI, fusion products, pellets etc.)
-   type (type_fp_src_snk_vol)  :: volume_intgr  ! /volume_intgr - Volume integrated source of particles and power (NBI, fusion products, pellets etc.)
-   type (type_fp_src_snk_surf)  :: flux_surf_av  ! /flux_surf_av - Flux surface averaged source of particles and power (NBI, fusion products, pellets etc.)
-endtype
-
-type type_fp_wave_src  !    Auxiliary wave absorbed by the distribution species
-  character(len=132), dimension(:), pointer ::type => null()       ! /type - Wave type (LH, EC, IC, ...), can be a concatenation of these if several wave types are absorbed by this species. Vector of strings
-  real(DP),pointer  :: wave_power(:) => null()     ! /wave_power - Auxiliary wave power absorbed by the distribution species [W]; Time-dependent; Vector (ndist_spec).
-  real(DP),pointer  :: wave_powerd(:,:) => null()     ! /wave_powerd - Auxiliary flux surface averaged wave power density absorbed by the distribution species [W/m^3]; Time-dependent; Matrix (ndist_spe
-endtype
-
-type type_fp_input_src  !    Input sources of particles and power for the distribution species (to aid diagnosing the code output).
-   type (type_fp_particle_src)  :: particle_src  ! /particle_src - Particle source
-   type (type_fp_wave_src)  :: wave_src  ! /wave_src - Auxiliary wave absorbed by the distribution species
-endtype
-
-type type_fp_prof_vol_dist_losses  !    Losses of the distribution species.
-   type (type_fp_src_snk_vol)  :: orb_loss  ! /orb_loss - Particle losses.
-   type (type_fp_src_snk_vol)  :: neutr_loss  ! /neutr_loss - Losses due to charge exchange events
-endtype
-
-type type_fp_prof_surf_dist_losses  !    Losses of the distribution species.
-   type (type_fp_src_snk_surf)  :: orb_loss  ! /orb_loss - Particle losses.
-   type (type_fp_src_snk_surf)  :: neutr_loss  ! /neutr_loss - Losses due to charge exchange events
-endtype
-
-type type_fp_prof_surf_nucl_reac_th  !    Nuclear reactions between the cacluated species and oher species assumed to have thermal distributions.
-  real(DP),pointer  :: rated(:,:,:) => null()     ! /rated - Reaction rate [s^-1.m^-3]; Time dependent; Array3d(ndist_spec, nreac_max, npsin)
-  real(DP),pointer  :: powerd(:,:,:) => null()     ! /powerd - Nuclear reaction power density [W.m^-3]; Time dependent; Array3d(ndist_spec, nreac_max, npsin)
-endtype
-
-type type_fp_prof_surf_nucl_reac_sf  !    Nuclear reactions of the calculated species with itself (thermal + non-thermal).
-  real(DP),pointer  :: rate(:,:) => null()     ! /rate - Reaction rate [s^-1.m^-3]; Time-dependent; Matrix (ndist_spec, npsin)
-  real(DP),pointer  :: power(:,:) => null()     ! /power - Fusion reaction power [W.m^-3]; Time-dependent; Matrxi (ndist_spec, npsin)
-endtype
-
-type type_fp_prof_surf_energies  !    Energy densities of a distribution species.
-  real(DP),pointer  :: total(:,:) => null()     ! /total - Energy density of of a distribution species [J/m^3]; Time-dependent; Matrix(ndist_spec, npsin)
-  real(DP),pointer  :: perp(:,:) => null()     ! /perp - Perpendicular energy density of a distribution species [J/m^3] Time-dependent; Matrix(ndist_spec, npsin)
-  real(DP),pointer  :: parallel(:,:) => null()     ! /parallel - Parallel energy densityt of a distribution species [J/m^3] Time-dependent; Matrix(ndist_spec, npsin).
-endtype
-
-type type_fp_nucl_reac_sf  !    Nuclear reactions of the calculated species with itself (thermal + non-thermal).
-  real(DP),pointer  :: rate(:) => null()     ! /rate - Reaction rate [1/s]; Time-dependent; Vector (ndist_spec)
-  real(DP),pointer  :: power(:) => null()     ! /power - Fusion reaction power[W]; Time-dependent; Vector (ndist_spec)
-endtype
-
-type type_fp_prof_surf_dist  !    Quantities related to the calculated distribution function (energy densities, sources, sinks  etc.)
-   type (type_fp_prof_surf_energies)  :: energiesd  ! /energiesd - Energy densities of a distribution species.
-   type (type_fp_prof_surf_dist_losses)  :: lossesd  ! /lossesd - Particle loss densities due to charge exchange events with neutrals.
-   type (type_fp_src_snk_surf)  :: therm_src  ! /therm_src - Flux surface averaged source of particles and power due to particles of the distribution species being thermalised (merging into t
-  real(DP),pointer  :: driven_currd(:,:) => null()     ! /driven_currd - Current density of non-thermal particles of the distribution species (excluding electron back current for fast ions) [A.m^-2]; Tim
-  real(DP),pointer  :: trqd_jrxb(:,:) => null()     ! /trqd_jrxb - Torque density due to radial currents of non-thermal particles of the distribution species [N.m^-2]; Time-dependent; Matrix(ndist_
-   type (type_fp_prof_surf_nucl_reac_th)  :: nucl_reac_th  ! /nucl_reac_th - Nuclear reactions between the cacluated species and oher species assumed to have thermal distributions.
-   type (type_fp_prof_surf_nucl_reac_sf)  :: nucl_reac_sf  ! /nucl_reac_sf - Nuclear reactions of the calculated species with itself (thermal + non-thermal).
-endtype
-
-type type_fp_prof_vol_nucl_reac_sf  !    Nuclear reactions of the calculated species with itself (thermal + non-thermal).
-  real(DP),pointer  :: rate(:,:) => null()     ! /rate - Reaction rate [1/s]; Time-dependent; Matrix (ndist_spec, npsin)
-  real(DP),pointer  :: power(:,:) => null()     ! /power - Fusion reaction power[W]; Time-dependent; Matrxi (ndist_spec, npsin)
-endtype
-
-type type_fp_prof_vol_nucl_reac_th  !    Nuclear reactions between the calculated species and other species assumed to have thermal distributions.
-  real(DP),pointer  :: rate(:,:,:) => null()     ! /rate - Reaction rate [1/s]; Time-dependent; Array3D (ndist_spec, max_nreac, npsin)
-  real(DP),pointer  :: power(:,:,:) => null()     ! /power - Fusion reaction power[W]; Time-dependent; Array3D(ndist_spec, max_nreac,npsin)
-endtype
-
-type type_fp_nucl_reac_th  !    Nuclear reactions between the calculated species and other species assumed to have thermal distributions.
-  real(DP),pointer  :: rate(:,:) => null()     ! /rate - Reaction rate [1/s]; Time-dependent; Matrix (ndist_spec, max_nreac)
-  real(DP),pointer  :: power(:,:) => null()     ! /power - Fusion reaction power[W]; Time-dependent; Matrix(ndist_spec, max_nreac)
-endtype
-
-type type_fp_glob_dist_losses  !    Losses of the distribution species (orbit losses and neutralisation losses).
-   type (type_fp_src_snk_tot)  :: orb_loss  ! /orb_loss - Losses due to orbits intersecting a material surface.
-   type (type_fp_src_snk_tot)  :: neutr_loss  ! /neutr_loss - Losses due to neutralisation of distribution ions (charge exchange etc.)
-endtype
-
-type type_fp_glob_dist_energies  !    Different energy contents of the distribution species (global branch)
-  real(DP),pointer  :: total(:) => null()     ! /total - Energy content of of a distribution species [J]; Time-dependent; Vector(ndist_spec)
-  real(DP),pointer  :: perp(:) => null()     ! /perp - Perpendicular energy content of of a distribution species [J] Time-dependent; Vector(ndist_spec)
-  real(DP),pointer  :: parallel(:) => null()     ! /parallel - Parallel energy content of of a distribution species [J] Time-dependent; Vector(ndist_spec)
-endtype
-
-type type_fp_glob_dist  !    Quantities related to the calculated distribution function (energy contents, sources, sinks  etc.)
-   type (type_fp_glob_dist_energies)  :: energies  ! /energies - Different energy contents of the distribution species
-   type (type_fp_glob_dist_losses)  :: losses  ! /losses - Losses of the distribution species (orbit losses and neutralisation losses).
-   type (type_fp_src_snk_tot)  :: therm_src  ! /therm_src - Source particles and power due to particles of the distribution species being thermalised (merging into the thermal plasma).
-  real(DP),pointer  :: driven_cur(:) => null()     ! /driven_cur - Current of non-thermal particles (excluding electron back current for fast ions) [A]; Time-dependent; Vector(ndist_spec).
-  real(DP),pointer  :: trq_j_rxb(:) => null()     ! /trq_j_rxb - Torque due to radial currents of non-thermal particles [N.m]; Time-dependent; Vector(ndist_spec).
-   type (type_fp_nucl_reac_th)  :: nucl_reac_th  ! /nucl_reac_th - Nuclear reactions between the calculated species and other species assumed to have thermal distributions.
-   type (type_fp_nucl_reac_sf)  :: nucl_reac_sf  ! /nucl_reac_sf - Nuclear reactions of the calculated species with itself (thermal + non-thermal).
-endtype
-
-type type_fp_glob_coll  !    Quantities related to transfer from the calculated distribution function to background species via collisions.
-  real(DP),pointer  :: power_i(:,:) => null()     ! /power_i - Collisional power to ions [W]; Time-dependent; Matrix(ndist_spec, nion)
-  real(DP),pointer  :: power_e(:) => null()     ! /power_e - Collisional power to the electrons [W]; Time-dependent; Vector(ndist_spec)
-  real(DP),pointer  :: trq_i(:,:) => null()     ! /trq_i - Collisional torque to background ions [N.m]; Time dependent; Matrix (ndist_spec, nion)
-  real(DP),pointer  :: trq_e(:) => null()     ! /trq_e - Collisional torque to electrons [N.m]; Time dependent; Vector(ndist_spec)
-endtype
-
-type type_fp_prof_vol_coll  !    Quantities related to transfer from the calculated distribution function to background species via collisions.
-  real(DP),pointer  :: power_i(:,:,:) => null()     ! /power_i - Collisional power to ions [W]; Time-dependent; Array3d(ndist_spec, nion, npsin)
-  real(DP),pointer  :: power_e(:,:) => null()     ! /power_e - Collisional power to the electrons [W]; Time-dependent; Matrix(ndist_spec,npsin)
-  real(DP),pointer  :: trq_i(:,:,:) => null()     ! /trq_i - Collisional torque to background ions [N.m]; Time dependent; Array3d (ndist_spec, nion, npsin)
-  real(DP),pointer  :: trq_e(:,:) => null()     ! /trq_e - Collisional torque to electrons [N.m]; Time dependent; Matrix(ndist_spec,npsin)
-endtype
-
-type type_fp_prof_surf_coll  !    Quantities related to transfer from the calculated distribution function to background species via collisions.
-  real(DP),pointer  :: powerd_i(:,:,:) => null()     ! /powerd_i - Collisional power to ions [W.m^-3]; Time-dependent; Array3d(ndist_spec, nion, npsin)
-  real(DP),pointer  :: powerd_e(:,:) => null()     ! /powerd_e - Collisional power to the electrons [W.m^-3]; Time-dependent; Matrix(ndist_spec,npsin)
-  real(DP),pointer  :: trqd_i(:,:,:) => null()     ! /trqd_i - Collisional torque to background ions [N.m^-2]; Time dependent; Array3d (ndist_spec, nion, npsin)
-  real(DP),pointer  :: trqd_e(:,:) => null()     ! /trqd_e - Collisional torque to electrons [N.m^-2]; Time dependent; Matrix(ndist_spec,npsin)
-endtype
-
-type type_fp_prof_vol_dist_energies  !    Different energy contents of the distribution species (profiles/volume averaged branch)
-  real(DP),pointer  :: total(:,:) => null()     ! /total - Energy content of of a distribution species [J]; Time-dependent; Matrix(ndist_spec,npsin)
-  real(DP),pointer  :: perp(:,:) => null()     ! /perp - Perpendicular energy content of of a distribution species [J] Time-dependent; Matrix(ndist_spec,npsin)
-  real(DP),pointer  :: parallel(:,:) => null()     ! /parallel - Parallel energy content of of a distribution species [J] Time-dependent; Matrix(ndist_spec,npsin)
-endtype
-
-type type_fp_prof_vol_dist  !    Quantities related to the calculated distribution function (energy contents, sources, sinks  etc.) ADD psin DIMENSION EVERYWHERE
-   type (type_fp_prof_vol_dist_energies)  :: energies  ! /energies - Energy components of a distribution species.
-   type (type_fp_prof_vol_dist_losses)  :: losses  ! /losses - Losses of the distribution species.
-   type (type_fp_src_snk_vol)  :: therm_src  ! /therm_src - Source particles and power due to particles of the distribution species being thermalised (merging into the thermal plasma).
-  real(DP),pointer  :: driven_cur(:,:) => null()     ! /driven_cur - Current of non-thermal particles (does not include electron back current for fast ions) [A]; Time-dependent; Matrix(ndist_spec,nps
-  real(DP),pointer  :: trq_j_rxb(:,:) => null()     ! /trq_j_rxb - Torque due to radial currents of non-thermal particles of the distribution species [N.m]; Time-dependent; Matrix(ndist_spec,npsin)
-   type (type_fp_prof_vol_nucl_reac_th)  :: nucl_reac_th  ! /nucl_reac_th - Nuclear reactions involving the distribution species and other species assumed to be thermal.
-   type (type_fp_prof_vol_nucl_reac_sf)  :: nucl_reac_sf  ! /nucl_reac_sf - Nuclear reactions of the calculated species with itself (thermal + non-thermal).
-endtype
-
-type type_fp_dist_func  !    Distribution functions
-  integer,pointer  :: sol_type(:) => null()      ! /sol_type - Solution type: 1 - full-f; 2 - delta-f. For the latter case delta-f is given by the test particles and the unperturbed distributio
-   type (type_fp_test_part)  :: test_part  ! /test_part - Distribution given as a set of test particles.
-   type (type_fp_ff)  :: f0  ! /f0 - Orbit averaged (or Bounce averaged) zero order distribution function.
-   type (type_fp_ff)  :: fullf  ! /fullf - Orbit averaged (or Bounce averaged) full-f distribution function. 
-endtype
-
-type type_fp_glob  !    Global parameters (in most cases volume integrated and surface averaged quanatities).
-   type (type_fp_glob_dist)  :: dist_spec  ! /dist_spec - Quantities related to the calculated distribution function (energy contents, sources, sinks  etc.)
-   type (type_fp_glob_coll)  :: collision_bg  ! /collision_bg - Quantities related to transfer from the calculated distribution function to background species via collisions.
-endtype
-
-type type_fp_nucl_reac  !    Information on nuclear reactions involving the calculated species.
-  integer,pointer  :: nreacs(:) => null()      ! /nreacs - Number of possible nuclear reactions (with background species and for different branches); Vector(ndist_spec)
-  integer,pointer  :: point_reac(:,:) => null()     ! /point_reac - Pointer to a species in composition who can undergo a nuclear reaction with the calculated species; Matrix(ndist_spec, max_nreac)
-  integer,pointer  :: id_reac(:,:) => null()     ! /id_reac - Identification of the reaction between the calculated species and a background species (including which branch if applicable); Tim
-endtype
-
-type type_fp_prof_vol  !    Volume integrated quantities (inside the given psin)
-   type (type_fp_prof_vol_dist)  :: dist_spec  ! /dist_spec - Quantities related to the calculated distribution function (energy contents, sources, sinks  etc.)
-   type (type_fp_prof_vol_coll)  :: collision_bg  ! /collision_bg - Quantities related to transfer from the calculated distribution function to background species via collisions.
-endtype
-
-type type_fp_prof_surf  !    Flux surface averaged quantities.
-   type (type_fp_prof_surf_dist)  :: dist_spec  ! /dist_spec - Quantities related to the calculated distribution function (energy densities, sources, sinks  etc.)
-   type (type_fp_prof_surf_coll)  :: collision_bg  ! /collision_bg - Quantities related to transfer from the calculated distribution function to background species via collisions.
-endtype
-
-type type_fp_profiles  !    Profiles (volume integrated and flux surface averaged)
-  real(DP),pointer  :: psin(:) => null()     ! /psin - Grid points in normalized poloidal flux function; Vector(npsin)
-   type (type_fp_prof_vol)  :: volume_intgr  ! /volume_intgr - Volume integrated quantities (inside the given psin)
-   type (type_fp_prof_surf)  :: flux_surf_av  ! /flux_surf_av - Flux surface averaged quantities.
-endtype
-
-type type_dist_func  !    
-  integer,pointer  :: sol_type(:) => null()      ! /fp/dist_func/sol_type - Solution type: 1 - full-f; 2 - delta-f. For the latter case delta-f is given by the test particles and the unperturbed distributio
-   type (type_fp_test_part)  :: test_part  ! /fp/dist_func/test_part - Distribution given as a set of test particles.
-   type (type_fp_ff)  :: f0  ! /fp/dist_func/f0 - Orbit averaged (or Bounce averaged) zero order distribution function.
-   type (type_fp_ff)  :: fullf  ! /fp/dist_func/fullf - Orbit averaged (or Bounce averaged) full-f distribution function. 
-endtype
-
-type type_fp  !    
-  type (type_datainfo) :: datainfo  ! /fp/datainfo - 
-  type (type_composition) :: composition  ! /fp/composition - 
-  integer,pointer  :: calc_spec(:) => null()      ! /fp/calc_spec - Pointer to the species for which the distribution function(s) is/are calculated and whose characteristics are given in composition
-   type (type_fp_nucl_reac)  :: nucl_reac  ! /fp/nucl_reac - Information on nuclear reactions involving the calculated species.
-   type (type_fp_glob)  :: global_param  ! /fp/global_param - Global parameters (in most cases volume integrated and surface averaged quanatities).
-   type (type_fp_profiles)  :: profiles  ! /fp/profiles - Profiles (volume integrated and flux surface averaged)
-  type (type_dist_func) :: dist_func  ! /fp/dist_func - Distribution functions
-   type (type_fp_input_src)  :: input_src  ! /fp/input_src - Input sources of particles and power for the distribution species (to aid diagnosing the code output).
-  real(DP)  :: time=-9.0D40       ! /fp/time - Time [s]; Time-dependent; Scalar
-  type (type_codeparam) :: codeparam  ! /fp/codeparam - 
-endtype
-
-! ***********  Include eqgeometry.xsd
-type type_eqgeometry  !    
-  character(len=132), dimension(:), pointer ::source => null()       ! /eqgeometry/source - Comment describing the origin of the eqgeometry data; String
-  integer  :: boundarytype=-999999999       ! /eqgeometry/boundarytype - 0 (limiter) or 1 (separatrix); Integer; Time-dependent; string;
-   type (type_rz1D_npoints)  :: boundary  ! /eqgeometry/boundary - RZ description of the plasma boundary; Time-dependent;
-   type (type_rz0D)  :: geom_axis  ! /eqgeometry/geom_axis - position of the geometric axis [m]; Time-dependent; Scalar
-  real(DP)  :: a_minor=-9.0D40       ! /eqgeometry/a_minor - Minor radius of the plasma boundary [m]; Time-dependent; Scalar
-  real(DP)  :: elongation=-9.0D40       ! /eqgeometry/elongation - Elongation of the plasma boundary; Time-dependent; Scalar
-  real(DP)  :: tria_upper=-9.0D40       ! /eqgeometry/tria_upper - Upper triangularity of the plasma boundary; Time-dependent; Scalar
-  real(DP)  :: tria_lower=-9.0D40       ! /eqgeometry/tria_lower - Lower triangularity of the plasma boundary; Time-dependent; Scalar
-   type (type_rz1D)  :: xpts  ! /eqgeometry/xpts - Position of the Xpoints, first is the active xpoint if diverted [m]; Time-dependent; Vector (npoint)
-   type (type_rz0D)  :: left_low_st  ! /eqgeometry/left_low_st - Position of the lower left strike point [m]; Time-dependent; Scalar
-   type (type_rz0D)  :: right_low_st  ! /eqgeometry/right_low_st - Position of the lower right strike point [m]; Time-dependent; Scalar
-   type (type_rz0D)  :: left_up_st  ! /eqgeometry/left_up_st - Position of the upper left strike point [m]; Time-dependent; Scalar
-   type (type_rz0D)  :: right_up_st  ! /eqgeometry/right_up_st - Position of the upper right strike point [m]; Time-dependent; Scalar
-   type (type_rz0D)  :: active_limit  ! /eqgeometry/active_limit - Position of the active limiter point (point of the plasma boundary in contact with the limiter) [m]; Set R = 0 for X-point plasma;
-endtype
-
-! ***********  Include eqglobal.xsd
-type type_mag_axis  !    
-   type (type_rz0D)  :: position  ! /global_param/mag_axis/position - Position of the magnetic axis [m]; Time-dependent; Scalar; 
-  real(DP)  :: bphi=-9.0D40       ! /global_param/mag_axis/bphi - Total toroidal magnetic field at the magnetic axis [T]; Time-dependent; Scalar
-  real(DP)  :: q=-9.0D40       ! /global_param/mag_axis/q - q at the magnetic axis; Time-dependent; Scalar
-endtype
-
-type type_global_param  !    
-  real(DP)  :: beta_pol=-9.0D40       ! /global_param/beta_pol - poloidal beta; Time-dependent; Scalar
-  real(DP)  :: beta_tor=-9.0D40       ! /global_param/beta_tor - toroidal beta; Time-dependent; Scalar
-  real(DP)  :: beta_normal=-9.0D40       ! /global_param/beta_normal - normalised beta; Time-dependent; Scalar
-  real(DP)  :: i_plasma=-9.0D40       ! /global_param/i_plasma - total toroidal plasma current [A]; Positive sign means anti-clockwise when viewed from above. Time-dependent; Scalar
-  real(DP)  :: li=-9.0D40       ! /global_param/li - internal inductance; Time-dependent; Scalar
-  real(DP)  :: volume=-9.0D40       ! /global_param/volume - total plasma volume [m^3]; Time-dependent; Scalar
-  real(DP)  :: area=-9.0D40       ! /global_param/area - area poloidal cross section [m^2]; Time-dependent; Scalar
-  real(DP)  :: psi_ax=-9.0D40       ! /global_param/psi_ax - poloidal flux at the magnetic axis [Wb]; Time-dependent; Scalar
-  real(DP)  :: psi_bound=-9.0D40       ! /global_param/psi_bound - poloidal flux at the selected plasma boundary (separatrix for a free boundary code; fixed boundary for fixed boundary code) [Wb]; 
-  type (type_mag_axis) :: mag_axis  ! /global_param/mag_axis - Magnetic axis values
-  real(DP)  :: q_95=-9.0D40       ! /global_param/q_95 - q at the 95% poloidal flux surface; Time-dependent; Scalar
-  real(DP)  :: q_min=-9.0D40       ! /global_param/q_min - minimum q value in the plasma; Time-dependent; Scalar
-   type (type_b0r0)  :: toroid_field  ! /global_param/toroid_field - Characteristics of the vacuum toroidal field, redundant with the toroidfield CPO, to be used by the ETS
-  real(DP)  :: w_mhd=-9.0D40       ! /global_param/w_mhd - Plasma energy content = 3/2 * int(p,dV) with p being the total pressure (thermal + fast particles). Time-dependent; Scalar
-endtype
-
-! ***********  Include eqprofiles2d.xsd
-type type_grid  !    
-  real(DP),pointer  :: dim1(:) => null()     ! /profiles_2d/grid/dim1 - First dimension values; Time-dependent; Vector (ndim1) 
-  real(DP),pointer  :: dim2(:) => null()     ! /profiles_2d/grid/dim2 - Second dimension values; Time-dependent; Vector (ndim2) 
-  integer,pointer  :: connect(:,:) => null()     ! /profiles_2d/grid/connect - In case of a finite elemnt representation, lists the points (3 for triangles, 4 for quadrangles) which define a finite element. In
-endtype
-
-type type_profiles_2d  !    
-  character(len=132), dimension(:), pointer ::grid_type => null()       ! /profiles_2d/grid_type - Selection of one of a set of grid types
-  type (type_grid) :: grid  ! /profiles_2d/grid - definition of the 2D grid
-  real(DP),pointer  :: psi_grid(:,:) => null()     ! /profiles_2d/psi_grid - values of the poloidal flux at the grid in the poloidal plane [Wb]; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: jphi_grid(:,:) => null()     ! /profiles_2d/jphi_grid - toroidal plasma current density [A m-2]; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: jpar_grid(:,:) => null()     ! /profiles_2d/jpar_grid - parallel (to magnetic field) plasma current density [A m-2]; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: br(:,:) => null()     ! /profiles_2d/br - R component of the poloidal magnetic field at the specified grid [T]; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: bz(:,:) => null()     ! /profiles_2d/bz - Z component of the poloidal magnetic field at the specified grid [T]; Time-dependent; Matrix (ndim1, ndim2)
-  real(DP),pointer  :: bphi(:,:) => null()     ! /profiles_2d/bphi - toroidal component of the magnetic field at the specified grid [T]; Time-dependent; Matrix (ndim1, ndim2)
-endtype
-
-! ***********  Include eqprofiles.xsd
-type type_profiles_1d  !    
-  real(DP),pointer  :: psi(:) => null()     ! /profiles_1d/psi - Poloidal flux [Wb], without 1/2pi and such that Bp=|grad psi| /R/2/pi. Time-dependent; Vector (npsi)
-  real(DP),pointer  :: phi(:) => null()     ! /profiles_1d/phi - toroidal flux [Wb]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: pressure(:) => null()     ! /profiles_1d/pressure - pressure profile as a function of the poloidal flux [Pa]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: F_dia(:) => null()     ! /profiles_1d/F_dia - diamagnetic profile (R B_phi) [T m]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: pprime(:) => null()     ! /profiles_1d/pprime - psi derivative of the pressure profile [Pa/Wb]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: ffprime(:) => null()     ! /profiles_1d/ffprime - psi derivative of F_dia multiplied with F_dia [T^2 m^2/Wb]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: jphi(:) => null()     ! /profiles_1d/jphi - flux surface averaged toroidal current density = average(jphi/R) / average(1/R) [A/m^2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: jparallel(:) => null()     ! /profiles_1d/jparallel - flux surface averaged parallel current density = average(j.B) / B0, where B0 = equilibrium/global_param/toroid_field/b0 ; [A/m^2];
-  real(DP),pointer  :: q(:) => null()     ! /profiles_1d/q - Safety factor = dphi/dpsi [-]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: r_inboard(:) => null()     ! /profiles_1d/r_inboard - radial coordinate (major radius) at the height and on the left of the magnetic axis [m]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: r_outboard(:) => null()     ! /profiles_1d/r_outboard - radial coordinate (major radius) at the height and on the right of the magnetic axis [m]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: rho_tor(:) => null()     ! /profiles_1d/rho_tor - Toroidal flux coordinate [m], to be used by the ETS and in many CPOs (coreprof, ...). Defined as sqrt(phi/pi/B0), where B0 = equil
-  real(DP),pointer  :: rho_vol(:) => null()     ! /profiles_1d/rho_vol - Normalised radial coordinate related to the plasma volume. Defined as sqrt(volume / volume[LCFS]). Time-dependent; Vector (npsi)
-  real(DP),pointer  :: beta_pol(:) => null()     ! /profiles_1d/beta_pol - poloidal beta (inside the magnetic surface); Time-dependent; Vector (npsi)
-  real(DP),pointer  :: li(:) => null()     ! /profiles_1d/li - internal inductance (inside the magnetic surface); Time-dependent; Vector (npsi)
-  real(DP),pointer  :: elongation(:) => null()     ! /profiles_1d/elongation - Elongation; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: tria_upper(:) => null()     ! /profiles_1d/tria_upper - Upper triangularity profile; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: tria_lower(:) => null()     ! /profiles_1d/tria_lower - Lower triangularity profile; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: volume(:) => null()     ! /profiles_1d/volume - Volume enclosed in the flux surface [m^3]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: vprime(:) => null()     ! /profiles_1d/vprime - Radial derivative of the volume enclosed in the flux surface, i.e. dV/drho_tor [m^2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: area(:) => null()     ! /profiles_1d/area - Cross-sectional area of the flux surface [m^2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: aprime(:) => null()     ! /profiles_1d/aprime - Radial derivative of the cross-sectional area of the flux surface, i.e. darea/drho_tor [m^2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: surface(:) => null()     ! /profiles_1d/surface - Surface area of the flux surface [m^2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: ftrap(:) => null()     ! /profiles_1d/ftrap - Trapped particle fraction; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm1(:) => null()     ! /profiles_1d/gm1 - average(1/R^2); Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm2(:) => null()     ! /profiles_1d/gm2 - average(grad_rho^2/R^2); Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm3(:) => null()     ! /profiles_1d/gm3 - average(grad_rho^2); Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm4(:) => null()     ! /profiles_1d/gm4 - average(1/B^2) [T^-2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm5(:) => null()     ! /profiles_1d/gm5 - average(B^2) [T^2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm6(:) => null()     ! /profiles_1d/gm6 - average(grad_rho^2/B^2)  [T^-2]; Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm7(:) => null()     ! /profiles_1d/gm7 - average(grad_rho); Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm8(:) => null()     ! /profiles_1d/gm8 - average(R); Time-dependent; Vector (npsi)
-  real(DP),pointer  :: gm9(:) => null()     ! /profiles_1d/gm9 - average(1/R); Time-dependent; Vector (npsi)
-endtype
-
-! ***********  Include equilibrium.xsd
-type type_equilibrium  !    
-  type (type_datainfo) :: datainfo  ! /equilibrium/datainfo - 
-  type (type_eqconstraint) :: eqconstraint  ! /equilibrium/eqconstraint - 
-  type (type_eqgeometry) :: eqgeometry  ! /equilibrium/eqgeometry - 
-  type (type_flush) :: flush  ! /equilibrium/flush - 
-  type (type_global_param) :: global_param  ! /equilibrium/global_param - 
-  type (type_profiles_1d) :: profiles_1d  ! /equilibrium/profiles_1d - 
-  type (type_profiles_2d) :: profiles_2d  ! /equilibrium/profiles_2d - 
-  type (type_coord_sys) :: coord_sys  ! /equilibrium/coord_sys - 
-  real(DP)  :: time=-9.0D40       ! /equilibrium/time - Time [s]; Time-dependent; Scalar
-  type (type_codeparam) :: codeparam  ! /equilibrium/codeparam - 
-endtype
-
-! ***********  Include ironmodel.xsd
-type type_permeability  !    
-  real(DP),pointer  :: b(:,:) => null()     ! /ironmodel/desc_iron/permeability/b - List of B values for description of the mur(B) dependence [T]; Matrix (nsegment,nB)
-  real(DP),pointer  :: mur(:,:) => null()     ! /ironmodel/desc_iron/permeability/mur - Relative permeability mur(B) [dimensionless]; Matrix (nsegment,nB)
-endtype
-
-type type_geom_iron  !    
-  integer,pointer  :: npoints(:) => null()      ! /ironmodel/desc_iron/geom_iron/npoints - Number of points describing an element (irregular outline rzcoordinate); Vector (nsegment)
-   type (type_rz2D)  :: rzcoordinate  ! /ironmodel/desc_iron/geom_iron/rzcoordinate - Irregular outline [m]; 2D arrays (nsegment,max_npoints)
-endtype
-
-type type_desc_iron  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /ironmodel/desc_iron/name - Name of circuit. Array of strings (ncircuit).
-  character(len=132), dimension(:), pointer ::id => null()       ! /ironmodel/desc_iron/id - ID of circuit.  Array of strings (ncircuit).
-  type (type_permeability) :: permeability  ! /ironmodel/desc_iron/permeability - Permeability model (can be different for each iron segment)
-  type (type_geom_iron) :: geom_iron  ! /ironmodel/desc_iron/geom_iron - Geometry of the iron segments
-endtype
-
-type type_magnetise  !    
-   type (type_exp1D)  :: mr  ! /ironmodel/magnetise/mr - Magnetisation along the R axis [T]; Time-dependent; Vector (nsegment)
-   type (type_exp1D)  :: mz  ! /ironmodel/magnetise/mz - Magnetisation along the Z axis [T]; Time-dependent; Vector (nsegment)
-endtype
-
-type type_ironmodel  !    
-  type (type_datainfo) :: datainfo  ! /ironmodel/datainfo - 
-  type (type_desc_iron) :: desc_iron  ! /ironmodel/desc_iron - Description of the iron segments
-  type (type_magnetise) :: magnetise  ! /ironmodel/magnetise - Magnetisation M of the iron segment, assumed to be constant inside a given iron segment. Reminder : H = 1/mu0 * B - mur * M; [A/m]
-  real(DP)  :: time=-9.0D40       ! /ironmodel/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include launchs.xsd
-type type_spectrum  !    
-  integer,pointer  :: nn_phi(:) => null()      ! /launchs/spectrum/nn_phi - Number of points for the discretization of the spectrum in the toroidal direction, Vector of integers (nantenna).
-  integer,pointer  :: nn_theta(:) => null()      ! /launchs/spectrum/nn_theta - Number of points for the discretization of the spectrum in the poloidal direction, Vector of integers (nantenna).
-  real(DP),pointer  :: n_phi(:,:) => null()     ! /launchs/spectrum/n_phi - Refraction index in the toroidal direction, Matrix (nantenna,max_nn_phi).
-  real(DP),pointer  :: n_theta(:,:) => null()     ! /launchs/spectrum/n_theta - Refraction index in poloidal direction, Matrix (nantenna,max_nn_theta).
-  real(DP),pointer  :: power(:,:,:) => null()     ! /launchs/spectrum/power - W/dNphi/dNtheta [W], Array (nantenna, max_nn_phi, max_nn_theta). Time-dependent
-endtype
-
-type type_launchs  !    
-  type (type_datainfo) :: datainfo  ! /launchs/datainfo - 
-  character(len=132), dimension(:), pointer ::name => null()       ! /launchs/name - Antenna name, Vector of strings (nantenna)
-  character(len=132), dimension(:), pointer ::type => null()       ! /launchs/type - Wave type (LH, EC, IC, ...), Vector of strings (nantenna)
-  real(DP),pointer  :: frequency(:) => null()     ! /launchs/frequency - Wave frequency [Hz], Vector (nantenna).
-  integer,pointer  :: mode(:) => null()      ! /launchs/mode - Incoming wave mode (defined as in the antennas CPO). Vector of integers (nantenna). Time-dependent
-   type (type_rzphi1D)  :: position  ! /launchs/position - Reference global position of the antenna. Time-dependent
-  type (type_spectrum) :: spectrum  ! /launchs/spectrum - Spectral properties of the wave.
-   type (type_rf_beam)  :: beam  ! /launchs/beam - Beam characteristics
-  type (type_codeparam) :: codeparam  ! /launchs/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /launchs/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include limiter.xsd
-type type_limiter  !    
-  type (type_datainfo) :: datainfo  ! /limiter/datainfo - 
-   type (type_rz1D)  :: position  ! /limiter/position - Position (R,Z coordinates) of the limiter [m]; Vector(npoints)
-endtype
-
-! ***********  Include magdiag.xsd
-type type_setup_floops  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /magdiag/flux_loops/setup_floops/name - Name of loop. Array of strings (nloops).
-  character(len=132), dimension(:), pointer ::id => null()       ! /magdiag/flux_loops/setup_floops/id - ID of loop. Array of strings (nloops).
-   type (type_rzphi2D)  :: position  ! /magdiag/flux_loops/setup_floops/position - List of (R,Z,phi) points defining the position of the loop (see data structure documentation FLUXLOOPposition.pdf); Matrices (nloo
-  integer,pointer  :: npoints(:) => null()      ! /magdiag/flux_loops/setup_floops/npoints - Number of points describing each loop in the "position" matrices. Vector (nloops)
-endtype
-
-type type_setup_bprobe  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /magdiag/bpol_probes/setup_bprobe/name - Name of the probe.  Array of strings (nprobes).
-  character(len=132), dimension(:), pointer ::id => null()       ! /magdiag/bpol_probes/setup_bprobe/id - ID of the probe.  Array of strings (nprobes).
-   type (type_rz1D)  :: position  ! /magdiag/bpol_probes/setup_bprobe/position - RZ of coil centre [m]; Vector (nprobes)
-  real(DP),pointer  :: polangle(:) => null()     ! /magdiag/bpol_probes/setup_bprobe/polangle - Poloidal angle of coil orientation (w.r.t. horizontal ?? to be checked) [rad]; Vector (nprobes)
-  real(DP),pointer  :: torangle(:) => null()     ! /magdiag/bpol_probes/setup_bprobe/torangle - Toroidal angle of coil orientation (0 if fully in the poloidal plane) [rad] ; Vector (nprobes)
-  real(DP),pointer  :: area(:) => null()     ! /magdiag/bpol_probes/setup_bprobe/area - Area of coil [m^2]; Vector (nprobes)
-  real(DP),pointer  :: length(:) => null()     ! /magdiag/bpol_probes/setup_bprobe/length - Length of coil [m]; Vector (nprobes)
-  integer,pointer  :: turns(:) => null()      ! /magdiag/bpol_probes/setup_bprobe/turns - Turns in the coil; Vector (nprobes)
-endtype
-
-type type_flux_loops  !    
-  type (type_setup_floops) :: setup_floops  ! /magdiag/flux_loops/setup_floops - diagnostic setup information
-   type (type_exp1D)  :: measure  ! /magdiag/flux_loops/measure - Measured flux [Wb]; Time-dependent; Vector (nloops)
-endtype
-
-type type_bpol_probes  !    
-  type (type_setup_bprobe) :: setup_bprobe  ! /magdiag/bpol_probes/setup_bprobe - diagnostic setup information
-   type (type_exp1D)  :: measure  ! /magdiag/bpol_probes/measure - Measured value [T]; Time-dependent; Vector (nprobes)
-endtype
-
-type type_magdiag  !    
-  type (type_datainfo) :: datainfo  ! /magdiag/datainfo - 
-   type (type_exp0D)  :: ip  ! /magdiag/ip - Plasma current [A]. Positive sign means anti-clockwise when viewed from above.  Time-dependent. Scalar
-   type (type_exp0D)  :: diamagflux  ! /magdiag/diamagflux - Diamagnetic flux [Wb]; Time-dependent; Scalar
-  type (type_flux_loops) :: flux_loops  ! /magdiag/flux_loops - Poloidal flux loops RZ coordinates have 1 component for the full loop and two if there is a negative reference loop
-  type (type_bpol_probes) :: bpol_probes  ! /magdiag/bpol_probes - Poloidal field probes
-  real(DP)  :: time=-9.0D40       ! /magdiag/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include msediag.xsd
-type type_setup_mse  !    
-   type (type_rz1D)  :: rzgamma  ! /msediag/setup_mse/rzgamma - RZ of intersection between beam and line of sight [m]; Vector (nchords)
-  real(DP),pointer  :: geom_coef(:,:) => null()     ! /msediag/setup_mse/geom_coef - Geometric coefficients (6) describing the angle between beam and line of sight; The first dimension contains succesively : numerat
-endtype
-
-type type_msediag  !    
-  type (type_datainfo) :: datainfo  ! /msediag/datainfo - 
-  type (type_setup_mse) :: setup_mse  ! /msediag/setup_mse - diagnostic setup information
-   type (type_exp1D)  :: measure  ! /msediag/measure - Measured value (MSE angle gamma [rad]). Time-dependent; Vector (nchords)
-  real(DP)  :: time=-9.0D40       ! /msediag/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include mhd.xsd
-type type_mhd  !    
-  type (type_datainfo) :: datainfo  ! /mhd/datainfo - 
-  integer,pointer  :: n(:) => null()      ! /mhd/n - Toroidal mode number; Time-dependent; Vector (nn)
-  integer,pointer  :: m(:,:) => null()     ! /mhd/m - Poloidal mode number; Time-dependent; Matrix (nn,nm)
-  real(DP),pointer  :: psi(:) => null()     ! /mhd/psi - Position in poloidal flux [Wb] (without 1/2pi and such that Bp=|grad psi| /R/2/pi). Time-dependent; Vector (npsi)
-  real(DP),pointer  :: frequency(:) => null()     ! /mhd/frequency - Frequency of the mode [Hz]; Time-dependent; Vector (nn)
-  real(DP),pointer  :: growthrate(:) => null()     ! /mhd/growthrate - Linear growthrate of the mode [Hz]; Time-dependent; Vector (nn)
-  real(DP),pointer  :: disp_perp(:,:,:) => null()     ! /mhd/disp_perp - Perpendicular displacement of the mode [m]; Time-dependent; Array 3D (npsi,nn,nm)
-  real(DP),pointer  :: disp_par(:,:,:) => null()     ! /mhd/disp_par - Parallel displacement of the mode [m]; Time-dependent; Array 3D (npsi,nn,nm)
-  real(DP),pointer  :: tau_alfven(:) => null()     ! /mhd/tau_alfven - Alven time=R/vA=R0 sqrt(mi ni(rho))/B0 [s]; Definitions of R0, BO, mi, ni to be clarified. rho grid should be included in the MHD 
-  real(DP),pointer  :: tau_resistive(:) => null()     ! /mhd/tau_resistive - Resistive time = mu_0 rho*rho/1.22/eta_neo [s]; Source of eta_neo to be clarified. Time-dependent; Vector (npsi)
-  real(DP)  :: time=-9.0D40       ! /mhd/time - Time [s]; Time-dependent; Scalar.
-  type (type_codeparam) :: codeparam  ! /mhd/codeparam - 
-endtype
-
-! ***********  Include neoclassic.xsd
-type type_neoclassic  !    
-  type (type_datainfo) :: datainfo  ! /neoclassic/datainfo - 
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /neoclassic/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-  real(DP),pointer  :: rho_tor(:) => null()     ! /neoclassic/rho_tor - Toroidal flux coordinate (not normalised, equivalent to rho_tor_norm) [m];  Vector (nrho). Time-dependent.
-   type (type_transcoefion)  :: ni_neo  ! /neoclassic/ni_neo - Neoclassical transport coefficients for ion density equation. Time-dependent.
-   type (type_transcoefel)  :: ne_neo  ! /neoclassic/ne_neo - Neoclassical transport coefficients for electron density equation. Time-dependent.
-   type (type_transcoefimp)  :: nz_neo  ! /neoclassic/nz_neo - Neoclassical transport coefficients for impurity (multiple charge state) density equation. Time-dependent.
-   type (type_transcoefion)  :: ti_neo  ! /neoclassic/ti_neo - Neoclassical transport coefficients for ion temperature equation. Time-dependent.
-   type (type_transcoefel)  :: te_neo  ! /neoclassic/te_neo - Neoclassical transport coefficients for electron temperature equation. Time-dependent.
-   type (type_transcoefimp)  :: tz_neo  ! /neoclassic/tz_neo - Neoclassical transport coefficients for impurity  (multiple charge state) temperature equation. Time-dependent.
-   type (type_transcoefel)  :: mtor_neo  ! /neoclassic/mtor_neo - Neoclassical transport coefficients for total toroidal momentum equation. Time-dependent.
-  real(DP),pointer  :: sigma(:) => null()     ! /neoclassic/sigma - Neoclassical conductivity [ohm^-1.m^-1]. Time-dependent. Vector(nrho).
-  real(DP),pointer  :: jboot(:) => null()     ! /neoclassic/jboot - Bootstrap current density [A.m^-2]. Time-dependent. Vector(nrho).
-  real(DP),pointer  :: er(:) => null()     ! /neoclassic/er - Radial electric field [V/m]. Time-dependent. Vector(nrho).
-  real(DP),pointer  :: vpol(:,:) => null()     ! /neoclassic/vpol - Neoclassical poloidal rotation of for each ion species [m/s]. Time-dependent. Matrix(nrho,nion).
-  real(DP),pointer  :: fext(:,:,:) => null()     ! /neoclassic/fext - Moments of parallel external force on each ion species [T.J.m^-3]. Time-dependent. Array3D(nrho,nion,nmoment).
-  real(DP),pointer  :: jext(:) => null()     ! /neoclassic/jext - Current density response to fext [A.m^-2]. Time-dependent. Vector(nrho).
-  real(DP)  :: time=-9.0D40       ! /neoclassic/time - Time [s]; Time-dependent; Scalar.
-  type (type_codeparam) :: codeparam  ! /neoclassic/codeparam - 
-endtype
-
-! ***********  Include orbit.xsd
-type type_orbit_pos  !    Complex type for orbit position (Vector)
-  real(DP),pointer  :: r(:) => null()     ! /r - Major radius [m]; Time-dependent; Vector (norbits). 
-  real(DP),pointer  :: z(:) => null()     ! /z - Altitude [m]; Time-dependent; Vector (norbits).
-  real(DP),pointer  :: psi(:) => null()     ! /psi - Position in psi [normalised poloidal flux]; Time-dependent; Vector (norbits).
-  real(DP),pointer  :: theta_b(:) => null()     ! /theta_b - Poloidal Boozer angle [rad]; Time-dependent; Vector (norbits). 
-endtype
-
-type type_midplane  !    
-   type (type_orbit_pos)  :: outer  ! /orbit/orb_glob_dat/special_pos/midplane/outer - Position at outer mid-plane
-   type (type_orbit_pos)  :: inner  ! /orbit/orb_glob_dat/special_pos/midplane/inner - Position at inner mid-plane
-endtype
-
-type type_turning_pts  !    
-   type (type_orbit_pos)  :: upper  ! /orbit/orb_glob_dat/special_pos/turning_pts/upper - Position at upper turning point
-   type (type_orbit_pos)  :: lower  ! /orbit/orb_glob_dat/special_pos/turning_pts/lower - Position at lower turning point
-endtype
-
-type type_special_pos  !    
-  type (type_midplane) :: midplane  ! /orbit/orb_glob_dat/special_pos/midplane - Intersections with the midplane
-  type (type_turning_pts) :: turning_pts  ! /orbit/orb_glob_dat/special_pos/turning_pts - Location of turning points
-endtype
-
-type type_orbitt_id  !    
-  real(DP)  :: amn=-9.0D40       ! /orbit/orbitt_id/amn - Atomic mass of the ion; Scalar
-  real(DP)  :: zion=-9.0D40       ! /orbit/orbitt_id/zion - Atomic charge of the ion; Scalar
-  real(DP),pointer  :: energy(:) => null()     ! /orbit/orbitt_id/energy - Energy of the ion [keV]; Time-dependent; Vector (norbits).
-  real(DP),pointer  :: magn_mom(:) => null()     ! /orbit/orbitt_id/magn_mom - Magnetic momentum [kg m^2 / s^2 / T]; Time-dependent, Vector(norbits).
-  real(DP),pointer  :: p_phi(:) => null()     ! /orbit/orbitt_id/p_phi - toroidal angular momentum [kg m^2 / s]; Time-dependent; Vector(norbits);
-  integer,pointer  :: sigma(:) => null()      ! /orbit/orbitt_id/sigma - Sign of parallel velocity at psi=psi_max along the orbit; Time-dependent; Vector(norbits)
-endtype
-
-type type_orb_trace  !    
-  real(DP),pointer  :: time_orb(:,:) => null()     ! /orbit/orb_trace/time_orb - Time along the orbit  [s]; Time-dependent; Matrix (norbits, max_ntorb)
-  integer,pointer  :: ntorb(:) => null()      ! /orbit/orb_trace/ntorb - Number of time slices along the orbit, for each orbit. Time-dependent; Vector (norbits)
-  real(DP),pointer  :: r(:,:) => null()     ! /orbit/orb_trace/r - Major radius of the guiding centre [m], Major radius; Time-dependent; Matrix (norbits, max_ntorb). 
-  real(DP),pointer  :: z(:,:) => null()     ! /orbit/orb_trace/z - Altitude of the guiding centre [m]; Time-dependent; Matrix (norbits, max_ntorb).
-  real(DP),pointer  :: psi(:,:) => null()     ! /orbit/orb_trace/psi - Guiding centre position in psi [normalised poloidal flux]; Time-dependent; Matrix (norbits, max_ntorb)).
-  real(DP),pointer  :: theta_b(:,:) => null()     ! /orbit/orb_trace/theta_b - Position of the guiding centre in poloidal Boozer angle [rad]; Time-dependent; Matrix (norbits, max_ntorb). 
-  real(DP),pointer  :: v_parallel(:,:) => null()     ! /orbit/orb_trace/v_parallel - Parallel velocity along the orbit [m/s]; Time-dependent; Matrix (norbits, max_ntorb).
-  real(DP),pointer  :: v_perp(:,:) => null()     ! /orbit/orb_trace/v_perp - Perpendicular velocity along the orbit [m/s]; Time-dependent; Matrix (norbits, max_ntorb).
-endtype
-
-type type_orb_glob_dat  !    
-  integer,pointer  :: orbit_type(:) => null()      ! /orbit/orb_glob_dat/orbit_type - Identifier of orbit type: 0 trapped, -1 co-passing, + 1 counter-passing ; Time-dependent; Vector (norbits)
-  real(DP),pointer  :: omega_b(:) => null()     ! /orbit/orb_glob_dat/omega_b - Bounce angular frequency rad/s; Time-dependent; Vector (norbits)
-  real(DP),pointer  :: omega_phi(:) => null()     ! /orbit/orb_glob_dat/omega_phi - Toroidal angular precession frequency [rad/s]; Time-dependent; Vector (norbits).
-  real(DP),pointer  :: omega_c_av(:) => null()     ! /orbit/orb_glob_dat/omega_c_av - Orbit averaged cyclotron frequency [rad/a]; Time-dependent; Vector(norbits).
-  type (type_special_pos) :: special_pos  ! /orbit/orb_glob_dat/special_pos - Special positions along an orbit (like turning points).
-endtype
-
-type type_orbit  !    
-  type (type_datainfo) :: datainfo  ! /orbit/datainfo - 
-  type (type_orbitt_id) :: orbitt_id  ! /orbit/orbitt_id - Parameters identifying an orbit
-  type (type_orb_trace) :: orb_trace  ! /orbit/orb_trace - Position of particle in 5D space (3D in real and 2D in velocity).
-  type (type_orb_glob_dat) :: orb_glob_dat  ! /orbit/orb_glob_dat - Global quantities associated with an orbit.
-  type (type_codeparam) :: codeparam  ! /orbit/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /orbit/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include pfgeometry.xsd
-type type_pfgeometry  !    
-  integer,pointer  :: type(:,:) => null()     ! /pfgeometry/type - Type used to describe a coil shape (0 for 'rzcoordinates' or 1 for 'rzdrdz'); Matrix of integers (ncoils,max_nelements)
-  integer,pointer  :: npoints(:,:) => null()     ! /pfgeometry/npoints - Number of points describing an element (irregular outline rzcoordinates); Matrix (ncoils,max_nelements)
-   type (type_rz3D)  :: rzcoordinate  ! /pfgeometry/rzcoordinate - Irregular outline [m]; 3D arrays (ncoils,max_nelements,max_npoints)
-  real(DP),pointer  :: rzdrdz(:,:,:) => null()     ! /pfgeometry/rzdrdz - 4-vector defining Centre R,Z and full extents dR, dZ [m]; 3D Array (ncoils,max_nelements,4)
-endtype
-
-! ***********  Include pfelement.xsd
-type type_pfelement  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /pfelement/name - Name of this element. Should be a matrix of strings (ncoils,max_nelements), but not supported by the UAL yet.
-  character(len=132), dimension(:), pointer ::id => null()       ! /pfelement/id - ID of this element. Should be a matrix of strings (ncoils,max_nelements), but not supported by the UAL yet.
-  real(DP),pointer  :: turnsign(:,:) => null()     ! /pfelement/turnsign - Sign of turn and fraction of a turn for calculating magnetic field of the Element; Matrix (ncoils,max_nelements)
-  real(DP),pointer  :: area(:,:) => null()     ! /pfelement/area - Surface area of this element [m^2]; Matrix (ncoils,max_nelements)
-  type (type_pfgeometry) :: pfgeometry  ! /pfelement/pfgeometry - 
-endtype
-
-! ***********  Include pfcircuits.xsd
-type type_pfcircuits  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /pfcircuits/name - Name of circuit, array of strings (ncircuits)
-  character(len=132), dimension(:), pointer ::id => null()       ! /pfcircuits/id - ID of circuit, array of strings (ncircuits)
-  character(len=132), dimension(:), pointer ::type => null()       ! /pfcircuits/type - Type of circuit, array of strings (ncircuits)
-  integer,pointer  :: nnodes(:) => null()      ! /pfcircuits/nnodes - Number of nodes used to describe a circuit. Vector (ncircuits)
-  integer,pointer  :: connections(:,:,:) => null()     ! /pfcircuits/connections - Description of the supplies and coils connections (nodes) across each circuit. Array 3D (ncircuits,max_nnodes,2*ncomponents), desc
-endtype
-
-! ***********  Include pfcoils.xsd
-type type_desc_pfcoils  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /pfcoils/desc_pfcoils/name - Name of coil. Array of strings (ncoils)
-  character(len=132), dimension(:), pointer ::id => null()       ! /pfcoils/desc_pfcoils/id - ID of coil. Array of strings (ncoils)
-  real(DP),pointer  :: res(:) => null()     ! /pfcoils/desc_pfcoils/res - Coil resistance [Ohm]; Vector (ncoils)
-  real(DP),pointer  :: emax(:) => null()     ! /pfcoils/desc_pfcoils/emax - Maximum Energy to be dissipated in coils [J]; Vector (ncoils)
-  integer,pointer  :: nelement(:) => null()      ! /pfcoils/desc_pfcoils/nelement - Number of elements used to describe a coil; Vector (ncoils)
-  type (type_pfelement) :: pfelement  ! /pfcoils/desc_pfcoils/pfelement - Filament describing part of the coil as a rectangle
-endtype
-
-type type_pfcoils  !    
-  type (type_desc_pfcoils) :: desc_pfcoils  ! /pfcoils/desc_pfcoils - Description of the coils
-   type (type_exp1D)  :: coilcurrent  ! /pfcoils/coilcurrent - Circuit feed current in the coil , defined positive if it flows from point 1 to point 2 of the component in the pfcircuit descript
-   type (type_exp1D)  :: coilvoltage  ! /pfcoils/coilvoltage - Voltage on the full coil [V]; Time-dependent; Vector (ncoils)
-endtype
-
-! ***********  Include pfpassive.xsd
-type type_pfpageometry  !    
-  integer,pointer  :: type(:) => null()      ! /pfpassive/pfpageometry/type - Type used to describe the shape (0 for 'rzcoordinates' or 1 for 'rzdrdz'); Vector of integers (nelements)
-  integer,pointer  :: npoints(:) => null()      ! /pfpassive/pfpageometry/npoints - Number of points describing an element (irregular outline rzcoordinates); Vector of integers (nelements)
-   type (type_rz2D)  :: rzcoordinate  ! /pfpassive/pfpageometry/rzcoordinate - Irregular outline [m]; Matrix (nelements,max_npoints)
-  real(DP),pointer  :: rzdrdz(:,:) => null()     ! /pfpassive/pfpageometry/rzdrdz - 4-vector defining Centre R,Z and full extents dR, dZ [m]; Matrix (nelements,4)
-endtype
-
-type type_pfpassive  !    
-  real(DP),pointer  :: area(:) => null()     ! /pfpassive/area - Surface area of this passive element [m^2]; Vector (nelements)
-  real(DP),pointer  :: res(:) => null()     ! /pfpassive/res - Passive element resistance [Ohm]; Vector (nelements)
-  type (type_pfpageometry) :: pfpageometry  ! /pfpassive/pfpageometry - Geometry of the passive elements
-endtype
-
-! ***********  Include pfsupplies.xsd
-type type_filter  !    
-  real(DP),pointer  :: num(:,:) => null()     ! /pfsupplies/desc_supply/filter/num - Coefficients of the numerator, in increasing order : a0 + a1*s + ... + an*s^n; Matrix (nsupplies,n)
-  real(DP),pointer  :: den(:,:) => null()     ! /pfsupplies/desc_supply/filter/den - Coefficients of the denominator, in increasing order : b0 + b1*s + ... + bm*s^m; Matrix (nsupplies,m)
-endtype
-
-type type_desc_supply  !    
-  character(len=132), dimension(:), pointer ::name => null()       ! /pfsupplies/desc_supply/name - Name of the supply; Array of strings (nsupplies)
-  character(len=132), dimension(:), pointer ::id => null()       ! /pfsupplies/desc_supply/id - ID of the supply; Array of strings (nsupplies)
-  character(len=132), dimension(:), pointer ::type => null()       ! /pfsupplies/desc_supply/type - Type of supply; Array of strings (nsupplies)
-  real(DP),pointer  :: delay(:) => null()     ! /pfsupplies/desc_supply/delay - Pure delay in the supply [s]; Vector (nsupplies)
-  type (type_filter) :: filter  ! /pfsupplies/desc_supply/filter - Laplace proper filter 
-  real(DP),pointer  :: imin(:) => null()     ! /pfsupplies/desc_supply/imin - Minimum current [A]; Vector (nsupplies)
-  real(DP),pointer  :: imax(:) => null()     ! /pfsupplies/desc_supply/imax - Maximum current [A]; Vector (nsupplies)
-  real(DP),pointer  :: res(:) => null()     ! /pfsupplies/desc_supply/res - Supply internal resistance [Ohm]; Vector (nsupplies)
-  real(DP),pointer  :: umin(:) => null()     ! /pfsupplies/desc_supply/umin - Minimum voltage [V]; Vector (nsupplies)
-  real(DP),pointer  :: umax(:) => null()     ! /pfsupplies/desc_supply/umax - Maximum voltage [V]; Vector (nsupplies)
-  real(DP),pointer  :: emax(:) => null()     ! /pfsupplies/desc_supply/emax - Maximum Energy to be dissipated in supply [J]; Vector (nsupplies)
-endtype
-
-type type_pfsupplies  !    
-  type (type_desc_supply) :: desc_supply  ! /pfsupplies/desc_supply - Description of the power supplies
-   type (type_exp1D)  :: voltage  ! /pfsupplies/voltage - Voltage at the supply output [V]; Time-dependent; Vector  (nsupplies)
-   type (type_exp1D)  :: current  ! /pfsupplies/current - Current at the supply output, defined positive if it flows from point 1 to point 2 of the component in the pfcircuit description [
-endtype
-
-! ***********  Include pfsystems.xsd
-type type_pfsystems  !    
-  type (type_datainfo) :: datainfo  ! /pfsystems/datainfo - 
-  type (type_pfcoils) :: pfcoils  ! /pfsystems/pfcoils - 
-  type (type_pfpassive) :: pfpassive  ! /pfsystems/pfpassive - 
-  type (type_pfcircuits) :: pfcircuits  ! /pfsystems/pfcircuits - 
-  type (type_pfsupplies) :: pfsupplies  ! /pfsystems/pfsupplies - 
-  real(DP)  :: time=-9.0D40       ! /pfsystems/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include toroidalfield.xsd
-type type_toroidfield  !    
-  type (type_datainfo) :: datainfo  ! /toroidfield/datainfo - 
-  integer  :: nturns=-999999999       ! /toroidfield/nturns - Number of total turns in the toroidal field coil
-  integer  :: ncoils=-999999999       ! /toroidfield/ncoils - Number of packets of coils
-   type (type_exp0D)  :: current  ! /toroidfield/current - Current in the toroidal field coils [A]; Time-dependent. Scalar.
-   type (type_exp0D)  :: bvac_r  ! /toroidfield/bvac_r - Vacuum field times radius in the toroidal field magnet [T.m]. Positive sign means anti-clockwise when viewed from above. Time-depe
-  real(DP)  :: r0=-9.0D40       ! /toroidfield/r0 - Characteristic major radius of the device (used in publications, usually middle of the vessel at the equatorial midplane) [m]. Sca
-  real(DP)  :: time=-9.0D40       ! /toroidfield/time - Time [s]; Time-dependent. Scalar.
-endtype
-
-! ***********  Include sawteeth.xsd
-type type_sawteeth_profiles1d  !    Core profiles after sawtooth crash
-  real(DP),pointer  :: ne(:) => null()     ! /ne - Electron density [m^-3]. Time-dependent. Vector (nrho).
-  real(DP),pointer  :: ni(:,:) => null()     ! /ni - Ion density [m^-3]. Time-dependent. Matrix (nrho,nion).
-  real(DP),pointer  :: te(:) => null()     ! /te - Electron temperature [eV]. Time-dependent. Vector (nrho).
-  real(DP),pointer  :: ti(:,:) => null()     ! /ti - Ion temperature [eV]. Time-dependent. Matrix (nrho,nion).
-  real(DP),pointer  :: psi(:) => null()     ! /psi - Poloidal flux [Wb], without 1/2pi and such that Bp=|grad psi| /R/2/pi. Time-dependent. Vector (nrho).
-  real(DP),pointer  :: phi(:) => null()     ! /phi - Toroidal flux [Wb]. Time-dependent. Vector (nrho).
-  real(DP),pointer  :: psistar(:) => null()     ! /psistar - Psi* = psi - phi [Wb]. Time-dependent. Vector (nrho).
-  real(DP),pointer  :: volume(:) => null()     ! /volume - Volume enclosed in the flux surface [m^3]. Required to ensure particle and energy conservation during reconnection process (ndV an
-  real(DP),pointer  :: q(:) => null()     ! /q - Safety factor = dphi/dpsi [-]. Time-dependent. Vector (nrho).
-endtype
-
-type type_sawteeth_diags  !    Inversion and mixing radii
-  real(DP)  :: shear1=-9.0D40       ! /shear1 - Magnetic shear at q = 1 [-]. Time-dependent. Real scalar.
-  real(DP)  :: rhotorn_q1=-9.0D40       ! /rhotorn_q1 - Rho_tor_norm at q=1 radius [-]. Time-dependent. Real scalar.
-  real(DP)  :: rhotorn_inv=-9.0D40       ! /rhotorn_inv - Rho_tor_norm at inversion radius [-]. Time-dependent. Real scalar.
-  real(DP)  :: rhotorn_mix=-9.0D40       ! /rhotorn_mix - Rho_tor_norm at mixing radius [-]. Time-dependent. Real scalar.
-endtype
-
-type type_sawteeth  !    
-  type (type_datainfo) :: datainfo  ! /sawteeth/datainfo - 
-  integer  :: crash_trig=-999999999       ! /sawteeth/crash_trig - Flag indicating whether a crash condition has been satisfied : 0 = no crash. N(>0) = crash triggered due to condition ii=N. Intege
-  type (type_composition) :: composition  ! /sawteeth/composition - 
-  real(DP),pointer  :: rho_tor_norm(:) => null()     ! /sawteeth/rho_tor_norm - Normalised toroidal flux coordinate values (= rho_tor normalised to the value at the last grid point); Vector (nrho)
-  real(DP),pointer  :: rho_tor(:) => null()     ! /sawteeth/rho_tor - Toroidal flux coordinate [m] given by sqrt(phi/B0/pi), where B0 = toroidfield%bvac_r%value / toroidfield%r0. Vector (nrho). Time-d
-   type (type_sawteeth_profiles1d)  :: profiles1d  ! /sawteeth/profiles1d - Core profiles after sawtooth crash
-   type (type_sawteeth_diags)  :: diags  ! /sawteeth/diags - 
-  type (type_codeparam) :: codeparam  ! /sawteeth/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /sawteeth/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include scenario.xsd
-type type_scenario_ref  !    Structure for scenario reference; Time-dependent
-  real(DP)  :: value=-9.0D40       ! /value - Signal value; Time-dependent; Scalar
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the signal (any comment describing the origin of the signal : code, path to diagnostic signals, massaging, ...); String
-endtype
-
-type type_scenario_int  !    Structure for scenario integer flag; Time-dependent
-  integer  :: value=-999999999       ! /value - Signal value; Time-dependent; Scalar Integer.
-  character(len=132), dimension(:), pointer ::source => null()       ! /source - Source of the signal (any comment describing the origin of the signal : code, path to diagnostic signals, massaging, ...); String
-endtype
-
-type type_scenario_reactor  !    reactor data (such as electricity cost ...)
-  real(DP)  :: pnetwork=-9.0D40       ! /pnetwork - reactor electric power provide to the network [W].
-endtype
-
-type type_scenario_vol_ave  !    volume averaged values
-   type (type_scenario_ref)  :: te_ave  ! /te_ave - volume averaged electron temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ti_ave  ! /ti_ave - volume averaged ion temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ne_ave  ! /ne_ave - volume averaged electron density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: dne_ave_dt  ! /dne_ave_dt - time derivative of volume averaged electron density [m^-3/s]. Time-dependent.
-   type (type_scenario_ref)  :: ni_ave  ! /ni_ave - volume averaged ion density (<sum(n_k)>, k in species) [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: zeff_ave  ! /zeff_ave - volume averaged effective charge. Time-dependent.
-   type (type_scenario_ref)  :: ti_o_te_ave  ! /ti_o_te_ave - volume averaged ion temperature over electron temperature  (<Ti/Te>) []. Time-dependent.
-   type (type_scenario_ref)  :: meff_ave  ! /meff_ave - volume averaged effectice mass  (<sum(n_k * m_k)  > /  < sum(n_k)> ) []. Time-dependent.
-   type (type_scenario_ref)  :: pellet_flux  ! /pellet_flux - number of electrons fuelling  the plasma every second coming from pellet injection [s^-1]. Time-dependent.
-  real(DP),pointer  :: nions_ave(:) => null()     ! /nions_ave - volume averaged ions densities (vector, one element per ion species) [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: omega_ave  ! /omega_ave - bulk volume average toroidal rotation velocity (whole plasma) [rad/s]. Time-dependent.
-endtype
-
-type type_scenario_references  !    References
-   type (type_scenario_ref)  :: plh  ! /plh - Lower hybrid power [W]. Time-dependent.
-   type (type_scenario_ref)  :: picrh  ! /picrh - Ion cyclotron resonnance heating power [W]. Time-dependent.
-   type (type_scenario_ref)  :: pecrh  ! /pecrh - electron cyclotron resonnance heating power [W]. Time-dependent.
-   type (type_scenario_ref)  :: pnbi  ! /pnbi - neutral beam injection power [W]. Time-dependent.
-   type (type_scenario_ref)  :: ip  ! /ip - Plasma current [A]. Time-dependent.
-   type (type_scenario_ref)  :: bvac_r  ! /bvac_r - Vacuum field times radius in the toroidal field magnet [T.m]. Time-dependent.
-   type (type_scenario_ref)  :: zeffl  ! /zeffl - line averaged effective charge []. Time-dependent.
-   type (type_scenario_ref)  :: nbar  ! /nbar - line averaged electron density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: xecrh  ! /xecrh - position of maximum  (normalized rho coordinate) of electron cyclotron resonnance heating power []. Time-dependent.
-   type (type_scenario_ref)  :: pol_flux  ! /pol_flux - separatrix poloidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: enhancement  ! /enhancement - energy enhancement factor []. Time-dependent.
-   type (type_scenario_ref)  :: isotopic  ! /isotopic - ratio between tritium  and deuterium density (for burning plasma)  []. Time-dependent.
-   type (type_scenario_ref)  :: nbi_td_ratio  ! /nbi_td_ratio - ratio between tritium  and deuterium power in neutral beam injection  []. Time-dependent.
-endtype
-
-type type_scenario_sol  !    SOL characteristic  (@ LCMS)
-   type (type_scenario_ref)  :: l_te_sol  ! /l_te_sol - electron temperature radial decay length [m]. Time-dependent.
-   type (type_scenario_ref)  :: l_ti_sol  ! /l_ti_sol - ion temperature  radial decay length [m]. Time-dependent.
-   type (type_scenario_ref)  :: l_ne_sol  ! /l_ne_sol - electron density radial decay length [m]. Time-dependent.
-   type (type_scenario_ref)  :: l_ni_sol  ! /l_ni_sol - ion density  radial decay length [m]. Time-dependent.
-   type (type_scenario_ref)  :: l_qe_sol  ! /l_qe_sol - electron heat flux radial decay length [m]. Time-dependent.
-   type (type_scenario_ref)  :: l_qi_sol  ! /l_qi_sol - ion  heat flux radial decay length [m]. Time-dependent.
-   type (type_scenario_ref)  :: p_rad_sol  ! /p_rad_sol - radiative power of the SOL [W]. Time-dependent.
-  real(DP),pointer  :: gaz_puff(:) => null()     ! /gaz_puff - gaz puff flux for each ion species [s^-1]. Time-dependent.
-endtype
-
-type type_scenario_pedestal  !    Values at the top of the H-mode pedestal
-   type (type_scenario_ref)  :: te_ped  ! /te_ped - pedestal electron temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ti_ped  ! /ti_ped - pedestal ion temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ne_ped  ! /ne_ped - pedestal electron density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: ni_ped  ! /ni_ped - pedestal ion density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: psi_ped  ! /psi_ped - pedestal poloidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: phi_ped  ! /phi_ped - pedestal toroidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: rho_ped  ! /rho_ped - top pedestal value of internal simulator coordinate [m]. Time-dependent.
-   type (type_scenario_ref)  :: q_ped  ! /q_ped - top pedestal safety factor value []. Time-dependent.
-   type (type_scenario_ref)  :: pressure_ped  ! /pressure_ped - top pedestal thermal pressure (n_e * T_e  + n_i * T_i) [Pa]. Time-dependent.
-   type (type_scenario_ref)  :: vtor_ped  ! /vtor_ped - top pedestal value of rotation velocity of selected impurity [m/s]. Time-dependent.
-endtype
-
-type type_scenario_ninety_five  !    values at 95% of poloidal flux
-   type (type_scenario_ref)  :: q_95  ! /q_95 - safety factor value  @ 95 % of poloidal flux span []. Time-dependent.
-   type (type_scenario_ref)  :: elong_95  ! /elong_95 - plasma elongation  @ 95 % of poloidal flux span []. Time-dependent.
-   type (type_scenario_ref)  :: tria_95  ! /tria_95 - averaged plasma triangularity  @ 95 % of poloidal flux span []. Time-dependent.
-   type (type_scenario_ref)  :: tria_up_95  ! /tria_up_95 - upper plasma triangularity  @ 95 % of poloidal flux span []. Time-dependent.
-   type (type_scenario_ref)  :: tria_lo_95  ! /tria_lo_95 - lower plasma triangularity  @ 95 % of poloidal flux span []. Time-dependent.
-   type (type_scenario_ref)  :: te_95  ! /te_95 - electron temperature  @ 95 % of poloidal flux [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ti_95  ! /ti_95 - ion temperature  @ 95 % of poloidal flux [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ne_95  ! /ne_95 - electron density  @ 95 % of poloidal flux [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: ni_95  ! /ni_95 - ion density  @ 95 % of poloidal flux [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: phi_95  ! /phi_95 - toroidal flux  @ 95 % of poloidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: rho_95  ! /rho_95 -  value of internal simulator coordinate  @ 95 % of poloidal flux [m]. Time-dependent.
-   type (type_scenario_ref)  :: vtor_95  ! /vtor_95 - rotation velocity of selected impurity   @ 95 % of poloidal flux [m/s]. Time-dependent.
-endtype
-
-type type_scenario_neutron  !    neutron flux for DD and DT reactions
-   type (type_scenario_ref)  :: ndd_tot  ! /ndd_tot - total neutron flux coming  from DD reactions [Hz]. Time-dependent.
-   type (type_scenario_ref)  :: ndd_th  ! /ndd_th - neutron flux coming  from thermal  DD reactions [Hz]. Time-dependent.
-   type (type_scenario_ref)  :: ndd_nbi_th  ! /ndd_nbi_th - neutron flux coming  from beam/plasma  DD reactions [Hz]. Time-dependent.
-   type (type_scenario_ref)  :: ndd_nbi_nbi  ! /ndd_nbi_nbi - neutron flux coming  from beam/beam  DD reactions [Hz]. Time-dependent.
-   type (type_scenario_ref)  :: ndt_tot  ! /ndt_tot - total neutron flux coming  from DT reactions [Hz]. Time-dependent.
-   type (type_scenario_ref)  :: ndt_th  ! /ndt_th - neutron flux coming  from thermal DT reactions [Hz]. Time-dependent.
-endtype
-
-type type_scenario_line_ave  !    line averaged value
-   type (type_scenario_ref)  :: ne_line  ! /ne_line - line averaged electron density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: zeff_line  ! /zeff_line - line averaged effective charge. Time-dependent.
-   type (type_scenario_ref)  :: ne_zeff_line  ! /ne_zeff_line - line averaged electron density * Zeff . Time-dependent.
-   type (type_scenario_ref)  :: dne_line_dt  ! /dne_line_dt - time derivative of line averaged electron density [m^-3/s]. Time-dependent.
-endtype
-
-type type_scenario_lim_div_wall  !    values on the plate of divertor or on the limitor or on the wall (@ LCMS)
-   type (type_scenario_ref)  :: te_lim_div  ! /te_lim_div - limiter/divertor electron temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ti_lim_div  ! /ti_lim_div - limiter/divertor ion temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ne_lim_div  ! /ne_lim_div - limiter/divertor electron density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: ni_lim_div  ! /ni_lim_div - limiter/divertor ion density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: p_peak_div  ! /p_peak_div - peak power on  divertor [W]. Time-dependent.
-   type (type_scenario_ref)  :: surf_temp  ! /surf_temp - limiter surface or divertor plate temperature [K]. Time-dependent.
-   type (type_scenario_ref)  :: p_lim_div  ! /p_lim_div - Power flux on limiter or divertor plate [W]. Time-dependent.
-   type (type_scenario_ref)  :: p_rad_div  ! /p_rad_div - radiative power in the divertor zone [W]. Time-dependent.
-   type (type_scenario_ref)  :: wall_temp  ! /wall_temp - wall temperature [K]. Time-dependent.
-   type (type_scenario_ref)  :: wall_state  ! /wall_state - saturation state of the wall (0 = completly pumping wall, 1 = competely saturate wall) []. Time-dependent.
-   type (type_scenario_ref)  :: detach_state  ! /detach_state - plasma detachement state (0= attach plasma, 1 = completely detach plasma) []. Time-dependent.
-  real(DP),pointer  :: pump_flux(:) => null()     ! /pump_flux - flux pump out for each ion species [s^-1]. Time-dependent.
-endtype
-
-type type_scenario_itb  !    Values characteristics of the Internal Transport Barrier
-   type (type_scenario_ref)  :: q_min  ! /q_min - minimal value of safety factor []. Time-dependent.
-   type (type_scenario_ref)  :: te_itb  ! /te_itb - electron temperature @ q = q_min [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ti_itb  ! /ti_itb - ion temperature @ q = q_min [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ne_itb  ! /ne_itb - electron density  @ q = q_min [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: ni_itb  ! /ni_itb - ion density  @ q = q_min [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: psi_itb  ! /psi_itb - poloidal flux @ q = q_min [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: phi_itb  ! /phi_itb - toroidal flux @ q = q_min [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: rho_itb  ! /rho_itb - value of internal simulator coordinate @ q = q_min [m]. Time-dependent.
-   type (type_scenario_ref)  :: h_itb  ! /h_itb - energy enhancement ITB factor [m]. Time-dependent.
-   type (type_scenario_ref)  :: width_itb  ! /width_itb - width of the high pressure gradient region (on scale of rho_itb) [m]. Time-dependent.
-   type (type_scenario_ref)  :: vtor_itb  ! /vtor_itb - rotation velocity of selected impurity @ rho_itb [m/s]. Time-dependent.
-   type (type_scenario_int)  :: itb_type  ! /itb_type - itb type []. Time-dependent. Any combinaison of :0 = none; 1 = on T_i; 2 = on T_e; 4  = on n_e; 8 = reverse shear triggered; 16 = 
-endtype
-
-type type_scenario_heat_power  !    Power delivred to plasma (thermal an non thermal)
-   type (type_scenario_ref)  :: plh  ! /plh - Lower hybrid power [W]. Time-dependent.
-   type (type_scenario_ref)  :: pohmic  ! /pohmic - ohmic power (thermal species contribution only) [W]. Time-dependent.
-   type (type_scenario_ref)  :: picrh  ! /picrh - Ion cyclotron resonnance heating power [W]. Time-dependent.
-   type (type_scenario_ref)  :: pecrh  ! /pecrh - electron cyclotron resonnance heating power [W]. Time-dependent.
-   type (type_scenario_ref)  :: pnbi  ! /pnbi - neutral beam injection power [W]. Time-dependent.
-   type (type_scenario_ref)  :: pnbi_co_cur  ! /pnbi_co_cur - neutral beam injection power injeted in co-current direction [W]. Time-dependent.
-   type (type_scenario_ref)  :: pnbi_counter  ! /pnbi_counter - neutral beam injection power injeted in counter-current direction [W]. Time-dependent.
-   type (type_scenario_ref)  :: plh_th  ! /plh_th - lower hybrid power deposited on thermal electrons [W]. Time-dependent.
-   type (type_scenario_ref)  :: picrh_th  ! /picrh_th - ion cyclotron resonnance heating power deposited on thermal species [W]. Time-dependent.
-   type (type_scenario_ref)  :: pecrh_th  ! /pecrh_th - electron cyclotron resonnance heating power deposited on thermal electrons [W]. Time-dependent.
-   type (type_scenario_ref)  :: pnbi_th  ! /pnbi_th - neutral beam injection power deposited on thermal species [W]. Time-dependent.
-   type (type_scenario_ref)  :: ploss_icrh  ! /ploss_icrh - Ion cyclotron resonnance heating power losses [W]. Time-dependent.
-   type (type_scenario_ref)  :: ploss_nbi  ! /ploss_nbi - neutral beam injection power losses (including shine-through) [W]. Time-dependent.
-   type (type_scenario_ref)  :: pbrem  ! /pbrem - Bremsstrahlung radition losses [W]. Time-dependent.
-   type (type_scenario_ref)  :: pcyclo  ! /pcyclo - cyclotron radiation losses [W]. Time-dependent.
-   type (type_scenario_ref)  :: prad  ! /prad - impurity radition losses in core plamsa , without Bremsstrahlung [W]. Time-dependent.
-   type (type_scenario_ref)  :: pdd_fus  ! /pdd_fus - fusion power due to DD reactions [W]. Time-dependent.
-   type (type_scenario_ref)  :: pei  ! /pei - power exchange between eletron and ion (equipartition) [W]. Time-dependent.
-   type (type_scenario_ref)  :: pel_tot  ! /pel_tot - total thermal electron power deposition without equipartition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pel_fus  ! /pel_fus - fusion electron power deposition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pel_icrh  ! /pel_icrh - ICRH  electron power deposition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pel_nbi  ! /pel_nbi - NBI electron power deposition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pfus_dt  ! /pfus_dt - total D-T fusion power of alpha [W]. Time-dependent.
-   type (type_scenario_ref)  :: ploss_fus  ! /ploss_fus - D-T fusion power of alpha losses  [W]. Time-dependent.
-   type (type_scenario_ref)  :: pfus_nbi  ! /pfus_nbi - NBI induce D-T fusion power of alpha  [W]. Time-dependent.
-   type (type_scenario_ref)  :: pfus_th  ! /pfus_th - alpha (from DT fusion reaction)  power deposited on thermal species [W]. Time-dependent.
-   type (type_scenario_ref)  :: padd_tot  ! /padd_tot - total additional power input including ohmic power  [W]. Time-dependent.
-   type (type_scenario_ref)  :: pion_tot  ! /pion_tot - total thermal ion power deposition without equipartition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pion_fus  ! /pion_fus - fusion ion power deposition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pion_icrh  ! /pion_icrh - ICRH  ion power deposition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pion_nbi  ! /pion_nbi - NBI  ion power deposition [W]. Time-dependent.
-   type (type_scenario_ref)  :: pioniz  ! /pioniz - power losses due to cold neutral ionization [W]. Time-dependent.
-   type (type_scenario_ref)  :: ploss  ! /ploss - plasma losses power, as define in ITER basis [W]. Time-dependent.
-   type (type_scenario_ref)  :: p_wth  ! /p_wth - thermal power input, define as tau_E * P_th = Wth [W]. Time-dependent.
-   type (type_scenario_ref)  :: p_w  ! /p_w - effective power define as tau_E  * P_w = W_tot [W]. Time-dependent.
-   type (type_scenario_ref)  :: p_l2h_thr  ! /p_l2h_thr - additionnal power crossing the LCMS; must be compare to  L->H threshold power (Ryter PPCF 2002) [W]. Time-dependent.
-   type (type_scenario_ref)  :: p_l2h_sc  ! /p_l2h_sc - threshold power given by the choosen scaling law for transition from L-mode to H-mode  [W]. Time-dependent.
-   type (type_scenario_ref)  :: p_nbi_icrh  ! /p_nbi_icrh - beam power increase due to  ICRH effects  [W]. Time-dependent.
-endtype
-
-type type_scenario_global  !     global scalar value 
-   type (type_scenario_ref)  :: ip  ! /ip - Plasma current [A]. Time-dependent.
-   type (type_scenario_ref)  :: dip_dt  ! /dip_dt - time derivative of plasma current [A/s]. Time-dependent.
-   type (type_scenario_ref)  :: beta_pol  ! /beta_pol - poloidal beta []. Time-dependent.
-   type (type_scenario_ref)  :: beta_tor  ! /beta_tor - toroidal beta []. Time-dependent.
-   type (type_scenario_ref)  :: beta_normal  ! /beta_normal - normalised beta []. Time-dependent.
-   type (type_scenario_ref)  :: li  ! /li - internal inductance (definition 3). Time-dependent.
-   type (type_scenario_ref)  :: volume  ! /volume - total plasma volume [m^3]. Time-dependent.
-   type (type_scenario_ref)  :: area_pol  ! /area_pol - area poloidal cross section [m^2]. Time-dependent.
-   type (type_scenario_ref)  :: area_ext  ! /area_ext - external plasma surface [m^2]. Time-dependent.
-   type (type_scenario_ref)  :: len_sepa  ! /len_sepa - length of the separatrix [m]. Time-dependent.
-   type (type_scenario_ref)  :: beta_pol_th  ! /beta_pol_th - poloidal beta, thermal contribution []. Time-dependent.
-   type (type_scenario_ref)  :: beta_tor_th  ! /beta_tor_th - toroidal beta, thermal contribution []. Time-dependent.
-   type (type_scenario_ref)  :: beta_n_th  ! /beta_n_th - normalised beta, thermal contribution []. Time-dependent.
-   type (type_scenario_ref)  :: disruption  ! /disruption - flag for disruption (set to 1 for disruption, oterwise equal 0) []. Time-dependent.
-   type (type_scenario_ref)  :: mode_h  ! /mode_h - confinement mode verus time:  0 = L-mode et 1 = H-mode []. Time-dependent.
-   type (type_scenario_ref)  :: s_alpha  ! /s_alpha - total number of alpha fusion  particules from D-T ractions  per second [s^-1]. Time-dependent.
-endtype
-
-type type_scenario_energy  !    plasma energy content
-   type (type_scenario_ref)  :: w_tot  ! /w_tot - total plasma energy [J]. Time-dependent.
-   type (type_scenario_ref)  :: w_b_pol  ! /w_b_pol - poloidal field energy of  the plasma [J]. Time-dependent.
-   type (type_scenario_ref)  :: w_dia  ! /w_dia - 3/2 perpendicular plasma energy [J]. Time-dependent.
-   type (type_scenario_ref)  :: dwdia_dt  ! /dwdia_dt - time derivative of Wdia [W]. Time-dependent.
-   type (type_scenario_ref)  :: w_b_tor_pla  ! /w_b_tor_pla - toroidal magnetic plasma energy  [J]. Time-dependent.
-   type (type_scenario_ref)  :: w_th  ! /w_th - thermal plasma energy [J]. Time-dependent.
-   type (type_scenario_ref)  :: dwtot_dt  ! /dwtot_dt - time derivative of total plasma energy [W]. Time-dependent.
-   type (type_scenario_ref)  :: dwbpol_dt  ! /dwbpol_dt - time derivative of plasma poloidal field energy [W]. Time-dependent.
-   type (type_scenario_ref)  :: dwbtorpla_dt  ! /dwbtorpla_dt - time derivative of toroidal magnetic plasma energy  [W]. Time-dependent.
-   type (type_scenario_ref)  :: dwth_dt  ! /dwth_dt - time derivative of thermal plasma energy [W]. Time-dependent.
-   type (type_scenario_ref)  :: esup_icrhtot  ! /esup_icrhtot - total suprathermal energy of fast ions accelerated  by ICRH [J]. Time-dependent.
-   type (type_scenario_ref)  :: esup_icrhper  ! /esup_icrhper - perpendicular part of suprathermal energy of fast ions accelerated  by ICRH [J]. Time-dependent.
-   type (type_scenario_ref)  :: esup_nbitot  ! /esup_nbitot - total suprathermal energy of fast ions from NBI ionisation [J]. Time-dependent.
-   type (type_scenario_ref)  :: esup_nbiperp  ! /esup_nbiperp - perpendicular part of suprathermal energy of fast ions from NBI ionisation [J]. Time-dependent.
-   type (type_scenario_ref)  :: esup_lhcd  ! /esup_lhcd - total suprathermal energy of fast electron from LHCD [J]. Time-dependent.
-   type (type_scenario_ref)  :: esup_alpha  ! /esup_alpha - total suprathermal energy of fast alpha particules [J]. Time-dependent.
-endtype
-
-type type_scenario_edge  !    edge value (@ LCMS)
-   type (type_scenario_ref)  :: te_edge  ! /te_edge - edge electron temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ti_edge  ! /ti_edge - edge ion temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ne_edge  ! /ne_edge - edge electron density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: ni_edge  ! /ni_edge - edge ion density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: psi_edge  ! /psi_edge - edge  poloidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: phi_edge  ! /phi_edge - edge  toroidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: rho_edge  ! /rho_edge - edge value of internal simulator coordinate [m]. Time-dependent.
-   type (type_scenario_ref)  :: drho_edge_dt  ! /drho_edge_dt - time derivative of edge value of internal simulator coordinate [m/s]. Time-dependent.
-   type (type_scenario_ref)  :: q_edge  ! /q_edge - edge or effective  safety factor value []. Time-dependent.
-   type (type_scenario_ref)  :: neutral_flux  ! /neutral_flux - number of cold neutral (in equivalent electron for Z >1) that input in  plasma at the edge every second coming from recycling and 
-   type (type_scenario_ref)  :: phi_plasma  ! /phi_plasma - contribution of the plasma to the toroidal flux (used for toroidal coils heat load computation) [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: vtor_edge  ! /vtor_edge - rotation velocity of selected impurity on the separatrix [m/s]. Time-dependent.
-endtype
-
-type type_scenario_currents  !    data related to current sources and current diffusion
-   type (type_scenario_ref)  :: RR  ! /RR - plasma resistivity [ohm]. Time-dependent.
-   type (type_scenario_ref)  :: i_align  ! /i_align - current drive alignment quality parameter (1 = good , 0 = bad). Time-dependent.
-   type (type_scenario_ref)  :: i_boot  ! /i_boot - bootstrap current [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_cd_tot  ! /i_cd_tot - total current drive [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_eccd  ! /i_eccd - Electron Cyclotron current drive [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_fast_ion  ! /i_fast_ion - fast ions bootstrap like current drive  (i.e. fast alpha) [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_fwcd  ! /i_fwcd - Fast Wave current drive [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_lhcd  ! /i_lhcd - Lower Hybrid current drive [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_nbicd  ! /i_nbicd - Neutral Beam Injection current drive  [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_ni_tot  ! /i_ni_tot - total non inductive current  [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_ohm  ! /i_ohm - ohmic current  [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_par  ! /i_par - total plasma current (projected on B : <J.B>/B0)   [A]. Time-dependent.
-   type (type_scenario_ref)  :: i_runaway  ! /i_runaway - runaway current  [A]. Time-dependent.
-   type (type_scenario_ref)  :: v_loop  ! /v_loop - loop voltage @ LCMS / LFS , equatorial point  [V]. Time-dependent.
-   type (type_scenario_ref)  :: v_meas  ! /v_meas - loop voltage measured on a  coil   [V]. Time-dependent.
-endtype
-
-type type_scenario_confinement  !    characteristic confinement times
-   type (type_scenario_ref)  :: tau_e  ! /tau_e - thermal energy confinement time [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_l_sc  ! /tau_l_sc - confinement time given by the selected L-mode scaling law [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_h_sc  ! /tau_h_sc - confinement time given by the selected H-mode scaling law [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_he  ! /tau_he - Helium ashes confinement time [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_e_ee  ! /tau_e_ee - electron energy confimenent time [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_e_ii  ! /tau_e_ii - ion energy confinement time [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_e_ei  ! /tau_e_ei - energy equipartition characteristic time [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_cur_diff  ! /tau_cur_diff - characteristic time for current diffusion  [s]. Time-dependent.
-   type (type_scenario_ref)  :: tau_i_rol  ! /tau_i_rol - characteristic time for current decrease in tokamak equivalent R/L circuit [s]. Time-dependent.
-endtype
-
-type type_scenario_configuration  !    Strings describing the tokamak configuration
-   type (type_scenario_int)  :: config  ! /config - plasma configuration (limiter/divertor ...) []. Time-dependent. Possible values : 0 = undetermined; 1 = poloidal limiter (ring); 2
-  character(len=132), dimension(:), pointer ::lmode_sc => null()       ! /lmode_sc - name of the L-mode scaling law. String.
-  character(len=132), dimension(:), pointer ::hmode_sc => null()       ! /hmode_sc - name of the H-mode scaling law. String.
-  character(len=132), dimension(:), pointer ::core_sc => null()       ! /core_sc - name of the core plasma  energy scaling law. String.
-  character(len=132), dimension(:), pointer ::pedestal_sc => null()       ! /pedestal_sc - name of the  pedestal energy scaling law. String.
-  character(len=132), dimension(:), pointer ::helium_sc => null()       ! /helium_sc - name of the  helium confinement time scaling law. String.
-  character(len=132), dimension(:), pointer ::impurity_sc => null()       ! /impurity_sc - name of the impurities confinement time scaling law
-  character(len=132), dimension(:), pointer ::l2h_sc => null()       ! /l2h_sc - name of the  L-mode to H-mode power threshold scaling law. String.
-  character(len=132), dimension(:), pointer ::tor_rot_sc => null()       ! /tor_rot_sc - name of the toroidal spontaneous rotation  scaling law. String.
-  character(len=132), dimension(:), pointer ::wall_mat => null()       ! /wall_mat - chemical compostion of the wall. String.
-  character(len=132), dimension(:), pointer ::evap_mat => null()       ! /evap_mat - chemical compostion evaporated wall conditioning material. String.
-  character(len=132), dimension(:), pointer ::lim_mat => null()       ! /lim_mat - chemical compostion of the limiter. String.
-  character(len=132), dimension(:), pointer ::div_mat => null()       ! /div_mat - chemical compostion of the divertor
-  character(len=132), dimension(:), pointer ::coordinate => null()       ! /coordinate - name/definition of the internal coordinate of the simulator that are given by the data named rho
-   type (type_scenario_ref)  :: ecrh_freq  ! /ecrh_freq - ECRH frequency [Hz]. Time-dependent.
-   type (type_scenario_ref)  :: ecrh_loc  ! /ecrh_loc - position of maximum ECRH deposition on scale of rho [rho]. Time-dependent.
-   type (type_scenario_int)  :: ecrh_mode  ! /ecrh_mode - polarisation of ecrh wave (0 = O mode, 1 = X mode) []. Time-dependent.
-   type (type_scenario_ref)  :: ecrh_tor_ang  ! /ecrh_tor_ang - toroidal angle of ECRH at resonance  [rad] Time-dependent.
-   type (type_scenario_ref)  :: ecrh_pol_ang  ! /ecrh_pol_ang - poloidal angle of ECRH resonance positon (0= LFS, pi/2 = top, -pi/2 = down, pi = HFS)  [rad]. Time-dependent.
-   type (type_scenario_int)  :: ecrh_harm  ! /ecrh_harm - harmonic number of the apsorbed ecrh wave []. Time-dependent.
-   type (type_scenario_ref)  :: enbi  ! /enbi - energy of the neutral beam [eV]. Time-dependent.
-   type (type_scenario_ref)  :: r_nbi  ! /r_nbi - Major radius of tengance of NBI [m]. Time-dependent.
-   type (type_scenario_int)  :: grad_b_drift  ! /grad_b_drift - direction of ion grad-B drift (1= to lower divertor, -1 = from lower divertor)  []. Time-dependent.
-   type (type_scenario_ref)  :: icrh_freq  ! /icrh_freq - ICRH frequency [Hz]. Time-dependent.
-  character(len=132), dimension(:), pointer ::icrh_scheme => null()       ! /icrh_scheme - icrh scheme either : H_min_1; He3_min; T_harm_2; FW; FW_CD; FW_CCD
-   type (type_scenario_ref)  :: icrh_phase  ! /icrh_phase - ICRH antenna phasing [rad]. Time-dependent.
-   type (type_scenario_ref)  :: LH_freq  ! /LH_freq - LHCD frequency [Hz]. Time-dependent.
-   type (type_scenario_ref)  :: LH_npar  ! /LH_npar - LHCD parallel indice []. Time-dependent.
-   type (type_scenario_ref)  :: pellet_ang  ! /pellet_ang - pellet injection positon (0= LFS, pi/2 = top, -pi/2 = down, pi = HFS)  [rad]. Time-dependent.
-   type (type_scenario_ref)  :: pellet_v  ! /pellet_v - pellet injection velocity [m/s]. Time-dependent.
-   type (type_scenario_ref)  :: pellet_nba  ! /pellet_nba - initial number of atoms in pellet  []. Time-dependent.
-endtype
-
-type type_scenario_composition  !    Plasma composition (description of ion species).
-  real(DP),pointer  :: amn(:) => null()     ! /amn - Atomic mass number (lumped ions are allowed); Vector (nion)
-  real(DP),pointer  :: zn(:) => null()     ! /zn - Nuclear charge (lumped ions are allowed); Vector (nion)
-  real(DP),pointer  :: zion(:) => null()     ! /zion - Ion charge (of the dominant ionisation state; lumped ions are allowed); Vector (nion)
-  integer,pointer  :: imp_flag(:) => null()      ! /imp_flag - Multiple charge state calculation flag : 0-Only one charge state is considered; 1-Multiple charge state are considered and are des
-  integer,pointer  :: rot_imp_flag(:) => null()      ! /rot_imp_flag - set to 1 for the impurity corresponding at the given toroidal rotation, otherwise = 0
-  real(DP),pointer  :: pellet_amn(:) => null()     ! /pellet_amn - Atomic mass number (for pellet injector); Vector (nion)
-  real(DP),pointer  :: pellet_zn(:) => null()     ! /pellet_zn - Nuclear charge (pellet injector); Vector (nion)
-  real(DP),pointer  :: nbi_amn(:) => null()     ! /nbi_amn - Atomic mass number (for neutral beam injection); Vector (nion)
-  real(DP),pointer  :: nbi_zn(:) => null()     ! /nbi_zn - Nuclear charge (for neutral beam injection); Vector (nion)
-endtype
-
-type type_scenario_centre  !    central values of the profiles (at magnetic axis)
-   type (type_scenario_ref)  :: te0  ! /te0 - central electron temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ti0  ! /ti0 - central ion temperature [eV]. Time-dependent.
-   type (type_scenario_ref)  :: ne0  ! /ne0 - central electron density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: ni0  ! /ni0 - central ion density [m^-3]. Time-dependent.
-   type (type_scenario_ref)  :: shift0  ! /shift0 - central value of Shafranov shift [m]. Time-dependent.
-   type (type_scenario_ref)  :: psi0  ! /psi0 - pedestal poloidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: phi0  ! /phi0 - central toroidal flux [Wb]. Time-dependent.
-   type (type_scenario_ref)  :: q0  ! /q0 - central safety factor value []. Time-dependent.
-   type (type_scenario_ref)  :: Rmag  ! /Rmag - radius of magnetic axis [R]. Time-dependent.
-   type (type_scenario_ref)  :: Zmag  ! /Zmag - Z coordinate of magnetic axis [R]. Time-dependent.
-   type (type_scenario_ref)  :: vtor_0  ! /vtor_0 - central rotation velocity of selected impurity [m/s]. Time-dependent.
-endtype
-
-type type_scenario  !    
-  type (type_datainfo) :: datainfo  ! /scenario/datainfo - 
-   type (type_scenario_centre)  :: centre  ! /scenario/centre - central values of the profiles (at magnetic axis)
-   type (type_scenario_composition)  :: composition  ! /scenario/composition - Plasma composition (description of ion species).
-   type (type_scenario_configuration)  :: configs  ! /scenario/configs - Strings describing the tokamak configuration
-   type (type_scenario_confinement)  :: confinement  ! /scenario/confinement - characteristic confinement times
-   type (type_scenario_currents)  :: currents  ! /scenario/currents - data related to current sources and current diffusion
-   type (type_scenario_edge)  :: edge  ! /scenario/edge - edge value (@ LCMS)
-   type (type_scenario_energy)  :: energy  ! /scenario/energy - plasma energy content
-  type (type_eqgeometry) :: eqgeometry  ! /scenario/eqgeometry - 
-   type (type_scenario_global)  :: global_param  ! /scenario/global_param - Global scalar values
-   type (type_scenario_heat_power)  :: heat_power  ! /scenario/heat_power - Power delivred to plasma (thermal and non thermal)
-   type (type_scenario_itb)  :: itb  ! /scenario/itb - Values characteristics of the Internal Transport Barrier
-   type (type_scenario_lim_div_wall)  :: lim_div_wall  ! /scenario/lim_div_wall - values on the plate of divertor or on the limitor or on the wall (@ LCMS)
-   type (type_scenario_line_ave)  :: line_ave  ! /scenario/line_ave - line averaged value
-   type (type_scenario_neutron)  :: neutron  ! /scenario/neutron - neutron flux for DD and DT reactions
-   type (type_scenario_ninety_five)  :: ninety_five  ! /scenario/ninety_five - values at 95% of poloidal flux
-   type (type_scenario_pedestal)  :: pedestal  ! /scenario/pedestal - Values at the top of the H-mode pedestal
-   type (type_scenario_references)  :: references  ! /scenario/references - References
-   type (type_scenario_reactor)  :: reactor  ! /scenario/reactor - reactor data (such as electricity cost ...)
-   type (type_scenario_sol)  :: sol  ! /scenario/sol - SOL characteristic  (@ LCMS)
-   type (type_scenario_vol_ave)  :: vol_ave  ! /scenario/vol_ave - volume averaged value
-  type (type_codeparam) :: codeparam  ! /scenario/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /scenario/time - Time [s]; Time-dependent; Scalar
-endtype
-
-! ***********  Include summary.xsd
-type type_summary  !    
-  type (type_datainfo) :: datainfo  ! /summary/datainfo - 
-   type (type_reduced)  :: ip  ! /summary/ip - Plasma current [A]
-   type (type_reduced)  :: bvac_r  ! /summary/bvac_r - Vacuum field times radius in the toroidal field magnet [T.m];
-   type (type_reduced)  :: geom_axis_r  ! /summary/geom_axis_r - Major radius of the geometric axis [m]
-   type (type_reduced)  :: a_minor  ! /summary/a_minor - Minor radius of the plasma boundary [m]
-   type (type_reduced)  :: elongation  ! /summary/elongation - Elongation of the plasma boundary [m]
-   type (type_reduced)  :: tria_lower  ! /summary/tria_lower - Lower triangularity of the plasma boundary [m]
-   type (type_reduced)  :: tria_upper  ! /summary/tria_upper - Upper triangularity of the plasma boundary [m]
-   type (type_reduced)  :: tev  ! /summary/tev - volume averaged electron temperature [eV]
-   type (type_reduced)  :: tiv  ! /summary/tiv - volume averaged ion temperature [eV]
-   type (type_reduced)  :: nev  ! /summary/nev - volume averaged electron density [m^-3]
-   type (type_reduced)  :: zeffv  ! /summary/zeffv - volume averaged effective charge
-   type (type_reduced)  :: beta_pol  ! /summary/beta_pol - poloidal beta
-   type (type_reduced)  :: beta_tor  ! /summary/beta_tor - toroidal beta
-   type (type_reduced)  :: beta_normal  ! /summary/beta_normal - normalised beta
-   type (type_reduced)  :: li  ! /summary/li - internal inductance
-   type (type_reduced)  :: volume  ! /summary/volume - total plasma volume [m^3]
-   type (type_reduced)  :: area  ! /summary/area - area poloidal cross section [m^2]
-   type (type_reduced)  :: main_ion1_z  ! /summary/main_ion1_z - Atomic number of the main ion #1 [a.m.u.]
-   type (type_reduced)  :: main_ion1_a  ! /summary/main_ion1_a - Atomic mass of the main ion #1 [a.m.u.]
-   type (type_reduced)  :: main_ion2_z  ! /summary/main_ion2_z - Atomic number of the main ion #2 [a.m.u.]
-   type (type_reduced)  :: main_ion2_a  ! /summary/main_ion2_a - Atomic mass of the main ion #2 [a.m.u.]
-   type (type_reduced)  :: impur1_z  ! /summary/impur1_z - Atomic number of the impurity #1 [a.m.u.]
-   type (type_reduced)  :: impur1_a  ! /summary/impur1_a - Atomic mass of the impurity #1 [a.m.u.]
-  real(DP)  :: time=-9.0D40       ! /summary/time - Time at which the 0D variables of the summary are taken [s]. Scalar
-endtype
-
-! ***********  Include vessel.xsd
-type type_vessel  !    
-  type (type_datainfo) :: datainfo  ! /vessel/datainfo - 
-   type (type_rz1D)  :: position  ! /vessel/position - Vessel wall outline (list of R,Z co-ordinates) [m]; Vector (npoints)
-endtype
-
-! ***********  Include waves.xsd
-type type_theta_info  !    
-  integer,pointer  :: angl_type(:) => null()      ! /theta_info/angl_type - Type of poloidal angle: 1 : same as the poloidal angle in the equlibrium cpo; 2 : normal polar angle; 3 : other. If option three a
-  real(DP),pointer  :: th2th_pol(:,:) => null()     ! /theta_info/th2th_pol - Transformation from theta to a ploar theta; Matrix (nfreq, max_ntheta)
-endtype
-
-type type_waves_2dgrid  !    Grid points in 2D
-  real(DP),pointer  :: psin(:,:) => null()     ! /psin - Grid points in normalized poloidal flux function; Matrix(nfreq, max_npsin)
-  real(DP),pointer  :: theta(:,:) => null()     ! /theta - Grid points of the ploidal angle; Matrix(nfreq, max_ntheta)
-  integer,pointer  :: npsin(:) => null()      ! /npsin - Number of psin points in the grid for each frequency. Vector (nfreq).
-  integer,pointer  :: ntheta(:) => null()      ! /ntheta - Number of theta points in the grid for each frequency. Vector (nfreq).
-   type (type_rz3D)  :: rz_position  ! /rz_position - R (major radius) and Z (altitude) of grid points; Array 3D (nfreq, max_npsin, max_ntheta)
-  type (type_theta_info) :: theta_info  ! /theta_info - Information on the poloidal angle theta.
-endtype
-
-type type_waves_global_param  !    Global wave deposition parameters
-  real(DP),pointer  :: frequency(:) => null()     ! /frequency - Wave frequency [Hz]; Time-dependent; Vector (nfreq)
-  character(len=132), dimension(:), pointer ::name => null()       ! /name - Antenna name, Vector of strings (nfreq)
-  character(len=132), dimension(:), pointer ::type => null()       ! /type - Wave type (LH, EC, IC, ...), Vector of strings (nfreq)
-  integer,pointer  :: nntor(:) => null()      ! /nntor - Number of toroidal mode numbers for each frequency; Vector (nfreq)
-  integer,pointer  :: ntor(:,:) => null()     ! /ntor - Toroidal mode numbers; Time dependent; Matrix (nfreq, max_nntor)
-  integer,pointer  :: f_assumption(:,:) => null()     ! /f_assumption - Assumption on the functions distribution used by the wave solver to calculate the power deposition : 0 = Maxwellian (linear absorp
-  real(DP),pointer  :: power_tot(:) => null()     ! /power_tot - Total absorbed wave power for each frequency [W]; Time-dependent; Vector (nfreq)
-  real(DP),pointer  :: p_frac_ntor(:,:) => null()     ! /p_frac_ntor - Fraction of wave power per toroidal mode number; Time-dependent; Matrix (nfreq, max_nntor)
-  real(DP),pointer  :: power_i(:,:) => null()     ! /power_i - Wave power absorbed by an ion species [W]; Time-dependent; Matrix (nfreq,nion)
-  real(DP),pointer  :: power_e(:) => null()     ! /power_e - Wave power absorbed by the electrons [W]; Time-dependent; Vector (nfreq)
-  real(DP),pointer  :: power_i_ntor(:,:,:) => null()     ! /power_i_ntor - Wave power absorbed by an ion species per toroidal mode number [W]; Time-dependent; Array 3D (nfreq,max_nntor,nion)
-  real(DP),pointer  :: power_e_ntor(:,:) => null()     ! /power_e_ntor - Wave power absorbed by the electrons per toroidal mode number [W]; Time-dependent; Matrix (nfreq, max_nntor)
-  integer,pointer  :: code_type(:) => null()      ! /code_type - Type of wave deposition code for a given frequency: 1=beam/ray tracing; 2=full wave; Vector(nfreq)
-  integer,pointer  :: freq_point(:) => null()      ! /freq_point - Pointer to the frequency position in either the beamtracing or full wave branch for each frequency (the branch depends on code_typ
-endtype
-
-type type_waves_dep_profiles_flux_surf_avr  !    Flux surface averaged power deposition
-  real(DP),pointer  :: powerd_tot(:,:) => null()     ! /powerd_tot - Total flux surface averaged wave power density [W/m^3]; Time-dependent; Matrix (nfreq, max_npsin)
-  real(DP),pointer  :: powerd_e(:,:) => null()     ! /powerd_e - Flux surface averaged absorbed wave power density on electrons [W/m^3]; Time-dependent; Matrix (nfreq, max_npsin) 
-  real(DP),pointer  :: powerd_i(:,:,:) => null()     ! /powerd_i - Flux surface averaged absorbed wave power density on ion species [W/m^3]; Time-dependent; Array3D (nfreq, max_npsin, nion) 
-  real(DP),pointer  :: powerd_ntor(:,:,:) => null()     ! /powerd_ntor - Flux surface averaged power density for each toroidal mode number [W/m^3]; Time-dependent; Array 3D (nfreq, max_npsin, max_nntor) 
-  real(DP),pointer  :: powerd_entor(:,:,:) => null()     ! /powerd_entor - Flux surface averaged absorbed power density for each toroidal mode number on electrons [W/m^3]; Time-dependent; Array 3D (nfreq, 
-  real(DP),pointer  :: powerd_intor(:,:,:,:) => null()     ! /powerd_intor - Flux surface averaged power density for each toroidal mode number on each ions species [W/m^3]; Time-dependent; Array4D (nfreq, ma
-endtype
-
-type type_waves_dep_profiles_volume_intgr  !    Volume integrated power deposition (power deposited inside a given flux surface)
-  real(DP),pointer  :: power_tot(:,:) => null()     ! /power_tot - Volume integrated absorbed wave power density [W]; Time-dependent; Matrix (nfreq, max_npsin) 
-  real(DP),pointer  :: power_e(:,:) => null()     ! /power_e - Volume integrated absorbed wave power density on electrons [W]; Time-dependent; Matrix (nfreq, max_npsin) 
-  real(DP),pointer  :: power_i(:,:,:) => null()     ! /power_i - Volume integrated absorbed wave power density on ion species [W]; Time-dependent; Array3D (nfreq, max_npsin, nion) 
-  real(DP),pointer  :: power_ntor(:,:,:) => null()     ! /power_ntor - Volume integrated power density for each toroidal mode number [W]; Time-dependent; Array 3D (nfreq, max_npsin, max_nntor) 
-  real(DP),pointer  :: power_e_ntor(:,:,:) => null()     ! /power_e_ntor - Volume integrated power density for each toroidal mode number [W]; Time-dependent; Array 3D (nfreq, max_npsin, max_nntor) 
-  real(DP),pointer  :: power_i_ntor(:,:,:,:) => null()     ! /power_i_ntor - Volume integrated power density for each toroidal mode number on each ions species [W]; Time-dependent; Array4D (nfreq, max_npsin,
-  real(DP),pointer  :: lin_curr_dr(:,:,:) => null()     ! /lin_curr_dr - Result of linear electron current drive calculation for each toroidal mode number (note: not consistent with other sources of curr
-endtype
-
-type type_waves_dep_profiles_two_dim  !    2D power deposition
-  real(DP),pointer  :: powerd_tot(:,:,:) => null()     ! /powerd_tot - Total wave power density; Time-dependent [W/m^3]; Array 3D (nfreq, max_npsin, max_ntheta)
-  real(DP),pointer  :: powerd_e(:,:,:) => null()     ! /powerd_e - Absorbed wave power density on electrons [W/m^3]; Time-dependent; Array3D (nfreq, max_npsin, max_ntheta) 
-  real(DP),pointer  :: powerd_i(:,:,:,:) => null()     ! /powerd_i - Absorbed wave power density on ion species [W/m^3]; Time-dependent; Array4D (nfreq, max_npsin, max_ntheta, nion) 
-  real(DP),pointer  :: powerd_ntor(:,:,:,:) => null()     ! /powerd_ntor - Absorbed power density for each toroidal mode number [W/m^3]; Time-dependent; Array 4D (nfreq, max_npsin, max_ntheta, max_nntor) 
-  real(DP),pointer  :: powerd_entor(:,:,:,:) => null()     ! /powerd_entor - Absorbed power density for each toroidal mode number on electrons [W/m^3]; Time-dependent; Array 4D (nfreq, max_npsin, max_ntheta,
-  real(DP),pointer  :: powerd_intor(:,:,:,:,:) => null()     ! /powerd_intor - Absorbed power density for each toroidal mode number on each ions species [W/m^3]; Time-dependent; Array5D (nfreq, max_npsin, max_
-  real(DP),pointer  :: powerd_iharm(:,:,:,:,:) => null()     ! /powerd_iharm - Power density absorbed by an ion species for each toroidal mode numer at a given harmonic resonance ; Time-dependent (W/m^3); Arra
-endtype
-
-type type_waves_dep_profiles  !    Profiles of wave deposition quantities
-   type (type_waves_2dgrid)  :: grid  ! /grid - Grid points in 2D
-   type (type_waves_dep_profiles_volume_intgr)  :: volume_intgr  ! /volume_intgr - Volume integrated quantities.
-   type (type_waves_dep_profiles_flux_surf_avr)  :: flux_surf_av  ! /flux_surf_av - Flux surface averaged quantities
-   type (type_waves_dep_profiles_two_dim)  :: profiles_2d  ! /profiles_2d - 2D (in space) quantities
-endtype
-
-type type_waves_rtwavevector  !    Ray/beam wave vector
-  real(DP),pointer  :: kr(:,:,:) => null()     ! /kr - Ray/beam wave vector in the major radius direction [m-1], Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints
-  real(DP),pointer  :: kz(:,:,:) => null()     ! /kz - Ray/beam wave vector in the vertical direction [m], Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Tim
-  real(DP),pointer  :: npar(:,:,:) => null()     ! /npar - Ray/beam parallel refractive index, Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-dependent
-  real(DP),pointer  :: nperp(:,:,:) => null()     ! /nperp - Ray/beam perpendicular refractive index, Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-dependent
-  real(DP),pointer  :: ntor(:,:,:) => null()     ! /ntor - Ray/beam toroidal wave number, Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints/1). If var_ntor(nfreq_beam
-  integer,pointer  :: var_ntor(:) => null()      ! /var_ntor - Flag telling whether ntor is constant along the ray path (0) or varying (1). Vector if integer (nfreq_beam).
-endtype
-
-type type_waves_rtposition  !    Ray/beam position
-  real(DP),pointer  :: r(:,:,:) => null()     ! /r - Ray/beam major radius location [m], Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-dependent
-  real(DP),pointer  :: z(:,:,:) => null()     ! /z - Ray/beam vertical location [m], Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-dependent
-  real(DP),pointer  :: psin(:,:,:) => null()     ! /psin - Ray/beam normalized poloidal magnetic flux location, Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Ti
-  real(DP),pointer  :: theta(:,:,:) => null()     ! /theta - Ray/beam poloidal angle location [rd], Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). PRECISE THE DEFI
-  real(DP),pointer  :: phi(:,:,:) => null()     ! /phi - Ray/beam toroidal angle location [rd], Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-dependent
-endtype
-
-type type_polarization  !    
-  real(DP),pointer  :: epol_p(:,:,:) => null()     ! /waves/beamtracing/polarization/epol_p - Electric field polarization vector in the p rotating coordinates, Array (3D) of double precision real (nfreq_beam, max_nbeams, max
-  real(DP),pointer  :: epol_m(:,:,:) => null()     ! /waves/beamtracing/polarization/epol_m - Electric field polarization vector in the m rotating coordinates, Array (3D) of double precision real (nfreq_beam, max_nbeams, max
-  real(DP),pointer  :: epol_par(:,:,:) => null()     ! /waves/beamtracing/polarization/epol_par - Electric field polarization vector in the magnetic field direction, Array (3D) of double precision real (nfreq_beam, max_nbeams, m
-endtype
-
-type type_powerflow  !    
-  real(DP),pointer  :: phi_perp(:,:,:) => null()     ! /waves/beamtracing/powerflow/phi_perp - Normalized power flow in the direction perpendicular to the magnetic field, Array (3D) of double precision real (nfreq_beam, max_n
-  real(DP),pointer  :: phi_par(:,:,:) => null()     ! /waves/beamtracing/powerflow/phi_par - Normalized power flow in the direction parallel to the magnetic field, Array (3D) of double precision real (nfreq_beam, max_nbeams
-  real(DP),pointer  :: power_e(:,:,:) => null()     ! /waves/beamtracing/powerflow/power_e - Power absorbed along the beam by electrons. Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-depend
-  real(DP),pointer  :: power_i(:,:,:,:) => null()     ! /waves/beamtracing/powerflow/power_i - Power absorbed along the beam by an ion species [W]; Array (4D) of double precision real (nfreq_beam, max_nbeams, max_npoints, nio
-endtype
-
-type type_poloidal_decomp  !    
-  integer,pointer  :: mpol(:,:) => null()     ! /waves/fullwave/poloidal_decomp/mpol - Poloidal mode numbers; Matrix (nfreq_fw, max_nmpol)
-  integer,pointer  :: nmpol(:) => null()      ! /waves/fullwave/poloidal_decomp/nmpol - Number of poloidal mode numbers for each frequency; Vector (nfreq_fw)
-  real(DP),pointer  :: e_plus_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/e_plus_m - Poloidal Fourier decomposition of left hand polarised component of the wave electric field; Time-dependent (V/m); Array 4D (nfreq_
-  real(DP),pointer  :: e_minus_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/e_minus_m - Poloidal Fourier decomposition of right hand polarised component of the wave electric field; Time-dependent (V/m); Array 4D (nfreq
-  real(DP),pointer  :: e_norm_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/e_norm_m - Poloidal Fourier decomposition of  wave electric field normal to a flux surface [V/m]; Time dependent; Array 4D (nfreq_fw, max_nto
-  real(DP),pointer  :: e_bi_norm_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/e_bi_norm_m - Poloidal Fourier decomposition of wave electric field tangent to a flux surface [V/m]; Time dependent; Array 4D (nfreq_fw, max_nto
-  real(DP),pointer  :: e_parallel_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/e_parallel_m - Poloidal Fourier decomposition of parallel wave electric field [V/m]; Time dependent; Array 4D (nfreq_fw, max_ntor, max_npsin, max
-  real(DP),pointer  :: b_norm_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/b_norm_m - Poloidal Fourier decomposition of wave magnetic field normal to a flux surface [T]; Time dependent; Array 4D (nfreq_fw, max_ntor, 
-  real(DP),pointer  :: b_bi_norm_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/b_bi_norm_m - Poloidal Fourier decomposition of wave magnetic field tangent to a flux surface [T]; Time dependent; Array 4D (nfreq_fw, max_ntor,
-  real(DP),pointer  :: b_parallel_m(:,:,:,:) => null()     ! /waves/fullwave/poloidal_decomp/b_parallel_m - Wave magnetic field parallel to the equilibrium magnetic field [T]; Time dependent; Array 4D (nfreq_fw, max_ntor, max_npsin, max_n
-endtype
-
-type type_local  !    
-  real(DP),pointer  :: e_plus(:,:,:,:) => null()     ! /waves/fullwave/local/e_plus - Left hand polarised component of the wave electric field; Time-dependent (V/m); Array 4D (nfreq_fw, max_ntor, max_npsin, max_nthet
-  real(DP),pointer  :: e_minus(:,:,:,:) => null()     ! /waves/fullwave/local/e_minus - Right hand polarised component of the wave electric field; Time-dependent (V/m); Array 4D (nfreq_fw, max_ntor, max_npsin, max_nthe
-  real(DP),pointer  :: e_norm(:,:,:,:) => null()     ! /waves/fullwave/local/e_norm - Wave electric field normal to a flux surface [V/m]; Time dependent; 4D (nfreq_fw, max_ntor, max_npsin, max_ntheta)
-  real(DP),pointer  :: e_bi_norm(:,:,:,:) => null()     ! /waves/fullwave/local/e_bi_norm - Wave electric field tangent to a flux surface [V/m]; Time dependent; 4D (nfreq_fw, max_ntor, max_npsin, max_ntheta)
-  real(DP),pointer  :: e_parallel(:,:,:,:) => null()     ! /waves/fullwave/local/e_parallel - Parallel wave electric field [V/m]; Time dependent; Array 4D (nfreq_fw, max_ntor, max_npsin, max_ntheta)
-  real(DP),pointer  :: b_norm(:,:,:,:) => null()     ! /waves/fullwave/local/b_norm - Wave magnetic field normal to a flux surface [T]; Time dependent; Array 4D (nfreq_fw, max_ntor, max_npsin, max_ntheta)
-  real(DP),pointer  :: b_bi_norm(:,:,:,:) => null()     ! /waves/fullwave/local/b_bi_norm - Wave magnetic field tangent to a flux surface [T]; Time dependent; Array 4D (nfreq_fw, max_ntor, max_npsin, max_ntheta)
-  real(DP),pointer  :: b_parallel(:,:,:,:) => null()     ! /waves/fullwave/local/b_parallel - Wave magnetic field parallel to the equilibrium magnetic field [T]; Time dependent; Array 4D (nfreq_fw, max_ntor, max_npsin, max_n
-endtype
-
-type type_beamtracing  !    
-  integer,pointer  :: nbeams(:) => null()      ! /waves/beamtracing/nbeams - Number of rays/beams for each antenna. Vector of integers (nfreq_beam)
-  integer,pointer  :: npoints(:,:) => null()     ! /waves/beamtracing/npoints - Number of points along each ray/beam. Matrix of integers (nfreq_beam, max_nbeams)
-  real(DP),pointer  :: power(:,:) => null()     ! /waves/beamtracing/power - Initial power in each ray/beam [W], Matrix (nfreq_beam, max_nbeams). Time-dependent
-  real(DP),pointer  :: dnpar(:,:,:) => null()     ! /waves/beamtracing/dnpar - Spectral width associated with each ray/beam, Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-depe
-  real(DP),pointer  :: length(:,:,:) => null()     ! /waves/beamtracing/length - Ray/beam curvilinear length [m], Array (3D) of double precision real (nfreq_beam, max_nbeams, max_npoints). Time-dependent
-   type (type_waves_rtposition)  :: position  ! /waves/beamtracing/position - Ray/beam position
-   type (type_waves_rtwavevector)  :: wavevector  ! /waves/beamtracing/wavevector - Ray/beam wave vector.
-  type (type_polarization) :: polarization  ! /waves/beamtracing/polarization - Wave field polarization along the ray/beam.
-  type (type_powerflow) :: powerflow  ! /waves/beamtracing/powerflow - Power flow along the ray/beam.
-endtype
-
-type type_fullwave  !    
-  type (type_poloidal_decomp) :: poloidal_decomp  ! /waves/fullwave/poloidal_decomp - Poloidal decomposition of the wave fields
-  type (type_local) :: local  ! /waves/fullwave/local - Local description of the wave fields
-endtype
-
-type type_waves  !    
-  type (type_datainfo) :: datainfo  ! /waves/datainfo - 
-  type (type_composition) :: composition  ! /waves/composition - 
-   type (type_waves_global_param)  :: global_param  ! /waves/global_param - Global wave deposition parameters
-   type (type_waves_dep_profiles)  :: profiles  ! /waves/profiles - Profiles of wave deposition quantities
-  type (type_beamtracing) :: beamtracing  ! /waves/beamtracing - Beam-tracing or ray-tracing solver
-  type (type_fullwave) :: fullwave  ! /waves/fullwave - Solution by full wave code
-  type (type_codeparam) :: codeparam  ! /waves/codeparam - 
-  real(DP)  :: time=-9.0D40       ! /waves/time - Time [s]; Time-dependent; Scalar
-endtype
-
-type type_mdinfo  !    
-  integer  :: shot_min=-999999999       ! /top/topinfo/mdinfo/shot_min - Minimum shot number to which the machine description applies
-  integer  :: shot_max=-999999999       ! /top/topinfo/mdinfo/shot_max - Maximum shot number to which the machine description applies
-   type (type_entry_def)  :: md_entry  ! /top/topinfo/mdinfo/md_entry - Entry of the machine description used. NB : just for information : for the moment, no guarantee that machine description data have
-endtype
-
-type type_topinfo  !    
-  character(len=132), dimension(:), pointer ::dataprovider => null()       ! /top/topinfo/dataprovider - Name of the main data provider (the person who filled the original data)
-  character(len=132), dimension(:), pointer ::description => null()       ! /top/topinfo/description - Pulse/Entry description
-  character(len=132), dimension(:), pointer ::firstputdate => null()       ! /top/topinfo/firstputdate - Date of the original data submission
-  character(len=132), dimension(:), pointer ::lastupdate => null()       ! /top/topinfo/lastupdate - Date of the last data addition in the tree
-  character(len=132), dimension(:), pointer ::source => null()       ! /top/topinfo/source - Exact reference of the data source (e.g. original reference in the native machine data base)
-  character(len=132), dimension(:), pointer ::comment => null()       ! /top/topinfo/comment - Any additional comment
-  character(len=132), dimension(:), pointer ::dataversion => null()       ! /top/topinfo/dataversion - Version of the data structure
-  character(len=132), dimension(:), pointer ::workflow => null()       ! /top/topinfo/workflow - Workflow which has been used to produce the present entry. Exact format to be defined with the platform group. User-specific input
-   type (type_entry_def)  :: entry  ! /top/topinfo/entry - Definition of this database entry
-   type (type_entry_def)  :: parent_entry  ! /top/topinfo/parent_entry - Definition of the entry of the direct parent (if any)
-  type (type_mdinfo) :: mdinfo  ! /top/topinfo/mdinfo - Information related to machine description for this entry
-endtype
- 
-type type_interfdiag  ! Special type CPO (lineintegraldiag) 
-  type (type_datainfo) :: datainfo  ! /datainfo - 
-  character(len=132), dimension(:), pointer ::expression => null()       ! /expression - Formal expression for the line integral to be evaluated as a function of ne, ni, Te, Ti, Zeff, Br, Bz
-   type (type_setup_line)  :: setup_line  ! /setup_line - Geometric description of the lines of sight
-   type (type_exp1D)  :: measure  ! /measure - Measured value. Time-dependent; Vector (nchords)
-  real(DP)  :: time=-9.0D40       ! /time - Time [s]; Time-dependent; Scalar
-end type
- 
-type type_polardiag  ! Special type CPO (lineintegraldiag) 
-  type (type_datainfo) :: datainfo  ! /datainfo - 
-  character(len=132), dimension(:), pointer ::expression => null()       ! /expression - Formal expression for the line integral to be evaluated as a function of ne, ni, Te, Ti, Zeff, Br, Bz
-   type (type_setup_line)  :: setup_line  ! /setup_line - Geometric description of the lines of sight
-   type (type_exp1D)  :: measure  ! /measure - Measured value. Time-dependent; Vector (nchords)
-  real(DP)  :: time=-9.0D40       ! /time - Time [s]; Time-dependent; Scalar
-end type
-
-end module
-

Property changes on: src/helena_lib/spline.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/rft.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/fsum2.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/sgtsl.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/deallocate_structures.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/fft2.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/rfi2.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/prarr1.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/rtran2.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/user_maximum.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/grid2nv.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/tb15a.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/rft2.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/helena_lib/copy_structures.f90
===================================================================
--- src/helena_lib/copy_structures.f90	(revision 252)
+++ src/helena_lib/copy_structures.f90	(working copy)
@@ -1,13390 +0,0 @@
- module copy_structures
- !------------------------------------------------------------------
- ! module for granular copying of euitm structures
- !------------------------------------------------------------------
- 
-   use itm_types
-   use euitm_schemas
- 
- 
-   interface copy_cpo
-     module procedure &
-      copy_type_codeparam, &
-      copy_type_param, &
-      copy_type_composition, &
-      copy_type_whatref, &
-      copy_type_putinfo, &
-      copy_type_datainfo, &
-      copy_type_spot, &
-      copy_type_phaseellipse, &
-      copy_type_b0r0, &
-      copy_type_boundaryel, &
-      copy_type_boundaryion, &
-      copy_type_entry_def, &
-      copy_type_exp0D, &
-      copy_type_exp1D, &
-      copy_type_exp2D, &
-      copy_type_offdiagel, &
-      copy_type_offdiagion, &
-      copy_type_reduced, &
-      copy_type_reggrid, &
-      copy_type_rf_beam, &
-      copy_type_rz0D, &
-      copy_type_rz1D, &
-      copy_type_rz1D_npoints, &
-      copy_type_rz2D, &
-      copy_type_rz3D, &
-      copy_type_rzphi1D, &
-      copy_type_rzphi2D, &
-      copy_type_setup_line, &
-      copy_type_source_ion, &
-      copy_type_source_imp, &
-      copy_type_source_el, &
-      copy_type_transcoefion, &
-      copy_type_transcoefel, &
-      copy_type_transcoefvtor, &
-      copy_type_transcoefimp, &
-      copy_type_lineintegraldiag, &
-      copy_type_waveguides, &
-      copy_type_modules, &
-      copy_type_antennalh_setup, &
-      copy_type_launchangles, &
-      copy_type_plasmaedge, &
-      copy_type_antenna_ec, &
-      copy_type_antenna_ic, &
-      copy_type_antenna_lh, &
-      copy_type_antennas, &
-      copy_type_statespace, &
-      copy_type_transferpid, &
-      copy_type_controllers, &
-      copy_type_coredelta, &
-      copy_type_sourceimp, &
-      copy_type_coretransimp, &
-      copy_type_boundaryimp, &
-      copy_type_fluximp, &
-      copy_type_desc_impur, &
-      copy_type_coreimpur, &
-      copy_type_atomlist, &
-      copy_type_neutrallist, &
-      copy_type_typelist, &
-      copy_type_boundary_neutrals, &
-      copy_type_corefieldneutral, &
-      copy_type_corefieldneutrale, &
-      copy_type_corefieldneutralv, &
-      copy_type_corefieldneutralv0, &
-      copy_type_recycling_neutrals, &
-      copy_type_sputtering_neutrals, &
-      copy_type_composition_neutrals, &
-      copy_type_coefficients_neutrals, &
-      copy_type_profiles_neutrals, &
-      copy_type_coreneutrals, &
-      copy_type_sourceel, &
-      copy_type_sourceion, &
-      copy_type_coretransel, &
-      copy_type_coretransion, &
-      copy_type_fluxel, &
-      copy_type_fluxion, &
-      copy_type_corefield, &
-      copy_type_corefieldion, &
-      copy_type_coreprofile, &
-      copy_type_coreprofion, &
-      copy_type_boundary, &
-      copy_type_jni, &
-      copy_type_toroid_field, &
-      copy_type_psi, &
-      copy_type_profiles1d, &
-      copy_type_globalparam, &
-      copy_type_coreprof, &
-      copy_type_coresource, &
-      copy_type_ni_transp, &
-      copy_type_ne_transp, &
-      copy_type_coretransp, &
-      copy_type_coord_sys, &
-      copy_type_eqmes0D, &
-      copy_type_eqmes1D, &
-      copy_type_isoflux, &
-      copy_type_magnet_iron, &
-      copy_type_q, &
-      copy_type_xpts, &
-      copy_type_eqconstraint, &
-      copy_type_plasmagrid, &
-      copy_type_emcalc, &
-      copy_type_flush, &
-      copy_type_fp_src_snk_vol, &
-      copy_type_fp_src_snk_surf, &
-      copy_type_fp_src_snk_tot, &
-      copy_type_fp_test_part, &
-      copy_type_fp_grid, &
-      copy_type_fp_ff, &
-      copy_type_fp_particle_src, &
-      copy_type_fp_wave_src, &
-      copy_type_fp_input_src, &
-      copy_type_fp_prof_vol_dist_losses, &
-      copy_type_fp_prof_surf_dist_losses, &
-      copy_type_fp_prof_surf_nucl_reac_th, &
-      copy_type_fp_prof_surf_nucl_reac_sf, &
-      copy_type_fp_prof_surf_energies, &
-      copy_type_fp_nucl_reac_sf, &
-      copy_type_fp_prof_surf_dist, &
-      copy_type_fp_prof_vol_nucl_reac_sf, &
-      copy_type_fp_prof_vol_nucl_reac_th, &
-      copy_type_fp_nucl_reac_th, &
-      copy_type_fp_glob_dist_losses, &
-      copy_type_fp_glob_dist_energies, &
-      copy_type_fp_glob_dist, &
-      copy_type_fp_glob_coll, &
-      copy_type_fp_prof_vol_coll, &
-      copy_type_fp_prof_surf_coll, &
-      copy_type_fp_prof_vol_dist_energies, &
-      copy_type_fp_prof_vol_dist, &
-      copy_type_fp_dist_func, &
-      copy_type_fp_glob, &
-      copy_type_fp_nucl_reac, &
-      copy_type_fp_prof_vol, &
-      copy_type_fp_prof_surf, &
-      copy_type_fp_profiles, &
-      copy_type_dist_func, &
-      copy_type_fp, &
-      copy_type_eqgeometry, &
-      copy_type_mag_axis, &
-      copy_type_global_param, &
-      copy_type_grid, &
-      copy_type_profiles_2d, &
-      copy_type_profiles_1d, &
-      copy_type_equilibrium, &
-      copy_type_permeability, &
-      copy_type_geom_iron, &
-      copy_type_desc_iron, &
-      copy_type_magnetise, &
-      copy_type_ironmodel, &
-      copy_type_spectrum, &
-      copy_type_launchs, &
-      copy_type_limiter, &
-      copy_type_setup_floops, &
-      copy_type_setup_bprobe, &
-      copy_type_flux_loops, &
-      copy_type_bpol_probes, &
-      copy_type_magdiag, &
-      copy_type_setup_mse, &
-      copy_type_msediag, &
-      copy_type_mhd, &
-      copy_type_neoclassic, &
-      copy_type_orbit_pos, &
-      copy_type_midplane, &
-      copy_type_turning_pts, &
-      copy_type_special_pos, &
-      copy_type_orbitt_id, &
-      copy_type_orb_trace, &
-      copy_type_orb_glob_dat, &
-      copy_type_orbit, &
-      copy_type_pfgeometry, &
-      copy_type_pfelement, &
-      copy_type_pfcircuits, &
-      copy_type_desc_pfcoils, &
-      copy_type_pfcoils, &
-      copy_type_pfpageometry, &
-      copy_type_pfpassive, &
-      copy_type_filter, &
-      copy_type_desc_supply, &
-      copy_type_pfsupplies, &
-      copy_type_pfsystems, &
-      copy_type_toroidfield, &
-      copy_type_sawteeth_profiles1d, &
-      copy_type_sawteeth_diags, &
-      copy_type_sawteeth, &
-      copy_type_scenario_ref, &
-      copy_type_scenario_int, &
-      copy_type_scenario_reactor, &
-      copy_type_scenario_vol_ave, &
-      copy_type_scenario_references, &
-      copy_type_scenario_sol, &
-      copy_type_scenario_pedestal, &
-      copy_type_scenario_ninety_five, &
-      copy_type_scenario_neutron, &
-      copy_type_scenario_line_ave, &
-      copy_type_scenario_lim_div_wall, &
-      copy_type_scenario_itb, &
-      copy_type_scenario_heat_power, &
-      copy_type_scenario_global, &
-      copy_type_scenario_energy, &
-      copy_type_scenario_edge, &
-      copy_type_scenario_currents, &
-      copy_type_scenario_confinement, &
-      copy_type_scenario_configuration, &
-      copy_type_scenario_composition, &
-      copy_type_scenario_centre, &
-      copy_type_scenario, &
-      copy_type_summary, &
-      copy_type_vessel, &
-      copy_type_theta_info, &
-      copy_type_waves_2dgrid, &
-      copy_type_waves_global_param, &
-      copy_type_waves_dep_profiles_flux_surf_avr, &
-      copy_type_waves_dep_profiles_volume_intgr, &
-      copy_type_waves_dep_profiles_two_dim, &
-      copy_type_waves_dep_profiles, &
-      copy_type_waves_rtwavevector, &
-      copy_type_waves_rtposition, &
-      copy_type_polarization, &
-      copy_type_powerflow, &
-      copy_type_poloidal_decomp, &
-      copy_type_local, &
-      copy_type_beamtracing, &
-      copy_type_fullwave, &
-      copy_type_waves, &
-      copy_type_mdinfo, &
-      copy_type_topinfo, &
-      copy_type_interfdiag, &
-      copy_type_polardiag
-   end interface
- 
-   integer(itm_i4), parameter, private :: iu6 = 6
-   integer(itm_i4), private :: verbose = 0
- 
- contains
- 
- 
-   subroutine set_copy_verbosity(verbosity)
- 
-     use itm_types
- 
-     implicit none
- 
-     integer(itm_i4), intent(in) :: verbosity
- 
-     if (verbosity < 0) then
-       verbose = 0
-     else
-       verbose = verbosity
-     end if
- 
-   end subroutine set_copy_verbosity
- 
-   subroutine copy_type_codeparam(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_codeparam), intent(in) :: structure_in
-     type (type_codeparam), intent(inout) :: structure_out
- 
-     if (associated(structure_in%codename)) then
-       if (associated(structure_out%codename)) then
-         if (size(structure_in%codename) &
-          /= size(structure_out%codename)) &
-          deallocate(structure_out%codename)
-       end if
-       if (.not. associated(structure_out%codename)) then
-         allocate(structure_out%codename(size(structure_in%codename)))
-       end if
-       structure_out%codename = structure_in%codename
-       if (verbose > 0) write(iu6, *) 'copied codeparam%codename'
-     end if
- 
-     if (associated(structure_in%codeversion)) then
-       if (associated(structure_out%codeversion)) then
-         if (size(structure_in%codeversion) &
-          /= size(structure_out%codeversion)) &
-          deallocate(structure_out%codeversion)
-       end if
-       if (.not. associated(structure_out%codeversion)) then
-         allocate(structure_out%codeversion(size(structure_in%codeversion)))
-       end if
-       structure_out%codeversion = structure_in%codeversion
-       if (verbose > 0) write(iu6, *) 'copied codeparam%codeversion'
-     end if
- 
-     if (associated(structure_in%parameters)) then
-       if (associated(structure_out%parameters)) then
-         if (size(structure_in%parameters) &
-          /= size(structure_out%parameters)) &
-          deallocate(structure_out%parameters)
-       end if
-       if (.not. associated(structure_out%parameters)) then
-         allocate(structure_out%parameters(size(structure_in%parameters)))
-       end if
-       structure_out%parameters = structure_in%parameters
-       if (verbose > 0) write(iu6, *) 'copied codeparam%parameters'
-     end if
- 
-     if (associated(structure_in%output_diag)) then
-       if (associated(structure_out%output_diag)) then
-         if (size(structure_in%output_diag) &
-          /= size(structure_out%output_diag)) &
-          deallocate(structure_out%output_diag)
-       end if
-       if (.not. associated(structure_out%output_diag)) then
-         allocate(structure_out%output_diag(size(structure_in%output_diag)))
-       end if
-       structure_out%output_diag = structure_in%output_diag
-       if (verbose > 0) write(iu6, *) 'copied codeparam%output_diag'
-     end if
- 
-     if (structure_in%output_flag /= -999999999) then
-       structure_out%output_flag = structure_in%output_flag
-       if (verbose > 0) write(iu6, *) 'copied codeparam%output_flag'
-     end if
- 
-   end subroutine copy_type_codeparam
- 
-   subroutine copy_type_param(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_param), intent(in) :: structure_in
-     type (type_param), intent(inout) :: structure_out
- 
-     if (associated(structure_in%parameters)) then
-       if (associated(structure_out%parameters)) then
-         if (size(structure_in%parameters) &
-          /= size(structure_out%parameters)) &
-          deallocate(structure_out%parameters)
-       end if
-       if (.not. associated(structure_out%parameters)) then
-         allocate(structure_out%parameters(size(structure_in%parameters)))
-       end if
-       structure_out%parameters = structure_in%parameters
-       if (verbose > 0) write(iu6, *) 'copied param%parameters'
-     end if
- 
-     if (associated(structure_in%default_param)) then
-       if (associated(structure_out%default_param)) then
-         if (size(structure_in%default_param) &
-          /= size(structure_out%default_param)) &
-          deallocate(structure_out%default_param)
-       end if
-       if (.not. associated(structure_out%default_param)) then
-         allocate(structure_out%default_param(size(structure_in%default_param)))
-       end if
-       structure_out%default_param = structure_in%default_param
-       if (verbose > 0) write(iu6, *) 'copied param%default_param'
-     end if
- 
-     if (associated(structure_in%schema)) then
-       if (associated(structure_out%schema)) then
-         if (size(structure_in%schema) &
-          /= size(structure_out%schema)) &
-          deallocate(structure_out%schema)
-       end if
-       if (.not. associated(structure_out%schema)) then
-         allocate(structure_out%schema(size(structure_in%schema)))
-       end if
-       structure_out%schema = structure_in%schema
-       if (verbose > 0) write(iu6, *) 'copied param%schema'
-     end if
- 
-   end subroutine copy_type_param
- 
-   subroutine copy_type_composition(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_composition), intent(in) :: structure_in
-     type (type_composition), intent(inout) :: structure_out
- 
-     if (associated(structure_in%amn)) then
-       if (associated(structure_out%amn)) then
-         if (size(structure_in%amn) &
-          /= size(structure_out%amn)) &
-          deallocate(structure_out%amn)
-       end if
-       if (.not. associated(structure_out%amn)) then
-         allocate(structure_out%amn(size(structure_in%amn, 1)))
-       end if
-       structure_out%amn = structure_in%amn
-       if (verbose > 0) write(iu6, *) 'copied composition%amn'
-     end if
- 
-     if (associated(structure_in%zn)) then
-       if (associated(structure_out%zn)) then
-         if (size(structure_in%zn) &
-          /= size(structure_out%zn)) &
-          deallocate(structure_out%zn)
-       end if
-       if (.not. associated(structure_out%zn)) then
-         allocate(structure_out%zn(size(structure_in%zn, 1)))
-       end if
-       structure_out%zn = structure_in%zn
-       if (verbose > 0) write(iu6, *) 'copied composition%zn'
-     end if
- 
-     if (associated(structure_in%zion)) then
-       if (associated(structure_out%zion)) then
-         if (size(structure_in%zion) &
-          /= size(structure_out%zion)) &
-          deallocate(structure_out%zion)
-       end if
-       if (.not. associated(structure_out%zion)) then
-         allocate(structure_out%zion(size(structure_in%zion, 1)))
-       end if
-       structure_out%zion = structure_in%zion
-       if (verbose > 0) write(iu6, *) 'copied composition%zion'
-     end if
- 
-     if (associated(structure_in%imp_flag)) then
-       if (associated(structure_out%imp_flag)) then
-         if (size(structure_in%imp_flag) &
-          /= size(structure_out%imp_flag)) &
-          deallocate(structure_out%imp_flag)
-       end if
-       if (.not. associated(structure_out%imp_flag)) then
-         allocate(structure_out%imp_flag(size(structure_in%imp_flag, 1)))
-       end if
-       structure_out%imp_flag = structure_in%imp_flag
-       if (verbose > 0) write(iu6, *) 'copied composition%imp_flag'
-     end if
- 
-   end subroutine copy_type_composition
- 
-   subroutine copy_type_whatref(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_whatref), intent(in) :: structure_in
-     type (type_whatref), intent(inout) :: structure_out
- 
-     if (associated(structure_in%user)) then
-       if (associated(structure_out%user)) then
-         if (size(structure_in%user) &
-          /= size(structure_out%user)) &
-          deallocate(structure_out%user)
-       end if
-       if (.not. associated(structure_out%user)) then
-         allocate(structure_out%user(size(structure_in%user)))
-       end if
-       structure_out%user = structure_in%user
-       if (verbose > 0) write(iu6, *) 'copied whatref%user'
-     end if
- 
-     if (associated(structure_in%machine)) then
-       if (associated(structure_out%machine)) then
-         if (size(structure_in%machine) &
-          /= size(structure_out%machine)) &
-          deallocate(structure_out%machine)
-       end if
-       if (.not. associated(structure_out%machine)) then
-         allocate(structure_out%machine(size(structure_in%machine)))
-       end if
-       structure_out%machine = structure_in%machine
-       if (verbose > 0) write(iu6, *) 'copied whatref%machine'
-     end if
- 
-     if (structure_in%shot /= -999999999) then
-       structure_out%shot = structure_in%shot
-       if (verbose > 0) write(iu6, *) 'copied whatref%shot'
-     end if
- 
-     if (structure_in%run /= -999999999) then
-       structure_out%run = structure_in%run
-       if (verbose > 0) write(iu6, *) 'copied whatref%run'
-     end if
- 
-     if (structure_in%occurrence /= -999999999) then
-       structure_out%occurrence = structure_in%occurrence
-       if (verbose > 0) write(iu6, *) 'copied whatref%occurrence'
-     end if
- 
-   end subroutine copy_type_whatref
- 
-   subroutine copy_type_putinfo(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_putinfo), intent(in) :: structure_in
-     type (type_putinfo), intent(inout) :: structure_out
- 
-     if (associated(structure_in%putmethod)) then
-       if (associated(structure_out%putmethod)) then
-         if (size(structure_in%putmethod) &
-          /= size(structure_out%putmethod)) &
-          deallocate(structure_out%putmethod)
-       end if
-       if (.not. associated(structure_out%putmethod)) then
-         allocate(structure_out%putmethod(size(structure_in%putmethod)))
-       end if
-       structure_out%putmethod = structure_in%putmethod
-       if (verbose > 0) write(iu6, *) 'copied putinfo%putmethod'
-     end if
- 
-     if (associated(structure_in%putaccess)) then
-       if (associated(structure_out%putaccess)) then
-         if (size(structure_in%putaccess) &
-          /= size(structure_out%putaccess)) &
-          deallocate(structure_out%putaccess)
-       end if
-       if (.not. associated(structure_out%putaccess)) then
-         allocate(structure_out%putaccess(size(structure_in%putaccess)))
-       end if
-       structure_out%putaccess = structure_in%putaccess
-       if (verbose > 0) write(iu6, *) 'copied putinfo%putaccess'
-     end if
- 
-     if (associated(structure_in%putlocation)) then
-       if (associated(structure_out%putlocation)) then
-         if (size(structure_in%putlocation) &
-          /= size(structure_out%putlocation)) &
-          deallocate(structure_out%putlocation)
-       end if
-       if (.not. associated(structure_out%putlocation)) then
-         allocate(structure_out%putlocation(size(structure_in%putlocation)))
-       end if
-       structure_out%putlocation = structure_in%putlocation
-       if (verbose > 0) write(iu6, *) 'copied putinfo%putlocation'
-     end if
- 
-     if (associated(structure_in%rights)) then
-       if (associated(structure_out%rights)) then
-         if (size(structure_in%rights) &
-          /= size(structure_out%rights)) &
-          deallocate(structure_out%rights)
-       end if
-       if (.not. associated(structure_out%rights)) then
-         allocate(structure_out%rights(size(structure_in%rights)))
-       end if
-       structure_out%rights = structure_in%rights
-       if (verbose > 0) write(iu6, *) 'copied putinfo%rights'
-     end if
- 
-   end subroutine copy_type_putinfo
- 
-   subroutine copy_type_datainfo(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_datainfo), intent(in) :: structure_in
-     type (type_datainfo), intent(inout) :: structure_out
- 
-     if (associated(structure_in%dataprovider)) then
-       if (associated(structure_out%dataprovider)) then
-         if (size(structure_in%dataprovider) &
-          /= size(structure_out%dataprovider)) &
-          deallocate(structure_out%dataprovider)
-       end if
-       if (.not. associated(structure_out%dataprovider)) then
-         allocate(structure_out%dataprovider(size(structure_in%dataprovider)))
-       end if
-       structure_out%dataprovider = structure_in%dataprovider
-       if (verbose > 0) write(iu6, *) 'copied datainfo%dataprovider'
-     end if
- 
-     if (associated(structure_in%putdate)) then
-       if (associated(structure_out%putdate)) then
-         if (size(structure_in%putdate) &
-          /= size(structure_out%putdate)) &
-          deallocate(structure_out%putdate)
-       end if
-       if (.not. associated(structure_out%putdate)) then
-         allocate(structure_out%putdate(size(structure_in%putdate)))
-       end if
-       structure_out%putdate = structure_in%putdate
-       if (verbose > 0) write(iu6, *) 'copied datainfo%putdate'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied datainfo%source'
-     end if
- 
-     if (associated(structure_in%comment)) then
-       if (associated(structure_out%comment)) then
-         if (size(structure_in%comment) &
-          /= size(structure_out%comment)) &
-          deallocate(structure_out%comment)
-       end if
-       if (.not. associated(structure_out%comment)) then
-         allocate(structure_out%comment(size(structure_in%comment)))
-       end if
-       structure_out%comment = structure_in%comment
-       if (verbose > 0) write(iu6, *) 'copied datainfo%comment'
-     end if
- 
-     if (structure_in%isref /= -999999999) then
-       structure_out%isref = structure_in%isref
-       if (verbose > 0) write(iu6, *) 'copied datainfo%isref'
-     end if
- 
-     call copy_type_whatref(structure_in%whatref, structure_out%whatref)
- 
-     call copy_type_putinfo(structure_in%putinfo, structure_out%putinfo)
- 
-   end subroutine copy_type_datainfo
- 
-   subroutine copy_type_spot(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_spot), intent(in) :: structure_in
-     type (type_spot), intent(inout) :: structure_out
- 
-     if (associated(structure_in%waist)) then
-       if (associated(structure_out%waist)) then
-         if (size(structure_in%waist) &
-          /= size(structure_out%waist)) &
-          deallocate(structure_out%waist)
-       end if
-       if (.not. associated(structure_out%waist)) then
-         allocate(structure_out%waist(size(structure_in%waist, 1), &
-          size(structure_in%waist, 2)))
-       end if
-       structure_out%waist = structure_in%waist
-       if (verbose > 0) write(iu6, *) 'copied spot%waist'
-     end if
- 
-     if (associated(structure_in%angle)) then
-       if (associated(structure_out%angle)) then
-         if (size(structure_in%angle) &
-          /= size(structure_out%angle)) &
-          deallocate(structure_out%angle)
-       end if
-       if (.not. associated(structure_out%angle)) then
-         allocate(structure_out%angle(size(structure_in%angle, 1)))
-       end if
-       structure_out%angle = structure_in%angle
-       if (verbose > 0) write(iu6, *) 'copied spot%angle'
-     end if
- 
-   end subroutine copy_type_spot
- 
-   subroutine copy_type_phaseellipse(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_phaseellipse), intent(in) :: structure_in
-     type (type_phaseellipse), intent(inout) :: structure_out
- 
-     if (associated(structure_in%invcurvrad)) then
-       if (associated(structure_out%invcurvrad)) then
-         if (size(structure_in%invcurvrad) &
-          /= size(structure_out%invcurvrad)) &
-          deallocate(structure_out%invcurvrad)
-       end if
-       if (.not. associated(structure_out%invcurvrad)) then
-         allocate(structure_out%invcurvrad(size(structure_in%invcurvrad, 1), &
-          size(structure_in%invcurvrad, 2)))
-       end if
-       structure_out%invcurvrad = structure_in%invcurvrad
-       if (verbose > 0) write(iu6, *) 'copied phaseellipse%invcurvrad'
-     end if
- 
-     if (associated(structure_in%angle)) then
-       if (associated(structure_out%angle)) then
-         if (size(structure_in%angle) &
-          /= size(structure_out%angle)) &
-          deallocate(structure_out%angle)
-       end if
-       if (.not. associated(structure_out%angle)) then
-         allocate(structure_out%angle(size(structure_in%angle, 1)))
-       end if
-       structure_out%angle = structure_in%angle
-       if (verbose > 0) write(iu6, *) 'copied phaseellipse%angle'
-     end if
- 
-   end subroutine copy_type_phaseellipse
- 
-   subroutine copy_type_b0r0(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_b0r0), intent(in) :: structure_in
-     type (type_b0r0), intent(inout) :: structure_out
- 
-     if (structure_in%r0 /= -9.0D40) then
-       structure_out%r0 = structure_in%r0
-       if (verbose > 0) write(iu6, *) 'copied b0r0%r0'
-     end if
- 
-     if (structure_in%b0 /= -9.0D40) then
-       structure_out%b0 = structure_in%b0
-       if (verbose > 0) write(iu6, *) 'copied b0r0%b0'
-     end if
- 
-   end subroutine copy_type_b0r0
- 
-   subroutine copy_type_boundaryel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_boundaryel), intent(in) :: structure_in
-     type (type_boundaryel), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied boundaryel%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied boundaryel%source'
-     end if
- 
-     if (structure_in%type /= -999999999) then
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied boundaryel%type'
-     end if
- 
-     if (structure_in%rho_tor /= -9.0D40) then
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied boundaryel%rho_tor'
-     end if
- 
-   end subroutine copy_type_boundaryel
- 
-   subroutine copy_type_boundaryion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_boundaryion), intent(in) :: structure_in
-     type (type_boundaryion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied boundaryion%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied boundaryion%source'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type, 1)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied boundaryion%type'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied boundaryion%rho_tor'
-     end if
- 
-   end subroutine copy_type_boundaryion
- 
-   subroutine copy_type_entry_def(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_entry_def), intent(in) :: structure_in
-     type (type_entry_def), intent(inout) :: structure_out
- 
-     if (associated(structure_in%user)) then
-       if (associated(structure_out%user)) then
-         if (size(structure_in%user) &
-          /= size(structure_out%user)) &
-          deallocate(structure_out%user)
-       end if
-       if (.not. associated(structure_out%user)) then
-         allocate(structure_out%user(size(structure_in%user)))
-       end if
-       structure_out%user = structure_in%user
-       if (verbose > 0) write(iu6, *) 'copied entry_def%user'
-     end if
- 
-     if (associated(structure_in%machine)) then
-       if (associated(structure_out%machine)) then
-         if (size(structure_in%machine) &
-          /= size(structure_out%machine)) &
-          deallocate(structure_out%machine)
-       end if
-       if (.not. associated(structure_out%machine)) then
-         allocate(structure_out%machine(size(structure_in%machine)))
-       end if
-       structure_out%machine = structure_in%machine
-       if (verbose > 0) write(iu6, *) 'copied entry_def%machine'
-     end if
- 
-     if (structure_in%shot /= -999999999) then
-       structure_out%shot = structure_in%shot
-       if (verbose > 0) write(iu6, *) 'copied entry_def%shot'
-     end if
- 
-     if (structure_in%run /= -999999999) then
-       structure_out%run = structure_in%run
-       if (verbose > 0) write(iu6, *) 'copied entry_def%run'
-     end if
- 
-   end subroutine copy_type_entry_def
- 
-   subroutine copy_type_exp0D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_exp0D), intent(in) :: structure_in
-     type (type_exp0D), intent(inout) :: structure_out
- 
-     if (structure_in%value /= -9.0D40) then
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied exp0D%value'
-     end if
- 
-     if (structure_in%abserror /= -9.0D40) then
-       structure_out%abserror = structure_in%abserror
-       if (verbose > 0) write(iu6, *) 'copied exp0D%abserror'
-     end if
- 
-     if (structure_in%relerror /= -9.0D40) then
-       structure_out%relerror = structure_in%relerror
-       if (verbose > 0) write(iu6, *) 'copied exp0D%relerror'
-     end if
- 
-   end subroutine copy_type_exp0D
- 
-   subroutine copy_type_exp1D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_exp1D), intent(in) :: structure_in
-     type (type_exp1D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied exp1D%value'
-     end if
- 
-     if (associated(structure_in%abserror)) then
-       if (associated(structure_out%abserror)) then
-         if (size(structure_in%abserror) &
-          /= size(structure_out%abserror)) &
-          deallocate(structure_out%abserror)
-       end if
-       if (.not. associated(structure_out%abserror)) then
-         allocate(structure_out%abserror(size(structure_in%abserror, 1)))
-       end if
-       structure_out%abserror = structure_in%abserror
-       if (verbose > 0) write(iu6, *) 'copied exp1D%abserror'
-     end if
- 
-     if (associated(structure_in%relerror)) then
-       if (associated(structure_out%relerror)) then
-         if (size(structure_in%relerror) &
-          /= size(structure_out%relerror)) &
-          deallocate(structure_out%relerror)
-       end if
-       if (.not. associated(structure_out%relerror)) then
-         allocate(structure_out%relerror(size(structure_in%relerror, 1)))
-       end if
-       structure_out%relerror = structure_in%relerror
-       if (verbose > 0) write(iu6, *) 'copied exp1D%relerror'
-     end if
- 
-   end subroutine copy_type_exp1D
- 
-   subroutine copy_type_exp2D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_exp2D), intent(in) :: structure_in
-     type (type_exp2D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied exp2D%value'
-     end if
- 
-     if (associated(structure_in%abserror)) then
-       if (associated(structure_out%abserror)) then
-         if (size(structure_in%abserror) &
-          /= size(structure_out%abserror)) &
-          deallocate(structure_out%abserror)
-       end if
-       if (.not. associated(structure_out%abserror)) then
-         allocate(structure_out%abserror(size(structure_in%abserror, 1), &
-          size(structure_in%abserror, 2)))
-       end if
-       structure_out%abserror = structure_in%abserror
-       if (verbose > 0) write(iu6, *) 'copied exp2D%abserror'
-     end if
- 
-     if (associated(structure_in%relerror)) then
-       if (associated(structure_out%relerror)) then
-         if (size(structure_in%relerror) &
-          /= size(structure_out%relerror)) &
-          deallocate(structure_out%relerror)
-       end if
-       if (.not. associated(structure_out%relerror)) then
-         allocate(structure_out%relerror(size(structure_in%relerror, 1), &
-          size(structure_in%relerror, 2)))
-       end if
-       structure_out%relerror = structure_in%relerror
-       if (verbose > 0) write(iu6, *) 'copied exp2D%relerror'
-     end if
- 
-   end subroutine copy_type_exp2D
- 
-   subroutine copy_type_offdiagel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_offdiagel), intent(in) :: structure_in
-     type (type_offdiagel), intent(inout) :: structure_out
- 
-     if (associated(structure_in%d_ni)) then
-       if (associated(structure_out%d_ni)) then
-         if (size(structure_in%d_ni) &
-          /= size(structure_out%d_ni)) &
-          deallocate(structure_out%d_ni)
-       end if
-       if (.not. associated(structure_out%d_ni)) then
-         allocate(structure_out%d_ni(size(structure_in%d_ni, 1), &
-          size(structure_in%d_ni, 2)))
-       end if
-       structure_out%d_ni = structure_in%d_ni
-       if (verbose > 0) write(iu6, *) 'copied offdiagel%d_ni'
-     end if
- 
-     if (associated(structure_in%d_ti)) then
-       if (associated(structure_out%d_ti)) then
-         if (size(structure_in%d_ti) &
-          /= size(structure_out%d_ti)) &
-          deallocate(structure_out%d_ti)
-       end if
-       if (.not. associated(structure_out%d_ti)) then
-         allocate(structure_out%d_ti(size(structure_in%d_ti, 1), &
-          size(structure_in%d_ti, 2)))
-       end if
-       structure_out%d_ti = structure_in%d_ti
-       if (verbose > 0) write(iu6, *) 'copied offdiagel%d_ti'
-     end if
- 
-     if (associated(structure_in%d_ne)) then
-       if (associated(structure_out%d_ne)) then
-         if (size(structure_in%d_ne) &
-          /= size(structure_out%d_ne)) &
-          deallocate(structure_out%d_ne)
-       end if
-       if (.not. associated(structure_out%d_ne)) then
-         allocate(structure_out%d_ne(size(structure_in%d_ne, 1)))
-       end if
-       structure_out%d_ne = structure_in%d_ne
-       if (verbose > 0) write(iu6, *) 'copied offdiagel%d_ne'
-     end if
- 
-     if (associated(structure_in%d_te)) then
-       if (associated(structure_out%d_te)) then
-         if (size(structure_in%d_te) &
-          /= size(structure_out%d_te)) &
-          deallocate(structure_out%d_te)
-       end if
-       if (.not. associated(structure_out%d_te)) then
-         allocate(structure_out%d_te(size(structure_in%d_te, 1)))
-       end if
-       structure_out%d_te = structure_in%d_te
-       if (verbose > 0) write(iu6, *) 'copied offdiagel%d_te'
-     end if
- 
-     if (associated(structure_in%d_epar)) then
-       if (associated(structure_out%d_epar)) then
-         if (size(structure_in%d_epar) &
-          /= size(structure_out%d_epar)) &
-          deallocate(structure_out%d_epar)
-       end if
-       if (.not. associated(structure_out%d_epar)) then
-         allocate(structure_out%d_epar(size(structure_in%d_epar, 1)))
-       end if
-       structure_out%d_epar = structure_in%d_epar
-       if (verbose > 0) write(iu6, *) 'copied offdiagel%d_epar'
-     end if
- 
-     if (associated(structure_in%d_mtor)) then
-       if (associated(structure_out%d_mtor)) then
-         if (size(structure_in%d_mtor) &
-          /= size(structure_out%d_mtor)) &
-          deallocate(structure_out%d_mtor)
-       end if
-       if (.not. associated(structure_out%d_mtor)) then
-         allocate(structure_out%d_mtor(size(structure_in%d_mtor, 1)))
-       end if
-       structure_out%d_mtor = structure_in%d_mtor
-       if (verbose > 0) write(iu6, *) 'copied offdiagel%d_mtor'
-     end if
- 
-   end subroutine copy_type_offdiagel
- 
-   subroutine copy_type_offdiagion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_offdiagion), intent(in) :: structure_in
-     type (type_offdiagion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%d_ni)) then
-       if (associated(structure_out%d_ni)) then
-         if (size(structure_in%d_ni) &
-          /= size(structure_out%d_ni)) &
-          deallocate(structure_out%d_ni)
-       end if
-       if (.not. associated(structure_out%d_ni)) then
-         allocate(structure_out%d_ni(size(structure_in%d_ni, 1), &
-          size(structure_in%d_ni, 2), &
-          size(structure_in%d_ni, 3)))
-       end if
-       structure_out%d_ni = structure_in%d_ni
-       if (verbose > 0) write(iu6, *) 'copied offdiagion%d_ni'
-     end if
- 
-     if (associated(structure_in%d_ti)) then
-       if (associated(structure_out%d_ti)) then
-         if (size(structure_in%d_ti) &
-          /= size(structure_out%d_ti)) &
-          deallocate(structure_out%d_ti)
-       end if
-       if (.not. associated(structure_out%d_ti)) then
-         allocate(structure_out%d_ti(size(structure_in%d_ti, 1), &
-          size(structure_in%d_ti, 2), &
-          size(structure_in%d_ti, 3)))
-       end if
-       structure_out%d_ti = structure_in%d_ti
-       if (verbose > 0) write(iu6, *) 'copied offdiagion%d_ti'
-     end if
- 
-     if (associated(structure_in%d_ne)) then
-       if (associated(structure_out%d_ne)) then
-         if (size(structure_in%d_ne) &
-          /= size(structure_out%d_ne)) &
-          deallocate(structure_out%d_ne)
-       end if
-       if (.not. associated(structure_out%d_ne)) then
-         allocate(structure_out%d_ne(size(structure_in%d_ne, 1), &
-          size(structure_in%d_ne, 2)))
-       end if
-       structure_out%d_ne = structure_in%d_ne
-       if (verbose > 0) write(iu6, *) 'copied offdiagion%d_ne'
-     end if
- 
-     if (associated(structure_in%d_te)) then
-       if (associated(structure_out%d_te)) then
-         if (size(structure_in%d_te) &
-          /= size(structure_out%d_te)) &
-          deallocate(structure_out%d_te)
-       end if
-       if (.not. associated(structure_out%d_te)) then
-         allocate(structure_out%d_te(size(structure_in%d_te, 1), &
-          size(structure_in%d_te, 2)))
-       end if
-       structure_out%d_te = structure_in%d_te
-       if (verbose > 0) write(iu6, *) 'copied offdiagion%d_te'
-     end if
- 
-     if (associated(structure_in%d_epar)) then
-       if (associated(structure_out%d_epar)) then
-         if (size(structure_in%d_epar) &
-          /= size(structure_out%d_epar)) &
-          deallocate(structure_out%d_epar)
-       end if
-       if (.not. associated(structure_out%d_epar)) then
-         allocate(structure_out%d_epar(size(structure_in%d_epar, 1), &
-          size(structure_in%d_epar, 2)))
-       end if
-       structure_out%d_epar = structure_in%d_epar
-       if (verbose > 0) write(iu6, *) 'copied offdiagion%d_epar'
-     end if
- 
-     if (associated(structure_in%d_mtor)) then
-       if (associated(structure_out%d_mtor)) then
-         if (size(structure_in%d_mtor) &
-          /= size(structure_out%d_mtor)) &
-          deallocate(structure_out%d_mtor)
-       end if
-       if (.not. associated(structure_out%d_mtor)) then
-         allocate(structure_out%d_mtor(size(structure_in%d_mtor, 1), &
-          size(structure_in%d_mtor, 2)))
-       end if
-       structure_out%d_mtor = structure_in%d_mtor
-       if (verbose > 0) write(iu6, *) 'copied offdiagion%d_mtor'
-     end if
- 
-   end subroutine copy_type_offdiagion
- 
-   subroutine copy_type_reduced(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_reduced), intent(in) :: structure_in
-     type (type_reduced), intent(inout) :: structure_out
- 
-     if (structure_in%value /= -9.0D40) then
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied reduced%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied reduced%source'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied reduced%time'
-     end if
- 
-   end subroutine copy_type_reduced
- 
-   subroutine copy_type_reggrid(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_reggrid), intent(in) :: structure_in
-     type (type_reggrid), intent(inout) :: structure_out
- 
-     if (associated(structure_in%dim1)) then
-       if (associated(structure_out%dim1)) then
-         if (size(structure_in%dim1) &
-          /= size(structure_out%dim1)) &
-          deallocate(structure_out%dim1)
-       end if
-       if (.not. associated(structure_out%dim1)) then
-         allocate(structure_out%dim1(size(structure_in%dim1, 1)))
-       end if
-       structure_out%dim1 = structure_in%dim1
-       if (verbose > 0) write(iu6, *) 'copied reggrid%dim1'
-     end if
- 
-     if (associated(structure_in%dim2)) then
-       if (associated(structure_out%dim2)) then
-         if (size(structure_in%dim2) &
-          /= size(structure_out%dim2)) &
-          deallocate(structure_out%dim2)
-       end if
-       if (.not. associated(structure_out%dim2)) then
-         allocate(structure_out%dim2(size(structure_in%dim2, 1)))
-       end if
-       structure_out%dim2 = structure_in%dim2
-       if (verbose > 0) write(iu6, *) 'copied reggrid%dim2'
-     end if
- 
-   end subroutine copy_type_reggrid
- 
-   subroutine copy_type_rf_beam(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rf_beam), intent(in) :: structure_in
-     type (type_rf_beam), intent(inout) :: structure_out
- 
-     call copy_type_spot(structure_in%spot, structure_out%spot)
- 
-     call copy_type_phaseellipse(structure_in%phaseellipse, structure_out%phaseellipse)
- 
-   end subroutine copy_type_rf_beam
- 
-   subroutine copy_type_rz0D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rz0D), intent(in) :: structure_in
-     type (type_rz0D), intent(inout) :: structure_out
- 
-     if (structure_in%r /= -9.0D40) then
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied rz0D%r'
-     end if
- 
-     if (structure_in%z /= -9.0D40) then
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied rz0D%z'
-     end if
- 
-   end subroutine copy_type_rz0D
- 
-   subroutine copy_type_rz1D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rz1D), intent(in) :: structure_in
-     type (type_rz1D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied rz1D%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied rz1D%z'
-     end if
- 
-   end subroutine copy_type_rz1D
- 
-   subroutine copy_type_rz1D_npoints(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rz1D_npoints), intent(in) :: structure_in
-     type (type_rz1D_npoints), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied rz1D_npoints%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied rz1D_npoints%z'
-     end if
- 
-     if (structure_in%npoints /= -999999999) then
-       structure_out%npoints = structure_in%npoints
-       if (verbose > 0) write(iu6, *) 'copied rz1D_npoints%npoints'
-     end if
- 
-   end subroutine copy_type_rz1D_npoints
- 
-   subroutine copy_type_rz2D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rz2D), intent(in) :: structure_in
-     type (type_rz2D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1), &
-          size(structure_in%r, 2)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied rz2D%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1), &
-          size(structure_in%z, 2)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied rz2D%z'
-     end if
- 
-   end subroutine copy_type_rz2D
- 
-   subroutine copy_type_rz3D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rz3D), intent(in) :: structure_in
-     type (type_rz3D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1), &
-          size(structure_in%r, 2), &
-          size(structure_in%r, 3)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied rz3D%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1), &
-          size(structure_in%z, 2), &
-          size(structure_in%z, 3)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied rz3D%z'
-     end if
- 
-   end subroutine copy_type_rz3D
- 
-   subroutine copy_type_rzphi1D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rzphi1D), intent(in) :: structure_in
-     type (type_rzphi1D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied rzphi1D%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied rzphi1D%z'
-     end if
- 
-     if (associated(structure_in%phi)) then
-       if (associated(structure_out%phi)) then
-         if (size(structure_in%phi) &
-          /= size(structure_out%phi)) &
-          deallocate(structure_out%phi)
-       end if
-       if (.not. associated(structure_out%phi)) then
-         allocate(structure_out%phi(size(structure_in%phi, 1)))
-       end if
-       structure_out%phi = structure_in%phi
-       if (verbose > 0) write(iu6, *) 'copied rzphi1D%phi'
-     end if
- 
-   end subroutine copy_type_rzphi1D
- 
-   subroutine copy_type_rzphi2D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_rzphi2D), intent(in) :: structure_in
-     type (type_rzphi2D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1), &
-          size(structure_in%r, 2)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied rzphi2D%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1), &
-          size(structure_in%z, 2)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied rzphi2D%z'
-     end if
- 
-     if (associated(structure_in%phi)) then
-       if (associated(structure_out%phi)) then
-         if (size(structure_in%phi) &
-          /= size(structure_out%phi)) &
-          deallocate(structure_out%phi)
-       end if
-       if (.not. associated(structure_out%phi)) then
-         allocate(structure_out%phi(size(structure_in%phi, 1), &
-          size(structure_in%phi, 2)))
-       end if
-       structure_out%phi = structure_in%phi
-       if (verbose > 0) write(iu6, *) 'copied rzphi2D%phi'
-     end if
- 
-   end subroutine copy_type_rzphi2D
- 
-   subroutine copy_type_setup_line(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_setup_line), intent(in) :: structure_in
-     type (type_setup_line), intent(inout) :: structure_out
- 
-     call copy_type_rzphi1D(structure_in%pivot_point, structure_out%pivot_point)
- 
-     if (associated(structure_in%polchordang)) then
-       if (associated(structure_out%polchordang)) then
-         if (size(structure_in%polchordang) &
-          /= size(structure_out%polchordang)) &
-          deallocate(structure_out%polchordang)
-       end if
-       if (.not. associated(structure_out%polchordang)) then
-         allocate(structure_out%polchordang(size(structure_in%polchordang, 1)))
-       end if
-       structure_out%polchordang = structure_in%polchordang
-       if (verbose > 0) write(iu6, *) 'copied setup_line%polchordang'
-     end if
- 
-     if (associated(structure_in%torchordang)) then
-       if (associated(structure_out%torchordang)) then
-         if (size(structure_in%torchordang) &
-          /= size(structure_out%torchordang)) &
-          deallocate(structure_out%torchordang)
-       end if
-       if (.not. associated(structure_out%torchordang)) then
-         allocate(structure_out%torchordang(size(structure_in%torchordang, 1)))
-       end if
-       structure_out%torchordang = structure_in%torchordang
-       if (verbose > 0) write(iu6, *) 'copied setup_line%torchordang'
-     end if
- 
-     call copy_type_rzphi1D(structure_in%second_point, structure_out%second_point)
- 
-     if (structure_in%nchordpoints /= -999999999) then
-       structure_out%nchordpoints = structure_in%nchordpoints
-       if (verbose > 0) write(iu6, *) 'copied setup_line%nchordpoints'
-     end if
- 
-   end subroutine copy_type_setup_line
- 
-   subroutine copy_type_source_ion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_source_ion), intent(in) :: structure_in
-     type (type_source_ion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%exp)) then
-       if (associated(structure_out%exp)) then
-         if (size(structure_in%exp) &
-          /= size(structure_out%exp)) &
-          deallocate(structure_out%exp)
-       end if
-       if (.not. associated(structure_out%exp)) then
-         allocate(structure_out%exp(size(structure_in%exp, 1), &
-          size(structure_in%exp, 2)))
-       end if
-       structure_out%exp = structure_in%exp
-       if (verbose > 0) write(iu6, *) 'copied source_ion%exp'
-     end if
- 
-     if (associated(structure_in%imp)) then
-       if (associated(structure_out%imp)) then
-         if (size(structure_in%imp) &
-          /= size(structure_out%imp)) &
-          deallocate(structure_out%imp)
-       end if
-       if (.not. associated(structure_out%imp)) then
-         allocate(structure_out%imp(size(structure_in%imp, 1), &
-          size(structure_in%imp, 2)))
-       end if
-       structure_out%imp = structure_in%imp
-       if (verbose > 0) write(iu6, *) 'copied source_ion%imp'
-     end if
- 
-   end subroutine copy_type_source_ion
- 
-   subroutine copy_type_source_imp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_source_imp), intent(in) :: structure_in
-     type (type_source_imp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%exp)) then
-       if (associated(structure_out%exp)) then
-         if (size(structure_in%exp) &
-          /= size(structure_out%exp)) &
-          deallocate(structure_out%exp)
-       end if
-       if (.not. associated(structure_out%exp)) then
-         allocate(structure_out%exp(size(structure_in%exp, 1), &
-          size(structure_in%exp, 2), &
-          size(structure_in%exp, 3)))
-       end if
-       structure_out%exp = structure_in%exp
-       if (verbose > 0) write(iu6, *) 'copied source_imp%exp'
-     end if
- 
-     if (associated(structure_in%imp)) then
-       if (associated(structure_out%imp)) then
-         if (size(structure_in%imp) &
-          /= size(structure_out%imp)) &
-          deallocate(structure_out%imp)
-       end if
-       if (.not. associated(structure_out%imp)) then
-         allocate(structure_out%imp(size(structure_in%imp, 1), &
-          size(structure_in%imp, 2), &
-          size(structure_in%imp, 3)))
-       end if
-       structure_out%imp = structure_in%imp
-       if (verbose > 0) write(iu6, *) 'copied source_imp%imp'
-     end if
- 
-   end subroutine copy_type_source_imp
- 
-   subroutine copy_type_source_el(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_source_el), intent(in) :: structure_in
-     type (type_source_el), intent(inout) :: structure_out
- 
-     if (associated(structure_in%exp)) then
-       if (associated(structure_out%exp)) then
-         if (size(structure_in%exp) &
-          /= size(structure_out%exp)) &
-          deallocate(structure_out%exp)
-       end if
-       if (.not. associated(structure_out%exp)) then
-         allocate(structure_out%exp(size(structure_in%exp, 1)))
-       end if
-       structure_out%exp = structure_in%exp
-       if (verbose > 0) write(iu6, *) 'copied source_el%exp'
-     end if
- 
-     if (associated(structure_in%imp)) then
-       if (associated(structure_out%imp)) then
-         if (size(structure_in%imp) &
-          /= size(structure_out%imp)) &
-          deallocate(structure_out%imp)
-       end if
-       if (.not. associated(structure_out%imp)) then
-         allocate(structure_out%imp(size(structure_in%imp, 1)))
-       end if
-       structure_out%imp = structure_in%imp
-       if (verbose > 0) write(iu6, *) 'copied source_el%imp'
-     end if
- 
-   end subroutine copy_type_source_el
- 
-   subroutine copy_type_transcoefion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_transcoefion), intent(in) :: structure_in
-     type (type_transcoefion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff_eff)) then
-       if (associated(structure_out%diff_eff)) then
-         if (size(structure_in%diff_eff) &
-          /= size(structure_out%diff_eff)) &
-          deallocate(structure_out%diff_eff)
-       end if
-       if (.not. associated(structure_out%diff_eff)) then
-         allocate(structure_out%diff_eff(size(structure_in%diff_eff, 1), &
-          size(structure_in%diff_eff, 2)))
-       end if
-       structure_out%diff_eff = structure_in%diff_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefion%diff_eff'
-     end if
- 
-     if (associated(structure_in%vconv_eff)) then
-       if (associated(structure_out%vconv_eff)) then
-         if (size(structure_in%vconv_eff) &
-          /= size(structure_out%vconv_eff)) &
-          deallocate(structure_out%vconv_eff)
-       end if
-       if (.not. associated(structure_out%vconv_eff)) then
-         allocate(structure_out%vconv_eff(size(structure_in%vconv_eff, 1), &
-          size(structure_in%vconv_eff, 2)))
-       end if
-       structure_out%vconv_eff = structure_in%vconv_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefion%vconv_eff'
-     end if
- 
-     if (associated(structure_in%exchange)) then
-       if (associated(structure_out%exchange)) then
-         if (size(structure_in%exchange) &
-          /= size(structure_out%exchange)) &
-          deallocate(structure_out%exchange)
-       end if
-       if (.not. associated(structure_out%exchange)) then
-         allocate(structure_out%exchange(size(structure_in%exchange, 1), &
-          size(structure_in%exchange, 2)))
-       end if
-       structure_out%exchange = structure_in%exchange
-       if (verbose > 0) write(iu6, *) 'copied transcoefion%exchange'
-     end if
- 
-     if (associated(structure_in%qgi)) then
-       if (associated(structure_out%qgi)) then
-         if (size(structure_in%qgi) &
-          /= size(structure_out%qgi)) &
-          deallocate(structure_out%qgi)
-       end if
-       if (.not. associated(structure_out%qgi)) then
-         allocate(structure_out%qgi(size(structure_in%qgi, 1), &
-          size(structure_in%qgi, 2)))
-       end if
-       structure_out%qgi = structure_in%qgi
-       if (verbose > 0) write(iu6, *) 'copied transcoefion%qgi'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1), &
-          size(structure_in%flux, 2)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied transcoefion%flux'
-     end if
- 
-     call copy_type_offdiagion(structure_in%off_diagonal, structure_out%off_diagonal)
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied transcoefion%flag'
-     end if
- 
-   end subroutine copy_type_transcoefion
- 
-   subroutine copy_type_transcoefel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_transcoefel), intent(in) :: structure_in
-     type (type_transcoefel), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff_eff)) then
-       if (associated(structure_out%diff_eff)) then
-         if (size(structure_in%diff_eff) &
-          /= size(structure_out%diff_eff)) &
-          deallocate(structure_out%diff_eff)
-       end if
-       if (.not. associated(structure_out%diff_eff)) then
-         allocate(structure_out%diff_eff(size(structure_in%diff_eff, 1)))
-       end if
-       structure_out%diff_eff = structure_in%diff_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefel%diff_eff'
-     end if
- 
-     if (associated(structure_in%vconv_eff)) then
-       if (associated(structure_out%vconv_eff)) then
-         if (size(structure_in%vconv_eff) &
-          /= size(structure_out%vconv_eff)) &
-          deallocate(structure_out%vconv_eff)
-       end if
-       if (.not. associated(structure_out%vconv_eff)) then
-         allocate(structure_out%vconv_eff(size(structure_in%vconv_eff, 1)))
-       end if
-       structure_out%vconv_eff = structure_in%vconv_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefel%vconv_eff'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied transcoefel%flux'
-     end if
- 
-     call copy_type_offdiagel(structure_in%off_diagonal, structure_out%off_diagonal)
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied transcoefel%flag'
-     end if
- 
-   end subroutine copy_type_transcoefel
- 
-   subroutine copy_type_transcoefvtor(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_transcoefvtor), intent(in) :: structure_in
-     type (type_transcoefvtor), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff_eff)) then
-       if (associated(structure_out%diff_eff)) then
-         if (size(structure_in%diff_eff) &
-          /= size(structure_out%diff_eff)) &
-          deallocate(structure_out%diff_eff)
-       end if
-       if (.not. associated(structure_out%diff_eff)) then
-         allocate(structure_out%diff_eff(size(structure_in%diff_eff, 1), &
-          size(structure_in%diff_eff, 2)))
-       end if
-       structure_out%diff_eff = structure_in%diff_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefvtor%diff_eff'
-     end if
- 
-     if (associated(structure_in%vconv_eff)) then
-       if (associated(structure_out%vconv_eff)) then
-         if (size(structure_in%vconv_eff) &
-          /= size(structure_out%vconv_eff)) &
-          deallocate(structure_out%vconv_eff)
-       end if
-       if (.not. associated(structure_out%vconv_eff)) then
-         allocate(structure_out%vconv_eff(size(structure_in%vconv_eff, 1), &
-          size(structure_in%vconv_eff, 2)))
-       end if
-       structure_out%vconv_eff = structure_in%vconv_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefvtor%vconv_eff'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1), &
-          size(structure_in%flux, 2)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied transcoefvtor%flux'
-     end if
- 
-     call copy_type_offdiagion(structure_in%off_diagonal, structure_out%off_diagonal)
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied transcoefvtor%flag'
-     end if
- 
-   end subroutine copy_type_transcoefvtor
- 
-   subroutine copy_type_transcoefimp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_transcoefimp), intent(in) :: structure_in
-     type (type_transcoefimp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff_eff)) then
-       if (associated(structure_out%diff_eff)) then
-         if (size(structure_in%diff_eff) &
-          /= size(structure_out%diff_eff)) &
-          deallocate(structure_out%diff_eff)
-       end if
-       if (.not. associated(structure_out%diff_eff)) then
-         allocate(structure_out%diff_eff(size(structure_in%diff_eff, 1), &
-          size(structure_in%diff_eff, 2), &
-          size(structure_in%diff_eff, 3)))
-       end if
-       structure_out%diff_eff = structure_in%diff_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefimp%diff_eff'
-     end if
- 
-     if (associated(structure_in%vconv_eff)) then
-       if (associated(structure_out%vconv_eff)) then
-         if (size(structure_in%vconv_eff) &
-          /= size(structure_out%vconv_eff)) &
-          deallocate(structure_out%vconv_eff)
-       end if
-       if (.not. associated(structure_out%vconv_eff)) then
-         allocate(structure_out%vconv_eff(size(structure_in%vconv_eff, 1), &
-          size(structure_in%vconv_eff, 2), &
-          size(structure_in%vconv_eff, 3)))
-       end if
-       structure_out%vconv_eff = structure_in%vconv_eff
-       if (verbose > 0) write(iu6, *) 'copied transcoefimp%vconv_eff'
-     end if
- 
-     if (associated(structure_in%exchange)) then
-       if (associated(structure_out%exchange)) then
-         if (size(structure_in%exchange) &
-          /= size(structure_out%exchange)) &
-          deallocate(structure_out%exchange)
-       end if
-       if (.not. associated(structure_out%exchange)) then
-         allocate(structure_out%exchange(size(structure_in%exchange, 1), &
-          size(structure_in%exchange, 2), &
-          size(structure_in%exchange, 3)))
-       end if
-       structure_out%exchange = structure_in%exchange
-       if (verbose > 0) write(iu6, *) 'copied transcoefimp%exchange'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1), &
-          size(structure_in%flux, 2), &
-          size(structure_in%flux, 3)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied transcoefimp%flux'
-     end if
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied transcoefimp%flag'
-     end if
- 
-   end subroutine copy_type_transcoefimp
- 
-   subroutine copy_type_lineintegraldiag(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_lineintegraldiag), intent(in) :: structure_in
-     type (type_lineintegraldiag), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%expression)) then
-       if (associated(structure_out%expression)) then
-         if (size(structure_in%expression) &
-          /= size(structure_out%expression)) &
-          deallocate(structure_out%expression)
-       end if
-       if (.not. associated(structure_out%expression)) then
-         allocate(structure_out%expression(size(structure_in%expression)))
-       end if
-       structure_out%expression = structure_in%expression
-       if (verbose > 0) write(iu6, *) 'copied lineintegraldiag%expression'
-     end if
- 
-     call copy_type_setup_line(structure_in%setup_line, structure_out%setup_line)
- 
-     call copy_type_exp1D(structure_in%measure, structure_out%measure)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied lineintegraldiag%time'
-     end if
- 
-   end subroutine copy_type_lineintegraldiag
- 
-   subroutine copy_type_waveguides(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waveguides), intent(in) :: structure_in
-     type (type_waveguides), intent(inout) :: structure_out
- 
-     if (associated(structure_in%nwm_theta)) then
-       if (associated(structure_out%nwm_theta)) then
-         if (size(structure_in%nwm_theta) &
-          /= size(structure_out%nwm_theta)) &
-          deallocate(structure_out%nwm_theta)
-       end if
-       if (.not. associated(structure_out%nwm_theta)) then
-         allocate(structure_out%nwm_theta(size(structure_in%nwm_theta, 1)))
-       end if
-       structure_out%nwm_theta = structure_in%nwm_theta
-       if (verbose > 0) write(iu6, *) 'copied waveguides%nwm_theta'
-     end if
- 
-     if (associated(structure_in%nwm_phi)) then
-       if (associated(structure_out%nwm_phi)) then
-         if (size(structure_in%nwm_phi) &
-          /= size(structure_out%nwm_phi)) &
-          deallocate(structure_out%nwm_phi)
-       end if
-       if (.not. associated(structure_out%nwm_phi)) then
-         allocate(structure_out%nwm_phi(size(structure_in%nwm_phi, 1)))
-       end if
-       structure_out%nwm_phi = structure_in%nwm_phi
-       if (verbose > 0) write(iu6, *) 'copied waveguides%nwm_phi'
-     end if
- 
-     if (associated(structure_in%mask)) then
-       if (associated(structure_out%mask)) then
-         if (size(structure_in%mask) &
-          /= size(structure_out%mask)) &
-          deallocate(structure_out%mask)
-       end if
-       if (.not. associated(structure_out%mask)) then
-         allocate(structure_out%mask(size(structure_in%mask, 1), &
-          size(structure_in%mask, 2)))
-       end if
-       structure_out%mask = structure_in%mask
-       if (verbose > 0) write(iu6, *) 'copied waveguides%mask'
-     end if
- 
-     if (associated(structure_in%npwbm_phi)) then
-       if (associated(structure_out%npwbm_phi)) then
-         if (size(structure_in%npwbm_phi) &
-          /= size(structure_out%npwbm_phi)) &
-          deallocate(structure_out%npwbm_phi)
-       end if
-       if (.not. associated(structure_out%npwbm_phi)) then
-         allocate(structure_out%npwbm_phi(size(structure_in%npwbm_phi, 1)))
-       end if
-       structure_out%npwbm_phi = structure_in%npwbm_phi
-       if (verbose > 0) write(iu6, *) 'copied waveguides%npwbm_phi'
-     end if
- 
-     if (associated(structure_in%npwe_phi)) then
-       if (associated(structure_out%npwe_phi)) then
-         if (size(structure_in%npwe_phi) &
-          /= size(structure_out%npwe_phi)) &
-          deallocate(structure_out%npwe_phi)
-       end if
-       if (.not. associated(structure_out%npwe_phi)) then
-         allocate(structure_out%npwe_phi(size(structure_in%npwe_phi, 1)))
-       end if
-       structure_out%npwe_phi = structure_in%npwe_phi
-       if (verbose > 0) write(iu6, *) 'copied waveguides%npwe_phi'
-     end if
- 
-     if (associated(structure_in%sw_theta)) then
-       if (associated(structure_out%sw_theta)) then
-         if (size(structure_in%sw_theta) &
-          /= size(structure_out%sw_theta)) &
-          deallocate(structure_out%sw_theta)
-       end if
-       if (.not. associated(structure_out%sw_theta)) then
-         allocate(structure_out%sw_theta(size(structure_in%sw_theta, 1)))
-       end if
-       structure_out%sw_theta = structure_in%sw_theta
-       if (verbose > 0) write(iu6, *) 'copied waveguides%sw_theta'
-     end if
- 
-     if (associated(structure_in%hw_theta)) then
-       if (associated(structure_out%hw_theta)) then
-         if (size(structure_in%hw_theta) &
-          /= size(structure_out%hw_theta)) &
-          deallocate(structure_out%hw_theta)
-       end if
-       if (.not. associated(structure_out%hw_theta)) then
-         allocate(structure_out%hw_theta(size(structure_in%hw_theta, 1)))
-       end if
-       structure_out%hw_theta = structure_in%hw_theta
-       if (verbose > 0) write(iu6, *) 'copied waveguides%hw_theta'
-     end if
- 
-     if (associated(structure_in%bwa)) then
-       if (associated(structure_out%bwa)) then
-         if (size(structure_in%bwa) &
-          /= size(structure_out%bwa)) &
-          deallocate(structure_out%bwa)
-       end if
-       if (.not. associated(structure_out%bwa)) then
-         allocate(structure_out%bwa(size(structure_in%bwa, 1)))
-       end if
-       structure_out%bwa = structure_in%bwa
-       if (verbose > 0) write(iu6, *) 'copied waveguides%bwa'
-     end if
- 
-     if (associated(structure_in%biwp)) then
-       if (associated(structure_out%biwp)) then
-         if (size(structure_in%biwp) &
-          /= size(structure_out%biwp)) &
-          deallocate(structure_out%biwp)
-       end if
-       if (.not. associated(structure_out%biwp)) then
-         allocate(structure_out%biwp(size(structure_in%biwp, 1)))
-       end if
-       structure_out%biwp = structure_in%biwp
-       if (verbose > 0) write(iu6, *) 'copied waveguides%biwp'
-     end if
- 
-     if (associated(structure_in%bewp)) then
-       if (associated(structure_out%bewp)) then
-         if (size(structure_in%bewp) &
-          /= size(structure_out%bewp)) &
-          deallocate(structure_out%bewp)
-       end if
-       if (.not. associated(structure_out%bewp)) then
-         allocate(structure_out%bewp(size(structure_in%bewp, 1)))
-       end if
-       structure_out%bewp = structure_in%bewp
-       if (verbose > 0) write(iu6, *) 'copied waveguides%bewp'
-     end if
- 
-     if (associated(structure_in%e_phi)) then
-       if (associated(structure_out%e_phi)) then
-         if (size(structure_in%e_phi) &
-          /= size(structure_out%e_phi)) &
-          deallocate(structure_out%e_phi)
-       end if
-       if (.not. associated(structure_out%e_phi)) then
-         allocate(structure_out%e_phi(size(structure_in%e_phi, 1), &
-          size(structure_in%e_phi, 2)))
-       end if
-       structure_out%e_phi = structure_in%e_phi
-       if (verbose > 0) write(iu6, *) 'copied waveguides%e_phi'
-     end if
- 
-     if (associated(structure_in%scl)) then
-       if (associated(structure_out%scl)) then
-         if (size(structure_in%scl) &
-          /= size(structure_out%scl)) &
-          deallocate(structure_out%scl)
-       end if
-       if (.not. associated(structure_out%scl)) then
-         allocate(structure_out%scl(size(structure_in%scl, 1), &
-          size(structure_in%scl, 2)))
-       end if
-       structure_out%scl = structure_in%scl
-       if (verbose > 0) write(iu6, *) 'copied waveguides%scl'
-     end if
- 
-   end subroutine copy_type_waveguides
- 
-   subroutine copy_type_modules(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_modules), intent(in) :: structure_in
-     type (type_modules), intent(inout) :: structure_out
- 
-     if (associated(structure_in%nma_theta)) then
-       if (associated(structure_out%nma_theta)) then
-         if (size(structure_in%nma_theta) &
-          /= size(structure_out%nma_theta)) &
-          deallocate(structure_out%nma_theta)
-       end if
-       if (.not. associated(structure_out%nma_theta)) then
-         allocate(structure_out%nma_theta(size(structure_in%nma_theta, 1)))
-       end if
-       structure_out%nma_theta = structure_in%nma_theta
-       if (verbose > 0) write(iu6, *) 'copied modules%nma_theta'
-     end if
- 
-     if (associated(structure_in%nma_phi)) then
-       if (associated(structure_out%nma_phi)) then
-         if (size(structure_in%nma_phi) &
-          /= size(structure_out%nma_phi)) &
-          deallocate(structure_out%nma_phi)
-       end if
-       if (.not. associated(structure_out%nma_phi)) then
-         allocate(structure_out%nma_phi(size(structure_in%nma_phi, 1)))
-       end if
-       structure_out%nma_phi = structure_in%nma_phi
-       if (verbose > 0) write(iu6, *) 'copied modules%nma_phi'
-     end if
- 
-     if (associated(structure_in%sm_theta)) then
-       if (associated(structure_out%sm_theta)) then
-         if (size(structure_in%sm_theta) &
-          /= size(structure_out%sm_theta)) &
-          deallocate(structure_out%sm_theta)
-       end if
-       if (.not. associated(structure_out%sm_theta)) then
-         allocate(structure_out%sm_theta(size(structure_in%sm_theta, 1)))
-       end if
-       structure_out%sm_theta = structure_in%sm_theta
-       if (verbose > 0) write(iu6, *) 'copied modules%sm_theta'
-     end if
- 
-     if (associated(structure_in%amplitude)) then
-       if (associated(structure_out%amplitude)) then
-         if (size(structure_in%amplitude) &
-          /= size(structure_out%amplitude)) &
-          deallocate(structure_out%amplitude)
-       end if
-       if (.not. associated(structure_out%amplitude)) then
-         allocate(structure_out%amplitude(size(structure_in%amplitude, 1), &
-          size(structure_in%amplitude, 2), &
-          size(structure_in%amplitude, 3)))
-       end if
-       structure_out%amplitude = structure_in%amplitude
-       if (verbose > 0) write(iu6, *) 'copied modules%amplitude'
-     end if
- 
-     if (associated(structure_in%phase)) then
-       if (associated(structure_out%phase)) then
-         if (size(structure_in%phase) &
-          /= size(structure_out%phase)) &
-          deallocate(structure_out%phase)
-       end if
-       if (.not. associated(structure_out%phase)) then
-         allocate(structure_out%phase(size(structure_in%phase, 1), &
-          size(structure_in%phase, 2), &
-          size(structure_in%phase, 3)))
-       end if
-       structure_out%phase = structure_in%phase
-       if (verbose > 0) write(iu6, *) 'copied modules%phase'
-     end if
- 
-     call copy_type_waveguides(structure_in%waveguides, structure_out%waveguides)
- 
-   end subroutine copy_type_modules
- 
-   subroutine copy_type_antennalh_setup(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_antennalh_setup), intent(in) :: structure_in
-     type (type_antennalh_setup), intent(inout) :: structure_out
- 
-     call copy_type_modules(structure_in%modules, structure_out%modules)
- 
-   end subroutine copy_type_antennalh_setup
- 
-   subroutine copy_type_launchangles(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_launchangles), intent(in) :: structure_in
-     type (type_launchangles), intent(inout) :: structure_out
- 
-     if (associated(structure_in%alpha)) then
-       if (associated(structure_out%alpha)) then
-         if (size(structure_in%alpha) &
-          /= size(structure_out%alpha)) &
-          deallocate(structure_out%alpha)
-       end if
-       if (.not. associated(structure_out%alpha)) then
-         allocate(structure_out%alpha(size(structure_in%alpha, 1)))
-       end if
-       structure_out%alpha = structure_in%alpha
-       if (verbose > 0) write(iu6, *) 'copied launchangles%alpha'
-     end if
- 
-     if (associated(structure_in%beta)) then
-       if (associated(structure_out%beta)) then
-         if (size(structure_in%beta) &
-          /= size(structure_out%beta)) &
-          deallocate(structure_out%beta)
-       end if
-       if (.not. associated(structure_out%beta)) then
-         allocate(structure_out%beta(size(structure_in%beta, 1)))
-       end if
-       structure_out%beta = structure_in%beta
-       if (verbose > 0) write(iu6, *) 'copied launchangles%beta'
-     end if
- 
-   end subroutine copy_type_launchangles
- 
-   subroutine copy_type_plasmaedge(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_plasmaedge), intent(in) :: structure_in
-     type (type_plasmaedge), intent(inout) :: structure_out
- 
-     if (associated(structure_in%nmode)) then
-       if (associated(structure_out%nmode)) then
-         if (size(structure_in%nmode) &
-          /= size(structure_out%nmode)) &
-          deallocate(structure_out%nmode)
-       end if
-       if (.not. associated(structure_out%nmode)) then
-         allocate(structure_out%nmode(size(structure_in%nmode, 1)))
-       end if
-       structure_out%nmode = structure_in%nmode
-       if (verbose > 0) write(iu6, *) 'copied plasmaedge%nmode'
-     end if
- 
-     if (associated(structure_in%npoints)) then
-       if (associated(structure_out%npoints)) then
-         if (size(structure_in%npoints) &
-          /= size(structure_out%npoints)) &
-          deallocate(structure_out%npoints)
-       end if
-       if (.not. associated(structure_out%npoints)) then
-         allocate(structure_out%npoints(size(structure_in%npoints, 1)))
-       end if
-       structure_out%npoints = structure_in%npoints
-       if (verbose > 0) write(iu6, *) 'copied plasmaedge%npoints'
-     end if
- 
-     if (associated(structure_in%distance)) then
-       if (associated(structure_out%distance)) then
-         if (size(structure_in%distance) &
-          /= size(structure_out%distance)) &
-          deallocate(structure_out%distance)
-       end if
-       if (.not. associated(structure_out%distance)) then
-         allocate(structure_out%distance(size(structure_in%distance, 1), &
-          size(structure_in%distance, 2)))
-       end if
-       structure_out%distance = structure_in%distance
-       if (verbose > 0) write(iu6, *) 'copied plasmaedge%distance'
-     end if
- 
-     if (associated(structure_in%density)) then
-       if (associated(structure_out%density)) then
-         if (size(structure_in%density) &
-          /= size(structure_out%density)) &
-          deallocate(structure_out%density)
-       end if
-       if (.not. associated(structure_out%density)) then
-         allocate(structure_out%density(size(structure_in%density, 1), &
-          size(structure_in%density, 2)))
-       end if
-       structure_out%density = structure_in%density
-       if (verbose > 0) write(iu6, *) 'copied plasmaedge%density'
-     end if
- 
-   end subroutine copy_type_plasmaedge
- 
-   subroutine copy_type_antenna_ec(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_antenna_ec), intent(in) :: structure_in
-     type (type_antenna_ec), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied antenna_ec%name'
-     end if
- 
-     if (associated(structure_in%frequency)) then
-       if (associated(structure_out%frequency)) then
-         if (size(structure_in%frequency) &
-          /= size(structure_out%frequency)) &
-          deallocate(structure_out%frequency)
-       end if
-       if (.not. associated(structure_out%frequency)) then
-         allocate(structure_out%frequency(size(structure_in%frequency, 1)))
-       end if
-       structure_out%frequency = structure_in%frequency
-       if (verbose > 0) write(iu6, *) 'copied antenna_ec%frequency'
-     end if
- 
-     call copy_type_exp1D(structure_in%power, structure_out%power)
- 
-     if (associated(structure_in%mode)) then
-       if (associated(structure_out%mode)) then
-         if (size(structure_in%mode) &
-          /= size(structure_out%mode)) &
-          deallocate(structure_out%mode)
-       end if
-       if (.not. associated(structure_out%mode)) then
-         allocate(structure_out%mode(size(structure_in%mode, 1)))
-       end if
-       structure_out%mode = structure_in%mode
-       if (verbose > 0) write(iu6, *) 'copied antenna_ec%mode'
-     end if
- 
-     call copy_type_rzphi1D(structure_in%position, structure_out%position)
- 
-     call copy_type_launchangles(structure_in%launchangles, structure_out%launchangles)
- 
-     call copy_type_rf_beam(structure_in%beam, structure_out%beam)
- 
-   end subroutine copy_type_antenna_ec
- 
-   subroutine copy_type_antenna_ic(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_antenna_ic), intent(in) :: structure_in
-     type (type_antenna_ic), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied antenna_ic%name'
-     end if
- 
-     if (associated(structure_in%frequency)) then
-       if (associated(structure_out%frequency)) then
-         if (size(structure_in%frequency) &
-          /= size(structure_out%frequency)) &
-          deallocate(structure_out%frequency)
-       end if
-       if (.not. associated(structure_out%frequency)) then
-         allocate(structure_out%frequency(size(structure_in%frequency, 1)))
-       end if
-       structure_out%frequency = structure_in%frequency
-       if (verbose > 0) write(iu6, *) 'copied antenna_ic%frequency'
-     end if
- 
-     call copy_type_exp1D(structure_in%power, structure_out%power)
- 
-     call copy_type_rzphi1D(structure_in%position, structure_out%position)
- 
-   end subroutine copy_type_antenna_ic
- 
-   subroutine copy_type_antenna_lh(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_antenna_lh), intent(in) :: structure_in
-     type (type_antenna_lh), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied antenna_lh%name'
-     end if
- 
-     if (associated(structure_in%frequency)) then
-       if (associated(structure_out%frequency)) then
-         if (size(structure_in%frequency) &
-          /= size(structure_out%frequency)) &
-          deallocate(structure_out%frequency)
-       end if
-       if (.not. associated(structure_out%frequency)) then
-         allocate(structure_out%frequency(size(structure_in%frequency, 1)))
-       end if
-       structure_out%frequency = structure_in%frequency
-       if (verbose > 0) write(iu6, *) 'copied antenna_lh%frequency'
-     end if
- 
-     call copy_type_exp1D(structure_in%power, structure_out%power)
- 
-     if (associated(structure_in%mode)) then
-       if (associated(structure_out%mode)) then
-         if (size(structure_in%mode) &
-          /= size(structure_out%mode)) &
-          deallocate(structure_out%mode)
-       end if
-       if (.not. associated(structure_out%mode)) then
-         allocate(structure_out%mode(size(structure_in%mode, 1)))
-       end if
-       structure_out%mode = structure_in%mode
-       if (verbose > 0) write(iu6, *) 'copied antenna_lh%mode'
-     end if
- 
-     call copy_type_rzphi1D(structure_in%position, structure_out%position)
- 
-     call copy_type_antennalh_setup(structure_in%setup, structure_out%setup)
- 
-     call copy_type_plasmaedge(structure_in%plasmaedge, structure_out%plasmaedge)
- 
-     call copy_type_rf_beam(structure_in%beam, structure_out%beam)
- 
-   end subroutine copy_type_antenna_lh
- 
-   subroutine copy_type_antennas(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_antennas), intent(in) :: structure_in
-     type (type_antennas), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_antenna_ec(structure_in%antenna_ec, structure_out%antenna_ec)
- 
-     call copy_type_antenna_ic(structure_in%antenna_ic, structure_out%antenna_ic)
- 
-     call copy_type_antenna_lh(structure_in%antenna_lh, structure_out%antenna_lh)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied antennas%time'
-     end if
- 
-   end subroutine copy_type_antennas
- 
-   subroutine copy_type_statespace(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_statespace), intent(in) :: structure_in
-     type (type_statespace), intent(inout) :: structure_out
- 
-     if (associated(structure_in%observable)) then
-       if (associated(structure_out%observable)) then
-         if (size(structure_in%observable) &
-          /= size(structure_out%observable)) &
-          deallocate(structure_out%observable)
-       end if
-       if (.not. associated(structure_out%observable)) then
-         allocate(structure_out%observable(size(structure_in%observable)))
-       end if
-       structure_out%observable = structure_in%observable
-       if (verbose > 0) write(iu6, *) 'copied statespace%observable'
-     end if
- 
-     if (associated(structure_in%A)) then
-       if (associated(structure_out%A)) then
-         if (size(structure_in%A) &
-          /= size(structure_out%A)) &
-          deallocate(structure_out%A)
-       end if
-       if (.not. associated(structure_out%A)) then
-         allocate(structure_out%A(size(structure_in%A, 1), &
-          size(structure_in%A, 2)))
-       end if
-       structure_out%A = structure_in%A
-       if (verbose > 0) write(iu6, *) 'copied statespace%A'
-     end if
- 
-     if (associated(structure_in%B)) then
-       if (associated(structure_out%B)) then
-         if (size(structure_in%B) &
-          /= size(structure_out%B)) &
-          deallocate(structure_out%B)
-       end if
-       if (.not. associated(structure_out%B)) then
-         allocate(structure_out%B(size(structure_in%B, 1), &
-          size(structure_in%B, 2)))
-       end if
-       structure_out%B = structure_in%B
-       if (verbose > 0) write(iu6, *) 'copied statespace%B'
-     end if
- 
-     if (associated(structure_in%C)) then
-       if (associated(structure_out%C)) then
-         if (size(structure_in%C) &
-          /= size(structure_out%C)) &
-          deallocate(structure_out%C)
-       end if
-       if (.not. associated(structure_out%C)) then
-         allocate(structure_out%C(size(structure_in%C, 1), &
-          size(structure_in%C, 2)))
-       end if
-       structure_out%C = structure_in%C
-       if (verbose > 0) write(iu6, *) 'copied statespace%C'
-     end if
- 
-     if (associated(structure_in%D)) then
-       if (associated(structure_out%D)) then
-         if (size(structure_in%D) &
-          /= size(structure_out%D)) &
-          deallocate(structure_out%D)
-       end if
-       if (.not. associated(structure_out%D)) then
-         allocate(structure_out%D(size(structure_in%D, 1), &
-          size(structure_in%D, 2)))
-       end if
-       structure_out%D = structure_in%D
-       if (verbose > 0) write(iu6, *) 'copied statespace%D'
-     end if
- 
-     if (structure_in%deltat /= -9.0D40) then
-       structure_out%deltat = structure_in%deltat
-       if (verbose > 0) write(iu6, *) 'copied statespace%deltat'
-     end if
- 
-   end subroutine copy_type_statespace
- 
-   subroutine copy_type_transferpid(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_transferpid), intent(in) :: structure_in
-     type (type_transferpid), intent(inout) :: structure_out
- 
-     if (structure_in%gp /= -9.0D40) then
-       structure_out%gp = structure_in%gp
-       if (verbose > 0) write(iu6, *) 'copied transferpid%gp'
-     end if
- 
-     if (structure_in%gd /= -9.0D40) then
-       structure_out%gd = structure_in%gd
-       if (verbose > 0) write(iu6, *) 'copied transferpid%gd'
-     end if
- 
-     if (structure_in%gi /= -9.0D40) then
-       structure_out%gi = structure_in%gi
-       if (verbose > 0) write(iu6, *) 'copied transferpid%gi'
-     end if
- 
-   end subroutine copy_type_transferpid
- 
-   subroutine copy_type_controllers(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_controllers), intent(in) :: structure_in
-     type (type_controllers), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied controllers%name'
-     end if
- 
-     if (associated(structure_in%purpose)) then
-       if (associated(structure_out%purpose)) then
-         if (size(structure_in%purpose) &
-          /= size(structure_out%purpose)) &
-          deallocate(structure_out%purpose)
-       end if
-       if (.not. associated(structure_out%purpose)) then
-         allocate(structure_out%purpose(size(structure_in%purpose)))
-       end if
-       structure_out%purpose = structure_in%purpose
-       if (verbose > 0) write(iu6, *) 'copied controllers%purpose'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied controllers%type'
-     end if
- 
-     if (associated(structure_in%input)) then
-       if (associated(structure_out%input)) then
-         if (size(structure_in%input) &
-          /= size(structure_out%input)) &
-          deallocate(structure_out%input)
-       end if
-       if (.not. associated(structure_out%input)) then
-         allocate(structure_out%input(size(structure_in%input)))
-       end if
-       structure_out%input = structure_in%input
-       if (verbose > 0) write(iu6, *) 'copied controllers%input'
-     end if
- 
-     if (associated(structure_in%output)) then
-       if (associated(structure_out%output)) then
-         if (size(structure_in%output) &
-          /= size(structure_out%output)) &
-          deallocate(structure_out%output)
-       end if
-       if (.not. associated(structure_out%output)) then
-         allocate(structure_out%output(size(structure_in%output)))
-       end if
-       structure_out%output = structure_in%output
-       if (verbose > 0) write(iu6, *) 'copied controllers%output'
-     end if
- 
-     if (associated(structure_in%descriptor)) then
-       if (associated(structure_out%descriptor)) then
-         if (size(structure_in%descriptor) &
-          /= size(structure_out%descriptor)) &
-          deallocate(structure_out%descriptor)
-       end if
-       if (.not. associated(structure_out%descriptor)) then
-         allocate(structure_out%descriptor(size(structure_in%descriptor)))
-       end if
-       structure_out%descriptor = structure_in%descriptor
-       if (verbose > 0) write(iu6, *) 'copied controllers%descriptor'
-     end if
- 
-     call copy_type_statespace(structure_in%statespace, structure_out%statespace)
- 
-     call copy_type_transferpid(structure_in%transferpid, structure_out%transferpid)
- 
-     if (associated(structure_in%reference)) then
-       if (associated(structure_out%reference)) then
-         if (size(structure_in%reference) &
-          /= size(structure_out%reference)) &
-          deallocate(structure_out%reference)
-       end if
-       if (.not. associated(structure_out%reference)) then
-         allocate(structure_out%reference(size(structure_in%reference, 1)))
-       end if
-       structure_out%reference = structure_in%reference
-       if (verbose > 0) write(iu6, *) 'copied controllers%reference'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied controllers%time'
-     end if
- 
-   end subroutine copy_type_controllers
- 
-   subroutine copy_type_coredelta(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coredelta), intent(in) :: structure_in
-     type (type_coredelta), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_composition(structure_in%composition, structure_out%composition)
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied coredelta%rho_tor'
-     end if
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied coredelta%rho_tor_norm'
-     end if
- 
-     if (associated(structure_in%delta_psi)) then
-       if (associated(structure_out%delta_psi)) then
-         if (size(structure_in%delta_psi) &
-          /= size(structure_out%delta_psi)) &
-          deallocate(structure_out%delta_psi)
-       end if
-       if (.not. associated(structure_out%delta_psi)) then
-         allocate(structure_out%delta_psi(size(structure_in%delta_psi, 1)))
-       end if
-       structure_out%delta_psi = structure_in%delta_psi
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_psi'
-     end if
- 
-     if (associated(structure_in%delta_te)) then
-       if (associated(structure_out%delta_te)) then
-         if (size(structure_in%delta_te) &
-          /= size(structure_out%delta_te)) &
-          deallocate(structure_out%delta_te)
-       end if
-       if (.not. associated(structure_out%delta_te)) then
-         allocate(structure_out%delta_te(size(structure_in%delta_te, 1)))
-       end if
-       structure_out%delta_te = structure_in%delta_te
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_te'
-     end if
- 
-     if (associated(structure_in%delta_ti)) then
-       if (associated(structure_out%delta_ti)) then
-         if (size(structure_in%delta_ti) &
-          /= size(structure_out%delta_ti)) &
-          deallocate(structure_out%delta_ti)
-       end if
-       if (.not. associated(structure_out%delta_ti)) then
-         allocate(structure_out%delta_ti(size(structure_in%delta_ti, 1), &
-          size(structure_in%delta_ti, 2)))
-       end if
-       structure_out%delta_ti = structure_in%delta_ti
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_ti'
-     end if
- 
-     if (associated(structure_in%delta_tz)) then
-       if (associated(structure_out%delta_tz)) then
-         if (size(structure_in%delta_tz) &
-          /= size(structure_out%delta_tz)) &
-          deallocate(structure_out%delta_tz)
-       end if
-       if (.not. associated(structure_out%delta_tz)) then
-         allocate(structure_out%delta_tz(size(structure_in%delta_tz, 1), &
-          size(structure_in%delta_tz, 2), &
-          size(structure_in%delta_tz, 3)))
-       end if
-       structure_out%delta_tz = structure_in%delta_tz
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_tz'
-     end if
- 
-     if (associated(structure_in%delta_ne)) then
-       if (associated(structure_out%delta_ne)) then
-         if (size(structure_in%delta_ne) &
-          /= size(structure_out%delta_ne)) &
-          deallocate(structure_out%delta_ne)
-       end if
-       if (.not. associated(structure_out%delta_ne)) then
-         allocate(structure_out%delta_ne(size(structure_in%delta_ne, 1)))
-       end if
-       structure_out%delta_ne = structure_in%delta_ne
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_ne'
-     end if
- 
-     if (associated(structure_in%delta_ni)) then
-       if (associated(structure_out%delta_ni)) then
-         if (size(structure_in%delta_ni) &
-          /= size(structure_out%delta_ni)) &
-          deallocate(structure_out%delta_ni)
-       end if
-       if (.not. associated(structure_out%delta_ni)) then
-         allocate(structure_out%delta_ni(size(structure_in%delta_ni, 1), &
-          size(structure_in%delta_ni, 2)))
-       end if
-       structure_out%delta_ni = structure_in%delta_ni
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_ni'
-     end if
- 
-     if (associated(structure_in%delta_nz)) then
-       if (associated(structure_out%delta_nz)) then
-         if (size(structure_in%delta_nz) &
-          /= size(structure_out%delta_nz)) &
-          deallocate(structure_out%delta_nz)
-       end if
-       if (.not. associated(structure_out%delta_nz)) then
-         allocate(structure_out%delta_nz(size(structure_in%delta_nz, 1), &
-          size(structure_in%delta_nz, 2), &
-          size(structure_in%delta_nz, 3)))
-       end if
-       structure_out%delta_nz = structure_in%delta_nz
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_nz'
-     end if
- 
-     if (associated(structure_in%delta_vtor)) then
-       if (associated(structure_out%delta_vtor)) then
-         if (size(structure_in%delta_vtor) &
-          /= size(structure_out%delta_vtor)) &
-          deallocate(structure_out%delta_vtor)
-       end if
-       if (.not. associated(structure_out%delta_vtor)) then
-         allocate(structure_out%delta_vtor(size(structure_in%delta_vtor, 1), &
-          size(structure_in%delta_vtor, 2)))
-       end if
-       structure_out%delta_vtor = structure_in%delta_vtor
-       if (verbose > 0) write(iu6, *) 'copied coredelta%delta_vtor'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied coredelta%time'
-     end if
- 
-   end subroutine copy_type_coredelta
- 
-   subroutine copy_type_sourceimp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_sourceimp), intent(in) :: structure_in
-     type (type_sourceimp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2), &
-          size(structure_in%value, 3)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied sourceimp%value'
-     end if
- 
-     if (associated(structure_in%integral)) then
-       if (associated(structure_out%integral)) then
-         if (size(structure_in%integral) &
-          /= size(structure_out%integral)) &
-          deallocate(structure_out%integral)
-       end if
-       if (.not. associated(structure_out%integral)) then
-         allocate(structure_out%integral(size(structure_in%integral, 1), &
-          size(structure_in%integral, 2), &
-          size(structure_in%integral, 3)))
-       end if
-       structure_out%integral = structure_in%integral
-       if (verbose > 0) write(iu6, *) 'copied sourceimp%integral'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied sourceimp%source'
-     end if
- 
-   end subroutine copy_type_sourceimp
- 
-   subroutine copy_type_coretransimp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coretransimp), intent(in) :: structure_in
-     type (type_coretransimp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff)) then
-       if (associated(structure_out%diff)) then
-         if (size(structure_in%diff) &
-          /= size(structure_out%diff)) &
-          deallocate(structure_out%diff)
-       end if
-       if (.not. associated(structure_out%diff)) then
-         allocate(structure_out%diff(size(structure_in%diff, 1), &
-          size(structure_in%diff, 2), &
-          size(structure_in%diff, 3)))
-       end if
-       structure_out%diff = structure_in%diff
-       if (verbose > 0) write(iu6, *) 'copied coretransimp%diff'
-     end if
- 
-     if (associated(structure_in%vconv)) then
-       if (associated(structure_out%vconv)) then
-         if (size(structure_in%vconv) &
-          /= size(structure_out%vconv)) &
-          deallocate(structure_out%vconv)
-       end if
-       if (.not. associated(structure_out%vconv)) then
-         allocate(structure_out%vconv(size(structure_in%vconv, 1), &
-          size(structure_in%vconv, 2), &
-          size(structure_in%vconv, 3)))
-       end if
-       structure_out%vconv = structure_in%vconv
-       if (verbose > 0) write(iu6, *) 'copied coretransimp%vconv'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied coretransimp%source'
-     end if
- 
-   end subroutine copy_type_coretransimp
- 
-   subroutine copy_type_boundaryimp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_boundaryimp), intent(in) :: structure_in
-     type (type_boundaryimp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2), &
-          size(structure_in%value, 3)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied boundaryimp%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied boundaryimp%source'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type, 1), &
-          size(structure_in%type, 2)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied boundaryimp%type'
-     end if
- 
-     if (associated(structure_in%rho)) then
-       if (associated(structure_out%rho)) then
-         if (size(structure_in%rho) &
-          /= size(structure_out%rho)) &
-          deallocate(structure_out%rho)
-       end if
-       if (.not. associated(structure_out%rho)) then
-         allocate(structure_out%rho(size(structure_in%rho, 1), &
-          size(structure_in%rho, 2)))
-       end if
-       structure_out%rho = structure_in%rho
-       if (verbose > 0) write(iu6, *) 'copied boundaryimp%rho'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_boundaryimp
- 
-   subroutine copy_type_fluximp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fluximp), intent(in) :: structure_in
-     type (type_fluximp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%flux_dv)) then
-       if (associated(structure_out%flux_dv)) then
-         if (size(structure_in%flux_dv) &
-          /= size(structure_out%flux_dv)) &
-          deallocate(structure_out%flux_dv)
-       end if
-       if (.not. associated(structure_out%flux_dv)) then
-         allocate(structure_out%flux_dv(size(structure_in%flux_dv, 1), &
-          size(structure_in%flux_dv, 2), &
-          size(structure_in%flux_dv, 3)))
-       end if
-       structure_out%flux_dv = structure_in%flux_dv
-       if (verbose > 0) write(iu6, *) 'copied fluximp%flux_dv'
-     end if
- 
-     if (associated(structure_in%flux_interp)) then
-       if (associated(structure_out%flux_interp)) then
-         if (size(structure_in%flux_interp) &
-          /= size(structure_out%flux_interp)) &
-          deallocate(structure_out%flux_interp)
-       end if
-       if (.not. associated(structure_out%flux_interp)) then
-         allocate(structure_out%flux_interp(size(structure_in%flux_interp, 1), &
-          size(structure_in%flux_interp, 2), &
-          size(structure_in%flux_interp, 3)))
-       end if
-       structure_out%flux_interp = structure_in%flux_interp
-       if (verbose > 0) write(iu6, *) 'copied fluximp%flux_interp'
-     end if
- 
-   end subroutine copy_type_fluximp
- 
-   subroutine copy_type_desc_impur(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_desc_impur), intent(in) :: structure_in
-     type (type_desc_impur), intent(inout) :: structure_out
- 
-     if (associated(structure_in%amn)) then
-       if (associated(structure_out%amn)) then
-         if (size(structure_in%amn) &
-          /= size(structure_out%amn)) &
-          deallocate(structure_out%amn)
-       end if
-       if (.not. associated(structure_out%amn)) then
-         allocate(structure_out%amn(size(structure_in%amn, 1)))
-       end if
-       structure_out%amn = structure_in%amn
-       if (verbose > 0) write(iu6, *) 'copied desc_impur%amn'
-     end if
- 
-     if (associated(structure_in%zn)) then
-       if (associated(structure_out%zn)) then
-         if (size(structure_in%zn) &
-          /= size(structure_out%zn)) &
-          deallocate(structure_out%zn)
-       end if
-       if (.not. associated(structure_out%zn)) then
-         allocate(structure_out%zn(size(structure_in%zn, 1)))
-       end if
-       structure_out%zn = structure_in%zn
-       if (verbose > 0) write(iu6, *) 'copied desc_impur%zn'
-     end if
- 
-     if (associated(structure_in%i_ion)) then
-       if (associated(structure_out%i_ion)) then
-         if (size(structure_in%i_ion) &
-          /= size(structure_out%i_ion)) &
-          deallocate(structure_out%i_ion)
-       end if
-       if (.not. associated(structure_out%i_ion)) then
-         allocate(structure_out%i_ion(size(structure_in%i_ion, 1)))
-       end if
-       structure_out%i_ion = structure_in%i_ion
-       if (verbose > 0) write(iu6, *) 'copied desc_impur%i_ion'
-     end if
- 
-     if (associated(structure_in%nzimp)) then
-       if (associated(structure_out%nzimp)) then
-         if (size(structure_in%nzimp) &
-          /= size(structure_out%nzimp)) &
-          deallocate(structure_out%nzimp)
-       end if
-       if (.not. associated(structure_out%nzimp)) then
-         allocate(structure_out%nzimp(size(structure_in%nzimp, 1)))
-       end if
-       structure_out%nzimp = structure_in%nzimp
-       if (verbose > 0) write(iu6, *) 'copied desc_impur%nzimp'
-     end if
- 
-     if (associated(structure_in%zmin)) then
-       if (associated(structure_out%zmin)) then
-         if (size(structure_in%zmin) &
-          /= size(structure_out%zmin)) &
-          deallocate(structure_out%zmin)
-       end if
-       if (.not. associated(structure_out%zmin)) then
-         allocate(structure_out%zmin(size(structure_in%zmin, 1), &
-          size(structure_in%zmin, 2)))
-       end if
-       structure_out%zmin = structure_in%zmin
-       if (verbose > 0) write(iu6, *) 'copied desc_impur%zmin'
-     end if
- 
-     if (associated(structure_in%zmax)) then
-       if (associated(structure_out%zmax)) then
-         if (size(structure_in%zmax) &
-          /= size(structure_out%zmax)) &
-          deallocate(structure_out%zmax)
-       end if
-       if (.not. associated(structure_out%zmax)) then
-         allocate(structure_out%zmax(size(structure_in%zmax, 1), &
-          size(structure_in%zmax, 2)))
-       end if
-       structure_out%zmax = structure_in%zmax
-       if (verbose > 0) write(iu6, *) 'copied desc_impur%zmax'
-     end if
- 
-   end subroutine copy_type_desc_impur
- 
-   subroutine copy_type_coreimpur(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coreimpur), intent(in) :: structure_in
-     type (type_coreimpur), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%rho_tor_norm'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%rho_tor'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%source'
-     end if
- 
-     if (associated(structure_in%flag)) then
-       if (associated(structure_out%flag)) then
-         if (size(structure_in%flag) &
-          /= size(structure_out%flag)) &
-          deallocate(structure_out%flag)
-       end if
-       if (.not. associated(structure_out%flag)) then
-         allocate(structure_out%flag(size(structure_in%flag, 1)))
-       end if
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%flag'
-     end if
- 
-     call copy_type_desc_impur(structure_in%desc_impur, structure_out%desc_impur)
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1), &
-          size(structure_in%z, 2), &
-          size(structure_in%z, 3)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%z'
-     end if
- 
-     if (associated(structure_in%zsq)) then
-       if (associated(structure_out%zsq)) then
-         if (size(structure_in%zsq) &
-          /= size(structure_out%zsq)) &
-          deallocate(structure_out%zsq)
-       end if
-       if (.not. associated(structure_out%zsq)) then
-         allocate(structure_out%zsq(size(structure_in%zsq, 1), &
-          size(structure_in%zsq, 2), &
-          size(structure_in%zsq, 3)))
-       end if
-       structure_out%zsq = structure_in%zsq
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%zsq'
-     end if
- 
-     if (associated(structure_in%nz)) then
-       if (associated(structure_out%nz)) then
-         if (size(structure_in%nz) &
-          /= size(structure_out%nz)) &
-          deallocate(structure_out%nz)
-       end if
-       if (.not. associated(structure_out%nz)) then
-         allocate(structure_out%nz(size(structure_in%nz, 1), &
-          size(structure_in%nz, 2), &
-          size(structure_in%nz, 3)))
-       end if
-       structure_out%nz = structure_in%nz
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%nz'
-     end if
- 
-     call copy_type_sourceimp(structure_in%source_term, structure_out%source_term)
- 
-     call copy_type_boundaryimp(structure_in%boundary, structure_out%boundary)
- 
-     call copy_type_coretransimp(structure_in%transp_coef, structure_out%transp_coef)
- 
-     call copy_type_fluximp(structure_in%flux, structure_out%flux)
- 
-     if (associated(structure_in%time_deriv)) then
-       if (associated(structure_out%time_deriv)) then
-         if (size(structure_in%time_deriv) &
-          /= size(structure_out%time_deriv)) &
-          deallocate(structure_out%time_deriv)
-       end if
-       if (.not. associated(structure_out%time_deriv)) then
-         allocate(structure_out%time_deriv(size(structure_in%time_deriv, 1), &
-          size(structure_in%time_deriv, 2), &
-          size(structure_in%time_deriv, 3)))
-       end if
-       structure_out%time_deriv = structure_in%time_deriv
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%time_deriv'
-     end if
- 
-     if (associated(structure_in%atomic_data)) then
-       if (associated(structure_out%atomic_data)) then
-         if (size(structure_in%atomic_data) &
-          /= size(structure_out%atomic_data)) &
-          deallocate(structure_out%atomic_data)
-       end if
-       if (.not. associated(structure_out%atomic_data)) then
-         allocate(structure_out%atomic_data(size(structure_in%atomic_data)))
-       end if
-       structure_out%atomic_data = structure_in%atomic_data
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%atomic_data'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied coreimpur%time'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_coreimpur
- 
-   subroutine copy_type_atomlist(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_atomlist), intent(in) :: structure_in
-     type (type_atomlist), intent(inout) :: structure_out
- 
-     if (associated(structure_in%amn)) then
-       if (associated(structure_out%amn)) then
-         if (size(structure_in%amn) &
-          /= size(structure_out%amn)) &
-          deallocate(structure_out%amn)
-       end if
-       if (.not. associated(structure_out%amn)) then
-         allocate(structure_out%amn(size(structure_in%amn, 1)))
-       end if
-       structure_out%amn = structure_in%amn
-       if (verbose > 0) write(iu6, *) 'copied atomlist%amn'
-     end if
- 
-     if (associated(structure_in%zn)) then
-       if (associated(structure_out%zn)) then
-         if (size(structure_in%zn) &
-          /= size(structure_out%zn)) &
-          deallocate(structure_out%zn)
-       end if
-       if (.not. associated(structure_out%zn)) then
-         allocate(structure_out%zn(size(structure_in%zn, 1)))
-       end if
-       structure_out%zn = structure_in%zn
-       if (verbose > 0) write(iu6, *) 'copied atomlist%zn'
-     end if
- 
-   end subroutine copy_type_atomlist
- 
-   subroutine copy_type_neutrallist(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_neutrallist), intent(in) :: structure_in
-     type (type_neutrallist), intent(inout) :: structure_out
- 
-     if (associated(structure_in%ncomp)) then
-       if (associated(structure_out%ncomp)) then
-         if (size(structure_in%ncomp) &
-          /= size(structure_out%ncomp)) &
-          deallocate(structure_out%ncomp)
-       end if
-       if (.not. associated(structure_out%ncomp)) then
-         allocate(structure_out%ncomp(size(structure_in%ncomp, 1)))
-       end if
-       structure_out%ncomp = structure_in%ncomp
-       if (verbose > 0) write(iu6, *) 'copied neutrallist%ncomp'
-     end if
- 
-     if (associated(structure_in%tatm)) then
-       if (associated(structure_out%tatm)) then
-         if (size(structure_in%tatm) &
-          /= size(structure_out%tatm)) &
-          deallocate(structure_out%tatm)
-       end if
-       if (.not. associated(structure_out%tatm)) then
-         allocate(structure_out%tatm(size(structure_in%tatm, 1), &
-          size(structure_in%tatm, 2)))
-       end if
-       structure_out%tatm = structure_in%tatm
-       if (verbose > 0) write(iu6, *) 'copied neutrallist%tatm'
-     end if
- 
-     if (associated(structure_in%multatm)) then
-       if (associated(structure_out%multatm)) then
-         if (size(structure_in%multatm) &
-          /= size(structure_out%multatm)) &
-          deallocate(structure_out%multatm)
-       end if
-       if (.not. associated(structure_out%multatm)) then
-         allocate(structure_out%multatm(size(structure_in%multatm, 1), &
-          size(structure_in%multatm, 2)))
-       end if
-       structure_out%multatm = structure_in%multatm
-       if (verbose > 0) write(iu6, *) 'copied neutrallist%multatm'
-     end if
- 
-   end subroutine copy_type_neutrallist
- 
-   subroutine copy_type_typelist(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_typelist), intent(in) :: structure_in
-     type (type_typelist), intent(inout) :: structure_out
- 
-     if (associated(structure_in%ntype)) then
-       if (associated(structure_out%ntype)) then
-         if (size(structure_in%ntype) &
-          /= size(structure_out%ntype)) &
-          deallocate(structure_out%ntype)
-       end if
-       if (.not. associated(structure_out%ntype)) then
-         allocate(structure_out%ntype(size(structure_in%ntype, 1)))
-       end if
-       structure_out%ntype = structure_in%ntype
-       if (verbose > 0) write(iu6, *) 'copied typelist%ntype'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type, 1), &
-          size(structure_in%type, 2)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied typelist%type'
-     end if
- 
-   end subroutine copy_type_typelist
- 
-   subroutine copy_type_boundary_neutrals(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_boundary_neutrals), intent(in) :: structure_in
-     type (type_boundary_neutrals), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2), &
-          size(structure_in%value, 3)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied boundary_neutrals%value'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type, 1), &
-          size(structure_in%type, 2)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied boundary_neutrals%type'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1), &
-          size(structure_in%rho_tor, 2)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied boundary_neutrals%rho_tor'
-     end if
- 
-   end subroutine copy_type_boundary_neutrals
- 
-   subroutine copy_type_corefieldneutral(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_corefieldneutral), intent(in) :: structure_in
-     type (type_corefieldneutral), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2), &
-          size(structure_in%value, 3)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied corefieldneutral%value'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1), &
-          size(structure_in%flux, 2), &
-          size(structure_in%flux, 3)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied corefieldneutral%flux'
-     end if
- 
-     call copy_type_boundary_neutrals(structure_in%boundary, structure_out%boundary)
- 
-   end subroutine copy_type_corefieldneutral
- 
-   subroutine copy_type_corefieldneutrale(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_corefieldneutrale), intent(in) :: structure_in
-     type (type_corefieldneutrale), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2), &
-          size(structure_in%value, 3)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied corefieldneutrale%value'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1), &
-          size(structure_in%flux, 2), &
-          size(structure_in%flux, 3)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied corefieldneutrale%flux'
-     end if
- 
-     call copy_type_boundary_neutrals(structure_in%boundary, structure_out%boundary)
- 
-   end subroutine copy_type_corefieldneutrale
- 
-   subroutine copy_type_corefieldneutralv(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_corefieldneutralv), intent(in) :: structure_in
-     type (type_corefieldneutralv), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2), &
-          size(structure_in%value, 3)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied corefieldneutralv%value'
-     end if
- 
-     call copy_type_boundary_neutrals(structure_in%boundary, structure_out%boundary)
- 
-   end subroutine copy_type_corefieldneutralv
- 
-   subroutine copy_type_corefieldneutralv0(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_corefieldneutralv0), intent(in) :: structure_in
-     type (type_corefieldneutralv0), intent(inout) :: structure_out
- 
-     call copy_type_corefieldneutralv(structure_in%toroidal, structure_out%toroidal)
- 
-     call copy_type_corefieldneutralv(structure_in%poloidal, structure_out%poloidal)
- 
-     call copy_type_corefieldneutralv(structure_in%radial, structure_out%radial)
- 
-   end subroutine copy_type_corefieldneutralv0
- 
-   subroutine copy_type_recycling_neutrals(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_recycling_neutrals), intent(in) :: structure_in
-     type (type_recycling_neutrals), intent(inout) :: structure_out
- 
-     if (associated(structure_in%particles)) then
-       if (associated(structure_out%particles)) then
-         if (size(structure_in%particles) &
-          /= size(structure_out%particles)) &
-          deallocate(structure_out%particles)
-       end if
-       if (.not. associated(structure_out%particles)) then
-         allocate(structure_out%particles(size(structure_in%particles, 1), &
-          size(structure_in%particles, 2)))
-       end if
-       structure_out%particles = structure_in%particles
-       if (verbose > 0) write(iu6, *) 'copied recycling_neutrals%particles'
-     end if
- 
-     if (associated(structure_in%energy)) then
-       if (associated(structure_out%energy)) then
-         if (size(structure_in%energy) &
-          /= size(structure_out%energy)) &
-          deallocate(structure_out%energy)
-       end if
-       if (.not. associated(structure_out%energy)) then
-         allocate(structure_out%energy(size(structure_in%energy, 1), &
-          size(structure_in%energy, 2)))
-       end if
-       structure_out%energy = structure_in%energy
-       if (verbose > 0) write(iu6, *) 'copied recycling_neutrals%energy'
-     end if
- 
-   end subroutine copy_type_recycling_neutrals
- 
-   subroutine copy_type_sputtering_neutrals(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_sputtering_neutrals), intent(in) :: structure_in
-     type (type_sputtering_neutrals), intent(inout) :: structure_out
- 
-     if (associated(structure_in%physical)) then
-       if (associated(structure_out%physical)) then
-         if (size(structure_in%physical) &
-          /= size(structure_out%physical)) &
-          deallocate(structure_out%physical)
-       end if
-       if (.not. associated(structure_out%physical)) then
-         allocate(structure_out%physical(size(structure_in%physical, 1), &
-          size(structure_in%physical, 2)))
-       end if
-       structure_out%physical = structure_in%physical
-       if (verbose > 0) write(iu6, *) 'copied sputtering_neutrals%physical'
-     end if
- 
-     if (associated(structure_in%chemical)) then
-       if (associated(structure_out%chemical)) then
-         if (size(structure_in%chemical) &
-          /= size(structure_out%chemical)) &
-          deallocate(structure_out%chemical)
-       end if
-       if (.not. associated(structure_out%chemical)) then
-         allocate(structure_out%chemical(size(structure_in%chemical, 1), &
-          size(structure_in%chemical, 2)))
-       end if
-       structure_out%chemical = structure_in%chemical
-       if (verbose > 0) write(iu6, *) 'copied sputtering_neutrals%chemical'
-     end if
- 
-   end subroutine copy_type_sputtering_neutrals
- 
-   subroutine copy_type_composition_neutrals(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_composition_neutrals), intent(in) :: structure_in
-     type (type_composition_neutrals), intent(inout) :: structure_out
- 
-     call copy_type_atomlist(structure_in%atomlist, structure_out%atomlist)
- 
-     call copy_type_neutrallist(structure_in%neutrallist, structure_out%neutrallist)
- 
-     call copy_type_typelist(structure_in%typelist, structure_out%typelist)
- 
-   end subroutine copy_type_composition_neutrals
- 
-   subroutine copy_type_coefficients_neutrals(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coefficients_neutrals), intent(in) :: structure_in
-     type (type_coefficients_neutrals), intent(inout) :: structure_out
- 
-     call copy_type_recycling_neutrals(structure_in%recycling, structure_out%recycling)
- 
-     call copy_type_sputtering_neutrals(structure_in%sputtering, structure_out%sputtering)
- 
-   end subroutine copy_type_coefficients_neutrals
- 
-   subroutine copy_type_profiles_neutrals(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_profiles_neutrals), intent(in) :: structure_in
-     type (type_profiles_neutrals), intent(inout) :: structure_out
- 
-     call copy_type_corefieldneutral(structure_in%n0, structure_out%n0)
- 
-     call copy_type_corefieldneutrale(structure_in%t0, structure_out%t0)
- 
-     call copy_type_corefieldneutralv0(structure_in%v0, structure_out%v0)
- 
-     if (associated(structure_in%prad0)) then
-       if (associated(structure_out%prad0)) then
-         if (size(structure_in%prad0) &
-          /= size(structure_out%prad0)) &
-          deallocate(structure_out%prad0)
-       end if
-       if (.not. associated(structure_out%prad0)) then
-         allocate(structure_out%prad0(size(structure_in%prad0, 1), &
-          size(structure_in%prad0, 2)))
-       end if
-       structure_out%prad0 = structure_in%prad0
-       if (verbose > 0) write(iu6, *) 'copied profiles_neutrals%prad0'
-     end if
- 
-   end subroutine copy_type_profiles_neutrals
- 
-   subroutine copy_type_coreneutrals(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coreneutrals), intent(in) :: structure_in
-     type (type_coreneutrals), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied coreneutrals%rho_tor'
-     end if
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied coreneutrals%rho_tor_norm'
-     end if
- 
-     call copy_type_composition_neutrals(structure_in%composition, structure_out%composition)
- 
-     call copy_type_profiles_neutrals(structure_in%profiles, structure_out%profiles)
- 
-     call copy_type_coefficients_neutrals(structure_in%coefficients, structure_out%coefficients)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied coreneutrals%time'
-     end if
- 
-   end subroutine copy_type_coreneutrals
- 
-   subroutine copy_type_sourceel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_sourceel), intent(in) :: structure_in
-     type (type_sourceel), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied sourceel%value'
-     end if
- 
-     if (associated(structure_in%integral)) then
-       if (associated(structure_out%integral)) then
-         if (size(structure_in%integral) &
-          /= size(structure_out%integral)) &
-          deallocate(structure_out%integral)
-       end if
-       if (.not. associated(structure_out%integral)) then
-         allocate(structure_out%integral(size(structure_in%integral, 1)))
-       end if
-       structure_out%integral = structure_in%integral
-       if (verbose > 0) write(iu6, *) 'copied sourceel%integral'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied sourceel%source'
-     end if
- 
-   end subroutine copy_type_sourceel
- 
-   subroutine copy_type_sourceion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_sourceion), intent(in) :: structure_in
-     type (type_sourceion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied sourceion%value'
-     end if
- 
-     if (associated(structure_in%integral)) then
-       if (associated(structure_out%integral)) then
-         if (size(structure_in%integral) &
-          /= size(structure_out%integral)) &
-          deallocate(structure_out%integral)
-       end if
-       if (.not. associated(structure_out%integral)) then
-         allocate(structure_out%integral(size(structure_in%integral, 1), &
-          size(structure_in%integral, 2)))
-       end if
-       structure_out%integral = structure_in%integral
-       if (verbose > 0) write(iu6, *) 'copied sourceion%integral'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied sourceion%source'
-     end if
- 
-   end subroutine copy_type_sourceion
- 
-   subroutine copy_type_coretransel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coretransel), intent(in) :: structure_in
-     type (type_coretransel), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff)) then
-       if (associated(structure_out%diff)) then
-         if (size(structure_in%diff) &
-          /= size(structure_out%diff)) &
-          deallocate(structure_out%diff)
-       end if
-       if (.not. associated(structure_out%diff)) then
-         allocate(structure_out%diff(size(structure_in%diff, 1)))
-       end if
-       structure_out%diff = structure_in%diff
-       if (verbose > 0) write(iu6, *) 'copied coretransel%diff'
-     end if
- 
-     if (associated(structure_in%vconv)) then
-       if (associated(structure_out%vconv)) then
-         if (size(structure_in%vconv) &
-          /= size(structure_out%vconv)) &
-          deallocate(structure_out%vconv)
-       end if
-       if (.not. associated(structure_out%vconv)) then
-         allocate(structure_out%vconv(size(structure_in%vconv, 1)))
-       end if
-       structure_out%vconv = structure_in%vconv
-       if (verbose > 0) write(iu6, *) 'copied coretransel%vconv'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied coretransel%source'
-     end if
- 
-   end subroutine copy_type_coretransel
- 
-   subroutine copy_type_coretransion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coretransion), intent(in) :: structure_in
-     type (type_coretransion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff)) then
-       if (associated(structure_out%diff)) then
-         if (size(structure_in%diff) &
-          /= size(structure_out%diff)) &
-          deallocate(structure_out%diff)
-       end if
-       if (.not. associated(structure_out%diff)) then
-         allocate(structure_out%diff(size(structure_in%diff, 1), &
-          size(structure_in%diff, 2)))
-       end if
-       structure_out%diff = structure_in%diff
-       if (verbose > 0) write(iu6, *) 'copied coretransion%diff'
-     end if
- 
-     if (associated(structure_in%vconv)) then
-       if (associated(structure_out%vconv)) then
-         if (size(structure_in%vconv) &
-          /= size(structure_out%vconv)) &
-          deallocate(structure_out%vconv)
-       end if
-       if (.not. associated(structure_out%vconv)) then
-         allocate(structure_out%vconv(size(structure_in%vconv, 1), &
-          size(structure_in%vconv, 2)))
-       end if
-       structure_out%vconv = structure_in%vconv
-       if (verbose > 0) write(iu6, *) 'copied coretransion%vconv'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied coretransion%source'
-     end if
- 
-   end subroutine copy_type_coretransion
- 
-   subroutine copy_type_fluxel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fluxel), intent(in) :: structure_in
-     type (type_fluxel), intent(inout) :: structure_out
- 
-     if (associated(structure_in%flux_dv)) then
-       if (associated(structure_out%flux_dv)) then
-         if (size(structure_in%flux_dv) &
-          /= size(structure_out%flux_dv)) &
-          deallocate(structure_out%flux_dv)
-       end if
-       if (.not. associated(structure_out%flux_dv)) then
-         allocate(structure_out%flux_dv(size(structure_in%flux_dv, 1)))
-       end if
-       structure_out%flux_dv = structure_in%flux_dv
-       if (verbose > 0) write(iu6, *) 'copied fluxel%flux_dv'
-     end if
- 
-     if (associated(structure_in%flux_interp)) then
-       if (associated(structure_out%flux_interp)) then
-         if (size(structure_in%flux_interp) &
-          /= size(structure_out%flux_interp)) &
-          deallocate(structure_out%flux_interp)
-       end if
-       if (.not. associated(structure_out%flux_interp)) then
-         allocate(structure_out%flux_interp(size(structure_in%flux_interp, 1)))
-       end if
-       structure_out%flux_interp = structure_in%flux_interp
-       if (verbose > 0) write(iu6, *) 'copied fluxel%flux_interp'
-     end if
- 
-   end subroutine copy_type_fluxel
- 
-   subroutine copy_type_fluxion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fluxion), intent(in) :: structure_in
-     type (type_fluxion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%flux_dv)) then
-       if (associated(structure_out%flux_dv)) then
-         if (size(structure_in%flux_dv) &
-          /= size(structure_out%flux_dv)) &
-          deallocate(structure_out%flux_dv)
-       end if
-       if (.not. associated(structure_out%flux_dv)) then
-         allocate(structure_out%flux_dv(size(structure_in%flux_dv, 1), &
-          size(structure_in%flux_dv, 2)))
-       end if
-       structure_out%flux_dv = structure_in%flux_dv
-       if (verbose > 0) write(iu6, *) 'copied fluxion%flux_dv'
-     end if
- 
-     if (associated(structure_in%flux_interp)) then
-       if (associated(structure_out%flux_interp)) then
-         if (size(structure_in%flux_interp) &
-          /= size(structure_out%flux_interp)) &
-          deallocate(structure_out%flux_interp)
-       end if
-       if (.not. associated(structure_out%flux_interp)) then
-         allocate(structure_out%flux_interp(size(structure_in%flux_interp, 1), &
-          size(structure_in%flux_interp, 2)))
-       end if
-       structure_out%flux_interp = structure_in%flux_interp
-       if (verbose > 0) write(iu6, *) 'copied fluxion%flux_interp'
-     end if
- 
-   end subroutine copy_type_fluxion
- 
-   subroutine copy_type_corefield(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_corefield), intent(in) :: structure_in
-     type (type_corefield), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied corefield%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied corefield%source'
-     end if
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied corefield%flag'
-     end if
- 
-     call copy_type_boundaryel(structure_in%boundary, structure_out%boundary)
- 
-     call copy_type_sourceel(structure_in%source_term, structure_out%source_term)
- 
-     call copy_type_coretransel(structure_in%transp_coef, structure_out%transp_coef)
- 
-     call copy_type_fluxel(structure_in%flux, structure_out%flux)
- 
-     if (associated(structure_in%time_deriv)) then
-       if (associated(structure_out%time_deriv)) then
-         if (size(structure_in%time_deriv) &
-          /= size(structure_out%time_deriv)) &
-          deallocate(structure_out%time_deriv)
-       end if
-       if (.not. associated(structure_out%time_deriv)) then
-         allocate(structure_out%time_deriv(size(structure_in%time_deriv, 1)))
-       end if
-       structure_out%time_deriv = structure_in%time_deriv
-       if (verbose > 0) write(iu6, *) 'copied corefield%time_deriv'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_corefield
- 
-   subroutine copy_type_corefieldion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_corefieldion), intent(in) :: structure_in
-     type (type_corefieldion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied corefieldion%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied corefieldion%source'
-     end if
- 
-     if (associated(structure_in%flag)) then
-       if (associated(structure_out%flag)) then
-         if (size(structure_in%flag) &
-          /= size(structure_out%flag)) &
-          deallocate(structure_out%flag)
-       end if
-       if (.not. associated(structure_out%flag)) then
-         allocate(structure_out%flag(size(structure_in%flag, 1)))
-       end if
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied corefieldion%flag'
-     end if
- 
-     call copy_type_boundaryion(structure_in%boundary, structure_out%boundary)
- 
-     call copy_type_sourceion(structure_in%source_term, structure_out%source_term)
- 
-     call copy_type_coretransion(structure_in%transp_coef, structure_out%transp_coef)
- 
-     call copy_type_fluxion(structure_in%flux, structure_out%flux)
- 
-     if (associated(structure_in%time_deriv)) then
-       if (associated(structure_out%time_deriv)) then
-         if (size(structure_in%time_deriv) &
-          /= size(structure_out%time_deriv)) &
-          deallocate(structure_out%time_deriv)
-       end if
-       if (.not. associated(structure_out%time_deriv)) then
-         allocate(structure_out%time_deriv(size(structure_in%time_deriv, 1), &
-          size(structure_in%time_deriv, 2)))
-       end if
-       structure_out%time_deriv = structure_in%time_deriv
-       if (verbose > 0) write(iu6, *) 'copied corefieldion%time_deriv'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_corefieldion
- 
-   subroutine copy_type_coreprofile(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coreprofile), intent(in) :: structure_in
-     type (type_coreprofile), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied coreprofile%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied coreprofile%source'
-     end if
- 
-   end subroutine copy_type_coreprofile
- 
-   subroutine copy_type_coreprofion(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coreprofion), intent(in) :: structure_in
-     type (type_coreprofion), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied coreprofion%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied coreprofion%source'
-     end if
- 
-   end subroutine copy_type_coreprofion
- 
-   subroutine copy_type_boundary(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_boundary), intent(in) :: structure_in
-     type (type_boundary), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied boundary%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied boundary%source'
-     end if
- 
-     if (structure_in%type /= -999999999) then
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied boundary%type'
-     end if
- 
-     if (structure_in%rho /= -9.0D40) then
-       structure_out%rho = structure_in%rho
-       if (verbose > 0) write(iu6, *) 'copied boundary%rho'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_boundary
- 
-   subroutine copy_type_jni(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_jni), intent(in) :: structure_in
-     type (type_jni), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied jni%value'
-     end if
- 
-     if (associated(structure_in%integral)) then
-       if (associated(structure_out%integral)) then
-         if (size(structure_in%integral) &
-          /= size(structure_out%integral)) &
-          deallocate(structure_out%integral)
-       end if
-       if (.not. associated(structure_out%integral)) then
-         allocate(structure_out%integral(size(structure_in%integral, 1)))
-       end if
-       structure_out%integral = structure_in%integral
-       if (verbose > 0) write(iu6, *) 'copied jni%integral'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied jni%source'
-     end if
- 
-   end subroutine copy_type_jni
- 
-   subroutine copy_type_toroid_field(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_toroid_field), intent(in) :: structure_in
-     type (type_toroid_field), intent(inout) :: structure_out
- 
-     if (structure_in%b0 /= -9.0D40) then
-       structure_out%b0 = structure_in%b0
-       if (verbose > 0) write(iu6, *) 'copied toroid_field%b0'
-     end if
- 
-     if (structure_in%b0prime /= -9.0D40) then
-       structure_out%b0prime = structure_in%b0prime
-       if (verbose > 0) write(iu6, *) 'copied toroid_field%b0prime'
-     end if
- 
-     if (structure_in%r0 /= -9.0D40) then
-       structure_out%r0 = structure_in%r0
-       if (verbose > 0) write(iu6, *) 'copied toroid_field%r0'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied toroid_field%time'
-     end if
- 
-   end subroutine copy_type_toroid_field
- 
-   subroutine copy_type_psi(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_psi), intent(in) :: structure_in
-     type (type_psi), intent(inout) :: structure_out
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied psi%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied psi%source'
-     end if
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied psi%flag'
-     end if
- 
-     call copy_type_boundary(structure_in%boundary, structure_out%boundary)
- 
-     call copy_type_jni(structure_in%jni, structure_out%jni)
- 
-     call copy_type_coreprofile(structure_in%sigma_par, structure_out%sigma_par)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_psi
- 
-   subroutine copy_type_profiles1d(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_profiles1d), intent(in) :: structure_in
-     type (type_profiles1d), intent(inout) :: structure_out
- 
-     call copy_type_coreprofile(structure_in%pe, structure_out%pe)
- 
-     call copy_type_coreprofion(structure_in%pi, structure_out%pi)
- 
-     call copy_type_coreprofile(structure_in%pr_th, structure_out%pr_th)
- 
-     call copy_type_coreprofile(structure_in%pr_perp, structure_out%pr_perp)
- 
-     call copy_type_coreprofile(structure_in%pr_parallel, structure_out%pr_parallel)
- 
-     call copy_type_coreprofile(structure_in%jtot, structure_out%jtot)
- 
-     call copy_type_coreprofile(structure_in%jni, structure_out%jni)
- 
-     call copy_type_coreprofile(structure_in%joh, structure_out%joh)
- 
-     call copy_type_coreprofile(structure_in%vloop, structure_out%vloop)
- 
-     call copy_type_coreprofile(structure_in%sigmapar, structure_out%sigmapar)
- 
-     call copy_type_coreprofile(structure_in%qoh, structure_out%qoh)
- 
-     call copy_type_coreprofile(structure_in%eparallel, structure_out%eparallel)
- 
-     call copy_type_coreprofile(structure_in%e_b, structure_out%e_b)
- 
-     call copy_type_coreprofile(structure_in%q, structure_out%q)
- 
-     call copy_type_coreprofile(structure_in%shear, structure_out%shear)
- 
-     call copy_type_coreprofion(structure_in%ns, structure_out%ns)
- 
-     call copy_type_coreprofion(structure_in%mtor, structure_out%mtor)
- 
-     call copy_type_coreprofion(structure_in%wtor, structure_out%wtor)
- 
-     call copy_type_coreprofile(structure_in%zeff, structure_out%zeff)
- 
-   end subroutine copy_type_profiles1d
- 
-   subroutine copy_type_globalparam(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_globalparam), intent(in) :: structure_in
-     type (type_globalparam), intent(inout) :: structure_out
- 
-     if (structure_in%current_tot /= -9.0D40) then
-       structure_out%current_tot = structure_in%current_tot
-       if (verbose > 0) write(iu6, *) 'copied globalparam%current_tot'
-     end if
- 
-     if (structure_in%current_bnd /= -9.0D40) then
-       structure_out%current_bnd = structure_in%current_bnd
-       if (verbose > 0) write(iu6, *) 'copied globalparam%current_bnd'
-     end if
- 
-     if (structure_in%vloop /= -9.0D40) then
-       structure_out%vloop = structure_in%vloop
-       if (verbose > 0) write(iu6, *) 'copied globalparam%vloop'
-     end if
- 
-     if (structure_in%li /= -9.0D40) then
-       structure_out%li = structure_in%li
-       if (verbose > 0) write(iu6, *) 'copied globalparam%li'
-     end if
- 
-   end subroutine copy_type_globalparam
- 
-   subroutine copy_type_coreprof(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coreprof), intent(in) :: structure_in
-     type (type_coreprof), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied coreprof%rho_tor_norm'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied coreprof%rho_tor'
-     end if
- 
-     if (associated(structure_in%drho_dt)) then
-       if (associated(structure_out%drho_dt)) then
-         if (size(structure_in%drho_dt) &
-          /= size(structure_out%drho_dt)) &
-          deallocate(structure_out%drho_dt)
-       end if
-       if (.not. associated(structure_out%drho_dt)) then
-         allocate(structure_out%drho_dt(size(structure_in%drho_dt, 1)))
-       end if
-       structure_out%drho_dt = structure_in%drho_dt
-       if (verbose > 0) write(iu6, *) 'copied coreprof%drho_dt'
-     end if
- 
-     call copy_type_toroid_field(structure_in%toroid_field, structure_out%toroid_field)
- 
-     call copy_type_composition(structure_in%composition, structure_out%composition)
- 
-     call copy_type_psi(structure_in%psi, structure_out%psi)
- 
-     call copy_type_corefield(structure_in%te, structure_out%te)
- 
-     call copy_type_corefieldion(structure_in%ti, structure_out%ti)
- 
-     call copy_type_corefield(structure_in%ne, structure_out%ne)
- 
-     call copy_type_corefieldion(structure_in%ni, structure_out%ni)
- 
-     call copy_type_corefieldion(structure_in%vtor, structure_out%vtor)
- 
-     call copy_type_profiles1d(structure_in%profiles1d, structure_out%profiles1d)
- 
-     call copy_type_globalparam(structure_in%globalparam, structure_out%globalparam)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied coreprof%time'
-     end if
- 
-   end subroutine copy_type_coreprof
- 
-   subroutine copy_type_coresource(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coresource), intent(in) :: structure_in
-     type (type_coresource), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied coresource%rho_tor'
-     end if
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied coresource%rho_tor_norm'
-     end if
- 
-     call copy_type_composition(structure_in%composition, structure_out%composition)
- 
-     call copy_type_b0r0(structure_in%toroid_field, structure_out%toroid_field)
- 
-     if (associated(structure_in%j)) then
-       if (associated(structure_out%j)) then
-         if (size(structure_in%j) &
-          /= size(structure_out%j)) &
-          deallocate(structure_out%j)
-       end if
-       if (.not. associated(structure_out%j)) then
-         allocate(structure_out%j(size(structure_in%j, 1)))
-       end if
-       structure_out%j = structure_in%j
-       if (verbose > 0) write(iu6, *) 'copied coresource%j'
-     end if
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied coresource%sigma'
-     end if
- 
-     call copy_type_source_ion(structure_in%si, structure_out%si)
- 
-     call copy_type_source_el(structure_in%se, structure_out%se)
- 
-     call copy_type_source_imp(structure_in%sz, structure_out%sz)
- 
-     call copy_type_source_ion(structure_in%qi, structure_out%qi)
- 
-     call copy_type_source_el(structure_in%qe, structure_out%qe)
- 
-     call copy_type_source_imp(structure_in%qz, structure_out%qz)
- 
-     call copy_type_source_ion(structure_in%ui, structure_out%ui)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied coresource%time'
-     end if
- 
-   end subroutine copy_type_coresource
- 
-   subroutine copy_type_ni_transp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_ni_transp), intent(in) :: structure_in
-     type (type_ni_transp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff_eff)) then
-       if (associated(structure_out%diff_eff)) then
-         if (size(structure_in%diff_eff) &
-          /= size(structure_out%diff_eff)) &
-          deallocate(structure_out%diff_eff)
-       end if
-       if (.not. associated(structure_out%diff_eff)) then
-         allocate(structure_out%diff_eff(size(structure_in%diff_eff, 1), &
-          size(structure_in%diff_eff, 2), &
-          size(structure_in%diff_eff, 3)))
-       end if
-       structure_out%diff_eff = structure_in%diff_eff
-       if (verbose > 0) write(iu6, *) 'copied ni_transp%diff_eff'
-     end if
- 
-     if (associated(structure_in%vconv_eff)) then
-       if (associated(structure_out%vconv_eff)) then
-         if (size(structure_in%vconv_eff) &
-          /= size(structure_out%vconv_eff)) &
-          deallocate(structure_out%vconv_eff)
-       end if
-       if (.not. associated(structure_out%vconv_eff)) then
-         allocate(structure_out%vconv_eff(size(structure_in%vconv_eff, 1), &
-          size(structure_in%vconv_eff, 2), &
-          size(structure_in%vconv_eff, 3)))
-       end if
-       structure_out%vconv_eff = structure_in%vconv_eff
-       if (verbose > 0) write(iu6, *) 'copied ni_transp%vconv_eff'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1), &
-          size(structure_in%flux, 2)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied ni_transp%flux'
-     end if
- 
-     call copy_type_offdiagion(structure_in%off_diagonal, structure_out%off_diagonal)
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied ni_transp%flag'
-     end if
- 
-   end subroutine copy_type_ni_transp
- 
-   subroutine copy_type_ne_transp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_ne_transp), intent(in) :: structure_in
-     type (type_ne_transp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%diff_eff)) then
-       if (associated(structure_out%diff_eff)) then
-         if (size(structure_in%diff_eff) &
-          /= size(structure_out%diff_eff)) &
-          deallocate(structure_out%diff_eff)
-       end if
-       if (.not. associated(structure_out%diff_eff)) then
-         allocate(structure_out%diff_eff(size(structure_in%diff_eff, 1), &
-          size(structure_in%diff_eff, 2)))
-       end if
-       structure_out%diff_eff = structure_in%diff_eff
-       if (verbose > 0) write(iu6, *) 'copied ne_transp%diff_eff'
-     end if
- 
-     if (associated(structure_in%vconv_eff)) then
-       if (associated(structure_out%vconv_eff)) then
-         if (size(structure_in%vconv_eff) &
-          /= size(structure_out%vconv_eff)) &
-          deallocate(structure_out%vconv_eff)
-       end if
-       if (.not. associated(structure_out%vconv_eff)) then
-         allocate(structure_out%vconv_eff(size(structure_in%vconv_eff, 1), &
-          size(structure_in%vconv_eff, 2)))
-       end if
-       structure_out%vconv_eff = structure_in%vconv_eff
-       if (verbose > 0) write(iu6, *) 'copied ne_transp%vconv_eff'
-     end if
- 
-     if (associated(structure_in%flux)) then
-       if (associated(structure_out%flux)) then
-         if (size(structure_in%flux) &
-          /= size(structure_out%flux)) &
-          deallocate(structure_out%flux)
-       end if
-       if (.not. associated(structure_out%flux)) then
-         allocate(structure_out%flux(size(structure_in%flux, 1)))
-       end if
-       structure_out%flux = structure_in%flux
-       if (verbose > 0) write(iu6, *) 'copied ne_transp%flux'
-     end if
- 
-     call copy_type_offdiagel(structure_in%off_diagonal, structure_out%off_diagonal)
- 
-     if (structure_in%flag /= -999999999) then
-       structure_out%flag = structure_in%flag
-       if (verbose > 0) write(iu6, *) 'copied ne_transp%flag'
-     end if
- 
-   end subroutine copy_type_ne_transp
- 
-   subroutine copy_type_coretransp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coretransp), intent(in) :: structure_in
-     type (type_coretransp), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_composition(structure_in%composition, structure_out%composition)
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied coretransp%rho_tor_norm'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied coretransp%rho_tor'
-     end if
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied coretransp%sigma'
-     end if
- 
-     call copy_type_ni_transp(structure_in%ni_transp, structure_out%ni_transp)
- 
-     call copy_type_ne_transp(structure_in%ne_transp, structure_out%ne_transp)
- 
-     call copy_type_transcoefimp(structure_in%nz_transp, structure_out%nz_transp)
- 
-     call copy_type_transcoefion(structure_in%ti_transp, structure_out%ti_transp)
- 
-     call copy_type_transcoefel(structure_in%te_transp, structure_out%te_transp)
- 
-     call copy_type_transcoefimp(structure_in%tz_transp, structure_out%tz_transp)
- 
-     call copy_type_transcoefvtor(structure_in%vtor_transp, structure_out%vtor_transp)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied coretransp%time'
-     end if
- 
-   end subroutine copy_type_coretransp
- 
-   subroutine copy_type_coord_sys(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_coord_sys), intent(in) :: structure_in
-     type (type_coord_sys), intent(inout) :: structure_out
- 
-     if (associated(structure_in%grid_type)) then
-       if (associated(structure_out%grid_type)) then
-         if (size(structure_in%grid_type) &
-          /= size(structure_out%grid_type)) &
-          deallocate(structure_out%grid_type)
-       end if
-       if (.not. associated(structure_out%grid_type)) then
-         allocate(structure_out%grid_type(size(structure_in%grid_type)))
-       end if
-       structure_out%grid_type = structure_in%grid_type
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%grid_type'
-     end if
- 
-     call copy_type_reggrid(structure_in%grid, structure_out%grid)
- 
-     if (associated(structure_in%jacobian)) then
-       if (associated(structure_out%jacobian)) then
-         if (size(structure_in%jacobian) &
-          /= size(structure_out%jacobian)) &
-          deallocate(structure_out%jacobian)
-       end if
-       if (.not. associated(structure_out%jacobian)) then
-         allocate(structure_out%jacobian(size(structure_in%jacobian, 1), &
-          size(structure_in%jacobian, 2)))
-       end if
-       structure_out%jacobian = structure_in%jacobian
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%jacobian'
-     end if
- 
-     if (associated(structure_in%g_11)) then
-       if (associated(structure_out%g_11)) then
-         if (size(structure_in%g_11) &
-          /= size(structure_out%g_11)) &
-          deallocate(structure_out%g_11)
-       end if
-       if (.not. associated(structure_out%g_11)) then
-         allocate(structure_out%g_11(size(structure_in%g_11, 1), &
-          size(structure_in%g_11, 2)))
-       end if
-       structure_out%g_11 = structure_in%g_11
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%g_11'
-     end if
- 
-     if (associated(structure_in%g_12)) then
-       if (associated(structure_out%g_12)) then
-         if (size(structure_in%g_12) &
-          /= size(structure_out%g_12)) &
-          deallocate(structure_out%g_12)
-       end if
-       if (.not. associated(structure_out%g_12)) then
-         allocate(structure_out%g_12(size(structure_in%g_12, 1), &
-          size(structure_in%g_12, 2)))
-       end if
-       structure_out%g_12 = structure_in%g_12
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%g_12'
-     end if
- 
-     if (associated(structure_in%g_13)) then
-       if (associated(structure_out%g_13)) then
-         if (size(structure_in%g_13) &
-          /= size(structure_out%g_13)) &
-          deallocate(structure_out%g_13)
-       end if
-       if (.not. associated(structure_out%g_13)) then
-         allocate(structure_out%g_13(size(structure_in%g_13, 1), &
-          size(structure_in%g_13, 2)))
-       end if
-       structure_out%g_13 = structure_in%g_13
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%g_13'
-     end if
- 
-     if (associated(structure_in%g_22)) then
-       if (associated(structure_out%g_22)) then
-         if (size(structure_in%g_22) &
-          /= size(structure_out%g_22)) &
-          deallocate(structure_out%g_22)
-       end if
-       if (.not. associated(structure_out%g_22)) then
-         allocate(structure_out%g_22(size(structure_in%g_22, 1), &
-          size(structure_in%g_22, 2)))
-       end if
-       structure_out%g_22 = structure_in%g_22
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%g_22'
-     end if
- 
-     if (associated(structure_in%g_23)) then
-       if (associated(structure_out%g_23)) then
-         if (size(structure_in%g_23) &
-          /= size(structure_out%g_23)) &
-          deallocate(structure_out%g_23)
-       end if
-       if (.not. associated(structure_out%g_23)) then
-         allocate(structure_out%g_23(size(structure_in%g_23, 1), &
-          size(structure_in%g_23, 2)))
-       end if
-       structure_out%g_23 = structure_in%g_23
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%g_23'
-     end if
- 
-     if (associated(structure_in%g_33)) then
-       if (associated(structure_out%g_33)) then
-         if (size(structure_in%g_33) &
-          /= size(structure_out%g_33)) &
-          deallocate(structure_out%g_33)
-       end if
-       if (.not. associated(structure_out%g_33)) then
-         allocate(structure_out%g_33(size(structure_in%g_33, 1), &
-          size(structure_in%g_33, 2)))
-       end if
-       structure_out%g_33 = structure_in%g_33
-       if (verbose > 0) write(iu6, *) 'copied coord_sys%g_33'
-     end if
- 
-     call copy_type_rz2D(structure_in%position, structure_out%position)
- 
-   end subroutine copy_type_coord_sys
- 
-   subroutine copy_type_eqmes0D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_eqmes0D), intent(in) :: structure_in
-     type (type_eqmes0D), intent(inout) :: structure_out
- 
-     if (structure_in%measured /= -9.0D40) then
-       structure_out%measured = structure_in%measured
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%measured'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%source'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%time'
-     end if
- 
-     if (structure_in%exact /= -999999999) then
-       structure_out%exact = structure_in%exact
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%exact'
-     end if
- 
-     if (structure_in%weight /= -9.0D40) then
-       structure_out%weight = structure_in%weight
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%weight'
-     end if
- 
-     if (structure_in%sigma /= -9.0D40) then
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%sigma'
-     end if
- 
-     if (structure_in%calculated /= -9.0D40) then
-       structure_out%calculated = structure_in%calculated
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%calculated'
-     end if
- 
-     if (structure_in%chi2 /= -9.0D40) then
-       structure_out%chi2 = structure_in%chi2
-       if (verbose > 0) write(iu6, *) 'copied eqmes0D%chi2'
-     end if
- 
-   end subroutine copy_type_eqmes0D
- 
-   subroutine copy_type_eqmes1D(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_eqmes1D), intent(in) :: structure_in
-     type (type_eqmes1D), intent(inout) :: structure_out
- 
-     if (associated(structure_in%measured)) then
-       if (associated(structure_out%measured)) then
-         if (size(structure_in%measured) &
-          /= size(structure_out%measured)) &
-          deallocate(structure_out%measured)
-       end if
-       if (.not. associated(structure_out%measured)) then
-         allocate(structure_out%measured(size(structure_in%measured, 1)))
-       end if
-       structure_out%measured = structure_in%measured
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%measured'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%source'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%time'
-     end if
- 
-     if (associated(structure_in%exact)) then
-       if (associated(structure_out%exact)) then
-         if (size(structure_in%exact) &
-          /= size(structure_out%exact)) &
-          deallocate(structure_out%exact)
-       end if
-       if (.not. associated(structure_out%exact)) then
-         allocate(structure_out%exact(size(structure_in%exact, 1)))
-       end if
-       structure_out%exact = structure_in%exact
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%exact'
-     end if
- 
-     if (associated(structure_in%weight)) then
-       if (associated(structure_out%weight)) then
-         if (size(structure_in%weight) &
-          /= size(structure_out%weight)) &
-          deallocate(structure_out%weight)
-       end if
-       if (.not. associated(structure_out%weight)) then
-         allocate(structure_out%weight(size(structure_in%weight, 1)))
-       end if
-       structure_out%weight = structure_in%weight
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%weight'
-     end if
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%sigma'
-     end if
- 
-     if (associated(structure_in%calculated)) then
-       if (associated(structure_out%calculated)) then
-         if (size(structure_in%calculated) &
-          /= size(structure_out%calculated)) &
-          deallocate(structure_out%calculated)
-       end if
-       if (.not. associated(structure_out%calculated)) then
-         allocate(structure_out%calculated(size(structure_in%calculated, 1)))
-       end if
-       structure_out%calculated = structure_in%calculated
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%calculated'
-     end if
- 
-     if (associated(structure_in%chi2)) then
-       if (associated(structure_out%chi2)) then
-         if (size(structure_in%chi2) &
-          /= size(structure_out%chi2)) &
-          deallocate(structure_out%chi2)
-       end if
-       if (.not. associated(structure_out%chi2)) then
-         allocate(structure_out%chi2(size(structure_in%chi2, 1)))
-       end if
-       structure_out%chi2 = structure_in%chi2
-       if (verbose > 0) write(iu6, *) 'copied eqmes1D%chi2'
-     end if
- 
-   end subroutine copy_type_eqmes1D
- 
-   subroutine copy_type_isoflux(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_isoflux), intent(in) :: structure_in
-     type (type_isoflux), intent(inout) :: structure_out
- 
-     call copy_type_rz1D(structure_in%position, structure_out%position)
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied isoflux%source'
-     end if
- 
-     if (associated(structure_in%weight)) then
-       if (associated(structure_out%weight)) then
-         if (size(structure_in%weight) &
-          /= size(structure_out%weight)) &
-          deallocate(structure_out%weight)
-       end if
-       if (.not. associated(structure_out%weight)) then
-         allocate(structure_out%weight(size(structure_in%weight, 1)))
-       end if
-       structure_out%weight = structure_in%weight
-       if (verbose > 0) write(iu6, *) 'copied isoflux%weight'
-     end if
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied isoflux%sigma'
-     end if
- 
-     if (associated(structure_in%calculated)) then
-       if (associated(structure_out%calculated)) then
-         if (size(structure_in%calculated) &
-          /= size(structure_out%calculated)) &
-          deallocate(structure_out%calculated)
-       end if
-       if (.not. associated(structure_out%calculated)) then
-         allocate(structure_out%calculated(size(structure_in%calculated, 1)))
-       end if
-       structure_out%calculated = structure_in%calculated
-       if (verbose > 0) write(iu6, *) 'copied isoflux%calculated'
-     end if
- 
-     if (associated(structure_in%chi2)) then
-       if (associated(structure_out%chi2)) then
-         if (size(structure_in%chi2) &
-          /= size(structure_out%chi2)) &
-          deallocate(structure_out%chi2)
-       end if
-       if (.not. associated(structure_out%chi2)) then
-         allocate(structure_out%chi2(size(structure_in%chi2, 1)))
-       end if
-       structure_out%chi2 = structure_in%chi2
-       if (verbose > 0) write(iu6, *) 'copied isoflux%chi2'
-     end if
- 
-   end subroutine copy_type_isoflux
- 
-   subroutine copy_type_magnet_iron(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_magnet_iron), intent(in) :: structure_in
-     type (type_magnet_iron), intent(inout) :: structure_out
- 
-     call copy_type_eqmes1D(structure_in%mr, structure_out%mr)
- 
-     call copy_type_eqmes1D(structure_in%mz, structure_out%mz)
- 
-   end subroutine copy_type_magnet_iron
- 
-   subroutine copy_type_q(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_q), intent(in) :: structure_in
-     type (type_q), intent(inout) :: structure_out
- 
-     if (associated(structure_in%qvalue)) then
-       if (associated(structure_out%qvalue)) then
-         if (size(structure_in%qvalue) &
-          /= size(structure_out%qvalue)) &
-          deallocate(structure_out%qvalue)
-       end if
-       if (.not. associated(structure_out%qvalue)) then
-         allocate(structure_out%qvalue(size(structure_in%qvalue, 1)))
-       end if
-       structure_out%qvalue = structure_in%qvalue
-       if (verbose > 0) write(iu6, *) 'copied q%qvalue'
-     end if
- 
-     call copy_type_rz1D(structure_in%position, structure_out%position)
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied q%source'
-     end if
- 
-     if (structure_in%exact /= -999999999) then
-       structure_out%exact = structure_in%exact
-       if (verbose > 0) write(iu6, *) 'copied q%exact'
-     end if
- 
-     if (associated(structure_in%weight)) then
-       if (associated(structure_out%weight)) then
-         if (size(structure_in%weight) &
-          /= size(structure_out%weight)) &
-          deallocate(structure_out%weight)
-       end if
-       if (.not. associated(structure_out%weight)) then
-         allocate(structure_out%weight(size(structure_in%weight, 1)))
-       end if
-       structure_out%weight = structure_in%weight
-       if (verbose > 0) write(iu6, *) 'copied q%weight'
-     end if
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied q%sigma'
-     end if
- 
-     if (associated(structure_in%calculated)) then
-       if (associated(structure_out%calculated)) then
-         if (size(structure_in%calculated) &
-          /= size(structure_out%calculated)) &
-          deallocate(structure_out%calculated)
-       end if
-       if (.not. associated(structure_out%calculated)) then
-         allocate(structure_out%calculated(size(structure_in%calculated, 1)))
-       end if
-       structure_out%calculated = structure_in%calculated
-       if (verbose > 0) write(iu6, *) 'copied q%calculated'
-     end if
- 
-     if (associated(structure_in%chi2)) then
-       if (associated(structure_out%chi2)) then
-         if (size(structure_in%chi2) &
-          /= size(structure_out%chi2)) &
-          deallocate(structure_out%chi2)
-       end if
-       if (.not. associated(structure_out%chi2)) then
-         allocate(structure_out%chi2(size(structure_in%chi2, 1)))
-       end if
-       structure_out%chi2 = structure_in%chi2
-       if (verbose > 0) write(iu6, *) 'copied q%chi2'
-     end if
- 
-   end subroutine copy_type_q
- 
-   subroutine copy_type_xpts(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_xpts), intent(in) :: structure_in
-     type (type_xpts), intent(inout) :: structure_out
- 
-     call copy_type_rz1D(structure_in%position, structure_out%position)
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied xpts%source'
-     end if
- 
-     if (associated(structure_in%weight)) then
-       if (associated(structure_out%weight)) then
-         if (size(structure_in%weight) &
-          /= size(structure_out%weight)) &
-          deallocate(structure_out%weight)
-       end if
-       if (.not. associated(structure_out%weight)) then
-         allocate(structure_out%weight(size(structure_in%weight, 1)))
-       end if
-       structure_out%weight = structure_in%weight
-       if (verbose > 0) write(iu6, *) 'copied xpts%weight'
-     end if
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied xpts%sigma'
-     end if
- 
-     if (associated(structure_in%calculated)) then
-       if (associated(structure_out%calculated)) then
-         if (size(structure_in%calculated) &
-          /= size(structure_out%calculated)) &
-          deallocate(structure_out%calculated)
-       end if
-       if (.not. associated(structure_out%calculated)) then
-         allocate(structure_out%calculated(size(structure_in%calculated, 1)))
-       end if
-       structure_out%calculated = structure_in%calculated
-       if (verbose > 0) write(iu6, *) 'copied xpts%calculated'
-     end if
- 
-     if (associated(structure_in%chi2)) then
-       if (associated(structure_out%chi2)) then
-         if (size(structure_in%chi2) &
-          /= size(structure_out%chi2)) &
-          deallocate(structure_out%chi2)
-       end if
-       if (.not. associated(structure_out%chi2)) then
-         allocate(structure_out%chi2(size(structure_in%chi2, 1)))
-       end if
-       structure_out%chi2 = structure_in%chi2
-       if (verbose > 0) write(iu6, *) 'copied xpts%chi2'
-     end if
- 
-   end subroutine copy_type_xpts
- 
-   subroutine copy_type_eqconstraint(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_eqconstraint), intent(in) :: structure_in
-     type (type_eqconstraint), intent(inout) :: structure_out
- 
-     call copy_type_eqmes1D(structure_in%bpol, structure_out%bpol)
- 
-     call copy_type_eqmes0D(structure_in%bvac_r, structure_out%bvac_r)
- 
-     call copy_type_eqmes1D(structure_in%faraday, structure_out%faraday)
- 
-     call copy_type_eqmes1D(structure_in%flux, structure_out%flux)
- 
-     call copy_type_eqmes0D(structure_in%i_plasma, structure_out%i_plasma)
- 
-     call copy_type_isoflux(structure_in%isoflux, structure_out%isoflux)
- 
-     call copy_type_eqmes1D(structure_in%jsurf, structure_out%jsurf)
- 
-     call copy_type_magnet_iron(structure_in%magnet_iron, structure_out%magnet_iron)
- 
-     call copy_type_eqmes1D(structure_in%mse, structure_out%mse)
- 
-     call copy_type_eqmes1D(structure_in%ne, structure_out%ne)
- 
-     call copy_type_eqmes1D(structure_in%pfcurrent, structure_out%pfcurrent)
- 
-     call copy_type_eqmes1D(structure_in%pressure, structure_out%pressure)
- 
-     call copy_type_q(structure_in%q, structure_out%q)
- 
-     call copy_type_xpts(structure_in%xpts, structure_out%xpts)
- 
-   end subroutine copy_type_eqconstraint
- 
-   subroutine copy_type_plasmagrid(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_plasmagrid), intent(in) :: structure_in
-     type (type_plasmagrid), intent(inout) :: structure_out
- 
-     if (associated(structure_in%grid_type)) then
-       if (associated(structure_out%grid_type)) then
-         if (size(structure_in%grid_type) &
-          /= size(structure_out%grid_type)) &
-          deallocate(structure_out%grid_type)
-       end if
-       if (.not. associated(structure_out%grid_type)) then
-         allocate(structure_out%grid_type(size(structure_in%grid_type)))
-       end if
-       structure_out%grid_type = structure_in%grid_type
-       if (verbose > 0) write(iu6, *) 'copied plasmagrid%grid_type'
-     end if
- 
-     call copy_type_reggrid(structure_in%grid, structure_out%grid)
- 
-     if (associated(structure_in%dflux_grid)) then
-       if (associated(structure_out%dflux_grid)) then
-         if (size(structure_in%dflux_grid) &
-          /= size(structure_out%dflux_grid)) &
-          deallocate(structure_out%dflux_grid)
-       end if
-       if (.not. associated(structure_out%dflux_grid)) then
-         allocate(structure_out%dflux_grid(size(structure_in%dflux_grid, 1), &
-          size(structure_in%dflux_grid, 2), &
-          size(structure_in%dflux_grid, 3)))
-       end if
-       structure_out%dflux_grid = structure_in%dflux_grid
-       if (verbose > 0) write(iu6, *) 'copied plasmagrid%dflux_grid'
-     end if
- 
-     if (associated(structure_in%bpol_grid)) then
-       if (associated(structure_out%bpol_grid)) then
-         if (size(structure_in%bpol_grid) &
-          /= size(structure_out%bpol_grid)) &
-          deallocate(structure_out%bpol_grid)
-       end if
-       if (.not. associated(structure_out%bpol_grid)) then
-         allocate(structure_out%bpol_grid(size(structure_in%bpol_grid, 1), &
-          size(structure_in%bpol_grid, 2), &
-          size(structure_in%bpol_grid, 3)))
-       end if
-       structure_out%bpol_grid = structure_in%bpol_grid
-       if (verbose > 0) write(iu6, *) 'copied plasmagrid%bpol_grid'
-     end if
- 
-     if (associated(structure_in%pol_grid)) then
-       if (associated(structure_out%pol_grid)) then
-         if (size(structure_in%pol_grid) &
-          /= size(structure_out%pol_grid)) &
-          deallocate(structure_out%pol_grid)
-       end if
-       if (.not. associated(structure_out%pol_grid)) then
-         allocate(structure_out%pol_grid(size(structure_in%pol_grid, 1), &
-          size(structure_in%pol_grid, 2), &
-          size(structure_in%pol_grid, 3)))
-       end if
-       structure_out%pol_grid = structure_in%pol_grid
-       if (verbose > 0) write(iu6, *) 'copied plasmagrid%pol_grid'
-     end if
- 
-     if (associated(structure_in%grid_grid)) then
-       if (associated(structure_out%grid_grid)) then
-         if (size(structure_in%grid_grid) &
-          /= size(structure_out%grid_grid)) &
-          deallocate(structure_out%grid_grid)
-       end if
-       if (.not. associated(structure_out%grid_grid)) then
-         allocate(structure_out%grid_grid(size(structure_in%grid_grid, 1), &
-          size(structure_in%grid_grid, 2), &
-          size(structure_in%grid_grid, 3), &
-          size(structure_in%grid_grid, 4)))
-       end if
-       structure_out%grid_grid = structure_in%grid_grid
-       if (verbose > 0) write(iu6, *) 'copied plasmagrid%grid_grid'
-     end if
- 
-   end subroutine copy_type_plasmagrid
- 
-   subroutine copy_type_emcalc(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_emcalc), intent(in) :: structure_in
-     type (type_emcalc), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%modelnrnz)) then
-       if (associated(structure_out%modelnrnz)) then
-         if (size(structure_in%modelnrnz) &
-          /= size(structure_out%modelnrnz)) &
-          deallocate(structure_out%modelnrnz)
-       end if
-       if (.not. associated(structure_out%modelnrnz)) then
-         allocate(structure_out%modelnrnz(size(structure_in%modelnrnz, 1)))
-       end if
-       structure_out%modelnrnz = structure_in%modelnrnz
-       if (verbose > 0) write(iu6, *) 'copied emcalc%modelnrnz'
-     end if
- 
-     if (structure_in%npolcurrents /= -999999999) then
-       structure_out%npolcurrents = structure_in%npolcurrents
-       if (verbose > 0) write(iu6, *) 'copied emcalc%npolcurrents'
-     end if
- 
-     if (associated(structure_in%mut_pol_pol)) then
-       if (associated(structure_out%mut_pol_pol)) then
-         if (size(structure_in%mut_pol_pol) &
-          /= size(structure_out%mut_pol_pol)) &
-          deallocate(structure_out%mut_pol_pol)
-       end if
-       if (.not. associated(structure_out%mut_pol_pol)) then
-         allocate(structure_out%mut_pol_pol(size(structure_in%mut_pol_pol, 1), &
-          size(structure_in%mut_pol_pol, 2)))
-       end if
-       structure_out%mut_pol_pol = structure_in%mut_pol_pol
-       if (verbose > 0) write(iu6, *) 'copied emcalc%mut_pol_pol'
-     end if
- 
-     if (associated(structure_in%br_pol_pol)) then
-       if (associated(structure_out%br_pol_pol)) then
-         if (size(structure_in%br_pol_pol) &
-          /= size(structure_out%br_pol_pol)) &
-          deallocate(structure_out%br_pol_pol)
-       end if
-       if (.not. associated(structure_out%br_pol_pol)) then
-         allocate(structure_out%br_pol_pol(size(structure_in%br_pol_pol, 1), &
-          size(structure_in%br_pol_pol, 2)))
-       end if
-       structure_out%br_pol_pol = structure_in%br_pol_pol
-       if (verbose > 0) write(iu6, *) 'copied emcalc%br_pol_pol'
-     end if
- 
-     if (associated(structure_in%bz_pol_pol)) then
-       if (associated(structure_out%bz_pol_pol)) then
-         if (size(structure_in%bz_pol_pol) &
-          /= size(structure_out%bz_pol_pol)) &
-          deallocate(structure_out%bz_pol_pol)
-       end if
-       if (.not. associated(structure_out%bz_pol_pol)) then
-         allocate(structure_out%bz_pol_pol(size(structure_in%bz_pol_pol, 1), &
-          size(structure_in%bz_pol_pol, 2)))
-       end if
-       structure_out%bz_pol_pol = structure_in%bz_pol_pol
-       if (verbose > 0) write(iu6, *) 'copied emcalc%bz_pol_pol'
-     end if
- 
-     if (associated(structure_in%bpol_pol)) then
-       if (associated(structure_out%bpol_pol)) then
-         if (size(structure_in%bpol_pol) &
-          /= size(structure_out%bpol_pol)) &
-          deallocate(structure_out%bpol_pol)
-       end if
-       if (.not. associated(structure_out%bpol_pol)) then
-         allocate(structure_out%bpol_pol(size(structure_in%bpol_pol, 1), &
-          size(structure_in%bpol_pol, 2)))
-       end if
-       structure_out%bpol_pol = structure_in%bpol_pol
-       if (verbose > 0) write(iu6, *) 'copied emcalc%bpol_pol'
-     end if
- 
-     if (associated(structure_in%dflux_pol)) then
-       if (associated(structure_out%dflux_pol)) then
-         if (size(structure_in%dflux_pol) &
-          /= size(structure_out%dflux_pol)) &
-          deallocate(structure_out%dflux_pol)
-       end if
-       if (.not. associated(structure_out%dflux_pol)) then
-         allocate(structure_out%dflux_pol(size(structure_in%dflux_pol, 1), &
-          size(structure_in%dflux_pol, 2)))
-       end if
-       structure_out%dflux_pol = structure_in%dflux_pol
-       if (verbose > 0) write(iu6, *) 'copied emcalc%dflux_pol'
-     end if
- 
-     call copy_type_plasmagrid(structure_in%plasmagrid, structure_out%plasmagrid)
- 
-   end subroutine copy_type_emcalc
- 
-   subroutine copy_type_flush(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_flush), intent(in) :: structure_in
-     type (type_flush), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_rz1D(structure_in%position, structure_out%position)
- 
-     if (associated(structure_in%coef)) then
-       if (associated(structure_out%coef)) then
-         if (size(structure_in%coef) &
-          /= size(structure_out%coef)) &
-          deallocate(structure_out%coef)
-       end if
-       if (.not. associated(structure_out%coef)) then
-         allocate(structure_out%coef(size(structure_in%coef, 1), &
-          size(structure_in%coef, 2)))
-       end if
-       structure_out%coef = structure_in%coef
-       if (verbose > 0) write(iu6, *) 'copied flush%coef'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_flush
- 
-   subroutine copy_type_fp_src_snk_vol(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_src_snk_vol), intent(in) :: structure_in
-     type (type_fp_src_snk_vol), intent(inout) :: structure_out
- 
-     if (associated(structure_in%particles)) then
-       if (associated(structure_out%particles)) then
-         if (size(structure_in%particles) &
-          /= size(structure_out%particles)) &
-          deallocate(structure_out%particles)
-       end if
-       if (.not. associated(structure_out%particles)) then
-         allocate(structure_out%particles(size(structure_in%particles, 1), &
-          size(structure_in%particles, 2)))
-       end if
-       structure_out%particles = structure_in%particles
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_vol%particles'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1), &
-          size(structure_in%power, 2)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_vol%power'
-     end if
- 
-     if (associated(structure_in%torque)) then
-       if (associated(structure_out%torque)) then
-         if (size(structure_in%torque) &
-          /= size(structure_out%torque)) &
-          deallocate(structure_out%torque)
-       end if
-       if (.not. associated(structure_out%torque)) then
-         allocate(structure_out%torque(size(structure_in%torque, 1), &
-          size(structure_in%torque, 2)))
-       end if
-       structure_out%torque = structure_in%torque
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_vol%torque'
-     end if
- 
-   end subroutine copy_type_fp_src_snk_vol
- 
-   subroutine copy_type_fp_src_snk_surf(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_src_snk_surf), intent(in) :: structure_in
-     type (type_fp_src_snk_surf), intent(inout) :: structure_out
- 
-     if (associated(structure_in%particlesd)) then
-       if (associated(structure_out%particlesd)) then
-         if (size(structure_in%particlesd) &
-          /= size(structure_out%particlesd)) &
-          deallocate(structure_out%particlesd)
-       end if
-       if (.not. associated(structure_out%particlesd)) then
-         allocate(structure_out%particlesd(size(structure_in%particlesd, 1), &
-          size(structure_in%particlesd, 2)))
-       end if
-       structure_out%particlesd = structure_in%particlesd
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_surf%particlesd'
-     end if
- 
-     if (associated(structure_in%powerd)) then
-       if (associated(structure_out%powerd)) then
-         if (size(structure_in%powerd) &
-          /= size(structure_out%powerd)) &
-          deallocate(structure_out%powerd)
-       end if
-       if (.not. associated(structure_out%powerd)) then
-         allocate(structure_out%powerd(size(structure_in%powerd, 1), &
-          size(structure_in%powerd, 2)))
-       end if
-       structure_out%powerd = structure_in%powerd
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_surf%powerd'
-     end if
- 
-     if (associated(structure_in%torqued)) then
-       if (associated(structure_out%torqued)) then
-         if (size(structure_in%torqued) &
-          /= size(structure_out%torqued)) &
-          deallocate(structure_out%torqued)
-       end if
-       if (.not. associated(structure_out%torqued)) then
-         allocate(structure_out%torqued(size(structure_in%torqued, 1), &
-          size(structure_in%torqued, 2)))
-       end if
-       structure_out%torqued = structure_in%torqued
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_surf%torqued'
-     end if
- 
-   end subroutine copy_type_fp_src_snk_surf
- 
-   subroutine copy_type_fp_src_snk_tot(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_src_snk_tot), intent(in) :: structure_in
-     type (type_fp_src_snk_tot), intent(inout) :: structure_out
- 
-     if (associated(structure_in%particles)) then
-       if (associated(structure_out%particles)) then
-         if (size(structure_in%particles) &
-          /= size(structure_out%particles)) &
-          deallocate(structure_out%particles)
-       end if
-       if (.not. associated(structure_out%particles)) then
-         allocate(structure_out%particles(size(structure_in%particles, 1)))
-       end if
-       structure_out%particles = structure_in%particles
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_tot%particles'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_tot%power'
-     end if
- 
-     if (associated(structure_in%torque)) then
-       if (associated(structure_out%torque)) then
-         if (size(structure_in%torque) &
-          /= size(structure_out%torque)) &
-          deallocate(structure_out%torque)
-       end if
-       if (.not. associated(structure_out%torque)) then
-         allocate(structure_out%torque(size(structure_in%torque, 1)))
-       end if
-       structure_out%torque = structure_in%torque
-       if (verbose > 0) write(iu6, *) 'copied fp_src_snk_tot%torque'
-     end if
- 
-   end subroutine copy_type_fp_src_snk_tot
- 
-   subroutine copy_type_fp_test_part(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_test_part), intent(in) :: structure_in
-     type (type_fp_test_part), intent(inout) :: structure_out
- 
-     if (associated(structure_in%nvar)) then
-       if (associated(structure_out%nvar)) then
-         if (size(structure_in%nvar) &
-          /= size(structure_out%nvar)) &
-          deallocate(structure_out%nvar)
-       end if
-       if (.not. associated(structure_out%nvar)) then
-         allocate(structure_out%nvar(size(structure_in%nvar, 1)))
-       end if
-       structure_out%nvar = structure_in%nvar
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%nvar'
-     end if
- 
-     if (associated(structure_in%var_id)) then
-       if (associated(structure_out%var_id)) then
-         if (size(structure_in%var_id) &
-          /= size(structure_out%var_id)) &
-          deallocate(structure_out%var_id)
-       end if
-       if (.not. associated(structure_out%var_id)) then
-         allocate(structure_out%var_id(size(structure_in%var_id, 1), &
-          size(structure_in%var_id, 2)))
-       end if
-       structure_out%var_id = structure_in%var_id
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%var_id'
-     end if
- 
-     if (associated(structure_in%var1)) then
-       if (associated(structure_out%var1)) then
-         if (size(structure_in%var1) &
-          /= size(structure_out%var1)) &
-          deallocate(structure_out%var1)
-       end if
-       if (.not. associated(structure_out%var1)) then
-         allocate(structure_out%var1(size(structure_in%var1, 1), &
-          size(structure_in%var1, 2)))
-       end if
-       structure_out%var1 = structure_in%var1
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%var1'
-     end if
- 
-     if (associated(structure_in%var2)) then
-       if (associated(structure_out%var2)) then
-         if (size(structure_in%var2) &
-          /= size(structure_out%var2)) &
-          deallocate(structure_out%var2)
-       end if
-       if (.not. associated(structure_out%var2)) then
-         allocate(structure_out%var2(size(structure_in%var2, 1), &
-          size(structure_in%var2, 2)))
-       end if
-       structure_out%var2 = structure_in%var2
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%var2'
-     end if
- 
-     if (associated(structure_in%var3)) then
-       if (associated(structure_out%var3)) then
-         if (size(structure_in%var3) &
-          /= size(structure_out%var3)) &
-          deallocate(structure_out%var3)
-       end if
-       if (.not. associated(structure_out%var3)) then
-         allocate(structure_out%var3(size(structure_in%var3, 1), &
-          size(structure_in%var3, 2)))
-       end if
-       structure_out%var3 = structure_in%var3
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%var3'
-     end if
- 
-     if (associated(structure_in%var4)) then
-       if (associated(structure_out%var4)) then
-         if (size(structure_in%var4) &
-          /= size(structure_out%var4)) &
-          deallocate(structure_out%var4)
-       end if
-       if (.not. associated(structure_out%var4)) then
-         allocate(structure_out%var4(size(structure_in%var4, 1), &
-          size(structure_in%var4, 2)))
-       end if
-       structure_out%var4 = structure_in%var4
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%var4'
-     end if
- 
-     if (associated(structure_in%var5)) then
-       if (associated(structure_out%var5)) then
-         if (size(structure_in%var5) &
-          /= size(structure_out%var5)) &
-          deallocate(structure_out%var5)
-       end if
-       if (.not. associated(structure_out%var5)) then
-         allocate(structure_out%var5(size(structure_in%var5, 1), &
-          size(structure_in%var5, 2)))
-       end if
-       structure_out%var5 = structure_in%var5
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%var5'
-     end if
- 
-     if (associated(structure_in%weight)) then
-       if (associated(structure_out%weight)) then
-         if (size(structure_in%weight) &
-          /= size(structure_out%weight)) &
-          deallocate(structure_out%weight)
-       end if
-       if (.not. associated(structure_out%weight)) then
-         allocate(structure_out%weight(size(structure_in%weight, 1), &
-          size(structure_in%weight, 2)))
-       end if
-       structure_out%weight = structure_in%weight
-       if (verbose > 0) write(iu6, *) 'copied fp_test_part%weight'
-     end if
- 
-   end subroutine copy_type_fp_test_part
- 
-   subroutine copy_type_fp_grid(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_grid), intent(in) :: structure_in
-     type (type_fp_grid), intent(inout) :: structure_out
- 
-     if (associated(structure_in%dim1)) then
-       if (associated(structure_out%dim1)) then
-         if (size(structure_in%dim1) &
-          /= size(structure_out%dim1)) &
-          deallocate(structure_out%dim1)
-       end if
-       if (.not. associated(structure_out%dim1)) then
-         allocate(structure_out%dim1(size(structure_in%dim1, 1), &
-          size(structure_in%dim1, 2)))
-       end if
-       structure_out%dim1 = structure_in%dim1
-       if (verbose > 0) write(iu6, *) 'copied fp_grid%dim1'
-     end if
- 
-     if (associated(structure_in%ndim1)) then
-       if (associated(structure_out%ndim1)) then
-         if (size(structure_in%ndim1) &
-          /= size(structure_out%ndim1)) &
-          deallocate(structure_out%ndim1)
-       end if
-       if (.not. associated(structure_out%ndim1)) then
-         allocate(structure_out%ndim1(size(structure_in%ndim1, 1)))
-       end if
-       structure_out%ndim1 = structure_in%ndim1
-       if (verbose > 0) write(iu6, *) 'copied fp_grid%ndim1'
-     end if
- 
-     if (associated(structure_in%dim2)) then
-       if (associated(structure_out%dim2)) then
-         if (size(structure_in%dim2) &
-          /= size(structure_out%dim2)) &
-          deallocate(structure_out%dim2)
-       end if
-       if (.not. associated(structure_out%dim2)) then
-         allocate(structure_out%dim2(size(structure_in%dim2, 1), &
-          size(structure_in%dim2, 2)))
-       end if
-       structure_out%dim2 = structure_in%dim2
-       if (verbose > 0) write(iu6, *) 'copied fp_grid%dim2'
-     end if
- 
-     if (associated(structure_in%ndim2)) then
-       if (associated(structure_out%ndim2)) then
-         if (size(structure_in%ndim2) &
-          /= size(structure_out%ndim2)) &
-          deallocate(structure_out%ndim2)
-       end if
-       if (.not. associated(structure_out%ndim2)) then
-         allocate(structure_out%ndim2(size(structure_in%ndim2, 1)))
-       end if
-       structure_out%ndim2 = structure_in%ndim2
-       if (verbose > 0) write(iu6, *) 'copied fp_grid%ndim2'
-     end if
- 
-     if (associated(structure_in%dim3)) then
-       if (associated(structure_out%dim3)) then
-         if (size(structure_in%dim3) &
-          /= size(structure_out%dim3)) &
-          deallocate(structure_out%dim3)
-       end if
-       if (.not. associated(structure_out%dim3)) then
-         allocate(structure_out%dim3(size(structure_in%dim3, 1), &
-          size(structure_in%dim3, 2)))
-       end if
-       structure_out%dim3 = structure_in%dim3
-       if (verbose > 0) write(iu6, *) 'copied fp_grid%dim3'
-     end if
- 
-     if (associated(structure_in%ndim3)) then
-       if (associated(structure_out%ndim3)) then
-         if (size(structure_in%ndim3) &
-          /= size(structure_out%ndim3)) &
-          deallocate(structure_out%ndim3)
-       end if
-       if (.not. associated(structure_out%ndim3)) then
-         allocate(structure_out%ndim3(size(structure_in%ndim3, 1)))
-       end if
-       structure_out%ndim3 = structure_in%ndim3
-       if (verbose > 0) write(iu6, *) 'copied fp_grid%ndim3'
-     end if
- 
-     if (associated(structure_in%jacobian)) then
-       if (associated(structure_out%jacobian)) then
-         if (size(structure_in%jacobian) &
-          /= size(structure_out%jacobian)) &
-          deallocate(structure_out%jacobian)
-       end if
-       if (.not. associated(structure_out%jacobian)) then
-         allocate(structure_out%jacobian(size(structure_in%jacobian, 1), &
-          size(structure_in%jacobian, 2), &
-          size(structure_in%jacobian, 3), &
-          size(structure_in%jacobian, 4), &
-          size(structure_in%jacobian, 5)))
-       end if
-       structure_out%jacobian = structure_in%jacobian
-       if (verbose > 0) write(iu6, *) 'copied fp_grid%jacobian'
-     end if
- 
-   end subroutine copy_type_fp_grid
- 
-   subroutine copy_type_fp_ff(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_ff), intent(in) :: structure_in
-     type (type_fp_ff), intent(inout) :: structure_out
- 
-     if (associated(structure_in%grid_type)) then
-       if (associated(structure_out%grid_type)) then
-         if (size(structure_in%grid_type) &
-          /= size(structure_out%grid_type)) &
-          deallocate(structure_out%grid_type)
-       end if
-       if (.not. associated(structure_out%grid_type)) then
-         allocate(structure_out%grid_type(size(structure_in%grid_type, 1)))
-       end if
-       structure_out%grid_type = structure_in%grid_type
-       if (verbose > 0) write(iu6, *) 'copied fp_ff%grid_type'
-     end if
- 
-     call copy_type_fp_grid(structure_in%grid, structure_out%grid)
- 
-     if (associated(structure_in%value)) then
-       if (associated(structure_out%value)) then
-         if (size(structure_in%value) &
-          /= size(structure_out%value)) &
-          deallocate(structure_out%value)
-       end if
-       if (.not. associated(structure_out%value)) then
-         allocate(structure_out%value(size(structure_in%value, 1), &
-          size(structure_in%value, 2), &
-          size(structure_in%value, 3), &
-          size(structure_in%value, 4)))
-       end if
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied fp_ff%value'
-     end if
- 
-   end subroutine copy_type_fp_ff
- 
-   subroutine copy_type_fp_particle_src(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_particle_src), intent(in) :: structure_in
-     type (type_fp_particle_src), intent(inout) :: structure_out
- 
-     call copy_type_fp_src_snk_tot(structure_in%total, structure_out%total)
- 
-     call copy_type_fp_src_snk_vol(structure_in%volume_intgr, structure_out%volume_intgr)
- 
-     call copy_type_fp_src_snk_surf(structure_in%flux_surf_av, structure_out%flux_surf_av)
- 
-   end subroutine copy_type_fp_particle_src
- 
-   subroutine copy_type_fp_wave_src(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_wave_src), intent(in) :: structure_in
-     type (type_fp_wave_src), intent(inout) :: structure_out
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied fp_wave_src%type'
-     end if
- 
-     if (associated(structure_in%wave_power)) then
-       if (associated(structure_out%wave_power)) then
-         if (size(structure_in%wave_power) &
-          /= size(structure_out%wave_power)) &
-          deallocate(structure_out%wave_power)
-       end if
-       if (.not. associated(structure_out%wave_power)) then
-         allocate(structure_out%wave_power(size(structure_in%wave_power, 1)))
-       end if
-       structure_out%wave_power = structure_in%wave_power
-       if (verbose > 0) write(iu6, *) 'copied fp_wave_src%wave_power'
-     end if
- 
-     if (associated(structure_in%wave_powerd)) then
-       if (associated(structure_out%wave_powerd)) then
-         if (size(structure_in%wave_powerd) &
-          /= size(structure_out%wave_powerd)) &
-          deallocate(structure_out%wave_powerd)
-       end if
-       if (.not. associated(structure_out%wave_powerd)) then
-         allocate(structure_out%wave_powerd(size(structure_in%wave_powerd, 1), &
-          size(structure_in%wave_powerd, 2)))
-       end if
-       structure_out%wave_powerd = structure_in%wave_powerd
-       if (verbose > 0) write(iu6, *) 'copied fp_wave_src%wave_powerd'
-     end if
- 
-   end subroutine copy_type_fp_wave_src
- 
-   subroutine copy_type_fp_input_src(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_input_src), intent(in) :: structure_in
-     type (type_fp_input_src), intent(inout) :: structure_out
- 
-     call copy_type_fp_particle_src(structure_in%particle_src, structure_out%particle_src)
- 
-     call copy_type_fp_wave_src(structure_in%wave_src, structure_out%wave_src)
- 
-   end subroutine copy_type_fp_input_src
- 
-   subroutine copy_type_fp_prof_vol_dist_losses(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_vol_dist_losses), intent(in) :: structure_in
-     type (type_fp_prof_vol_dist_losses), intent(inout) :: structure_out
- 
-     call copy_type_fp_src_snk_vol(structure_in%orb_loss, structure_out%orb_loss)
- 
-     call copy_type_fp_src_snk_vol(structure_in%neutr_loss, structure_out%neutr_loss)
- 
-   end subroutine copy_type_fp_prof_vol_dist_losses
- 
-   subroutine copy_type_fp_prof_surf_dist_losses(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_surf_dist_losses), intent(in) :: structure_in
-     type (type_fp_prof_surf_dist_losses), intent(inout) :: structure_out
- 
-     call copy_type_fp_src_snk_surf(structure_in%orb_loss, structure_out%orb_loss)
- 
-     call copy_type_fp_src_snk_surf(structure_in%neutr_loss, structure_out%neutr_loss)
- 
-   end subroutine copy_type_fp_prof_surf_dist_losses
- 
-   subroutine copy_type_fp_prof_surf_nucl_reac_th(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_surf_nucl_reac_th), intent(in) :: structure_in
-     type (type_fp_prof_surf_nucl_reac_th), intent(inout) :: structure_out
- 
-     if (associated(structure_in%rated)) then
-       if (associated(structure_out%rated)) then
-         if (size(structure_in%rated) &
-          /= size(structure_out%rated)) &
-          deallocate(structure_out%rated)
-       end if
-       if (.not. associated(structure_out%rated)) then
-         allocate(structure_out%rated(size(structure_in%rated, 1), &
-          size(structure_in%rated, 2), &
-          size(structure_in%rated, 3)))
-       end if
-       structure_out%rated = structure_in%rated
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_nucl_reac_th%rated'
-     end if
- 
-     if (associated(structure_in%powerd)) then
-       if (associated(structure_out%powerd)) then
-         if (size(structure_in%powerd) &
-          /= size(structure_out%powerd)) &
-          deallocate(structure_out%powerd)
-       end if
-       if (.not. associated(structure_out%powerd)) then
-         allocate(structure_out%powerd(size(structure_in%powerd, 1), &
-          size(structure_in%powerd, 2), &
-          size(structure_in%powerd, 3)))
-       end if
-       structure_out%powerd = structure_in%powerd
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_nucl_reac_th%powerd'
-     end if
- 
-   end subroutine copy_type_fp_prof_surf_nucl_reac_th
- 
-   subroutine copy_type_fp_prof_surf_nucl_reac_sf(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_surf_nucl_reac_sf), intent(in) :: structure_in
-     type (type_fp_prof_surf_nucl_reac_sf), intent(inout) :: structure_out
- 
-     if (associated(structure_in%rate)) then
-       if (associated(structure_out%rate)) then
-         if (size(structure_in%rate) &
-          /= size(structure_out%rate)) &
-          deallocate(structure_out%rate)
-       end if
-       if (.not. associated(structure_out%rate)) then
-         allocate(structure_out%rate(size(structure_in%rate, 1), &
-          size(structure_in%rate, 2)))
-       end if
-       structure_out%rate = structure_in%rate
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_nucl_reac_sf%rate'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1), &
-          size(structure_in%power, 2)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_nucl_reac_sf%power'
-     end if
- 
-   end subroutine copy_type_fp_prof_surf_nucl_reac_sf
- 
-   subroutine copy_type_fp_prof_surf_energies(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_surf_energies), intent(in) :: structure_in
-     type (type_fp_prof_surf_energies), intent(inout) :: structure_out
- 
-     if (associated(structure_in%total)) then
-       if (associated(structure_out%total)) then
-         if (size(structure_in%total) &
-          /= size(structure_out%total)) &
-          deallocate(structure_out%total)
-       end if
-       if (.not. associated(structure_out%total)) then
-         allocate(structure_out%total(size(structure_in%total, 1), &
-          size(structure_in%total, 2)))
-       end if
-       structure_out%total = structure_in%total
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_energies%total'
-     end if
- 
-     if (associated(structure_in%perp)) then
-       if (associated(structure_out%perp)) then
-         if (size(structure_in%perp) &
-          /= size(structure_out%perp)) &
-          deallocate(structure_out%perp)
-       end if
-       if (.not. associated(structure_out%perp)) then
-         allocate(structure_out%perp(size(structure_in%perp, 1), &
-          size(structure_in%perp, 2)))
-       end if
-       structure_out%perp = structure_in%perp
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_energies%perp'
-     end if
- 
-     if (associated(structure_in%parallel)) then
-       if (associated(structure_out%parallel)) then
-         if (size(structure_in%parallel) &
-          /= size(structure_out%parallel)) &
-          deallocate(structure_out%parallel)
-       end if
-       if (.not. associated(structure_out%parallel)) then
-         allocate(structure_out%parallel(size(structure_in%parallel, 1), &
-          size(structure_in%parallel, 2)))
-       end if
-       structure_out%parallel = structure_in%parallel
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_energies%parallel'
-     end if
- 
-   end subroutine copy_type_fp_prof_surf_energies
- 
-   subroutine copy_type_fp_nucl_reac_sf(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_nucl_reac_sf), intent(in) :: structure_in
-     type (type_fp_nucl_reac_sf), intent(inout) :: structure_out
- 
-     if (associated(structure_in%rate)) then
-       if (associated(structure_out%rate)) then
-         if (size(structure_in%rate) &
-          /= size(structure_out%rate)) &
-          deallocate(structure_out%rate)
-       end if
-       if (.not. associated(structure_out%rate)) then
-         allocate(structure_out%rate(size(structure_in%rate, 1)))
-       end if
-       structure_out%rate = structure_in%rate
-       if (verbose > 0) write(iu6, *) 'copied fp_nucl_reac_sf%rate'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied fp_nucl_reac_sf%power'
-     end if
- 
-   end subroutine copy_type_fp_nucl_reac_sf
- 
-   subroutine copy_type_fp_prof_surf_dist(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_surf_dist), intent(in) :: structure_in
-     type (type_fp_prof_surf_dist), intent(inout) :: structure_out
- 
-     call copy_type_fp_prof_surf_energies(structure_in%energiesd, structure_out%energiesd)
- 
-     call copy_type_fp_prof_surf_dist_losses(structure_in%lossesd, structure_out%lossesd)
- 
-     call copy_type_fp_src_snk_surf(structure_in%therm_src, structure_out%therm_src)
- 
-     if (associated(structure_in%driven_currd)) then
-       if (associated(structure_out%driven_currd)) then
-         if (size(structure_in%driven_currd) &
-          /= size(structure_out%driven_currd)) &
-          deallocate(structure_out%driven_currd)
-       end if
-       if (.not. associated(structure_out%driven_currd)) then
-         allocate(structure_out%driven_currd(size(structure_in%driven_currd, 1), &
-          size(structure_in%driven_currd, 2)))
-       end if
-       structure_out%driven_currd = structure_in%driven_currd
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_dist%driven_currd'
-     end if
- 
-     if (associated(structure_in%trqd_jrxb)) then
-       if (associated(structure_out%trqd_jrxb)) then
-         if (size(structure_in%trqd_jrxb) &
-          /= size(structure_out%trqd_jrxb)) &
-          deallocate(structure_out%trqd_jrxb)
-       end if
-       if (.not. associated(structure_out%trqd_jrxb)) then
-         allocate(structure_out%trqd_jrxb(size(structure_in%trqd_jrxb, 1), &
-          size(structure_in%trqd_jrxb, 2)))
-       end if
-       structure_out%trqd_jrxb = structure_in%trqd_jrxb
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_dist%trqd_jrxb'
-     end if
- 
-     call copy_type_fp_prof_surf_nucl_reac_th(structure_in%nucl_reac_th, structure_out%nucl_reac_th)
- 
-     call copy_type_fp_prof_surf_nucl_reac_sf(structure_in%nucl_reac_sf, structure_out%nucl_reac_sf)
- 
-   end subroutine copy_type_fp_prof_surf_dist
- 
-   subroutine copy_type_fp_prof_vol_nucl_reac_sf(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_vol_nucl_reac_sf), intent(in) :: structure_in
-     type (type_fp_prof_vol_nucl_reac_sf), intent(inout) :: structure_out
- 
-     if (associated(structure_in%rate)) then
-       if (associated(structure_out%rate)) then
-         if (size(structure_in%rate) &
-          /= size(structure_out%rate)) &
-          deallocate(structure_out%rate)
-       end if
-       if (.not. associated(structure_out%rate)) then
-         allocate(structure_out%rate(size(structure_in%rate, 1), &
-          size(structure_in%rate, 2)))
-       end if
-       structure_out%rate = structure_in%rate
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_nucl_reac_sf%rate'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1), &
-          size(structure_in%power, 2)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_nucl_reac_sf%power'
-     end if
- 
-   end subroutine copy_type_fp_prof_vol_nucl_reac_sf
- 
-   subroutine copy_type_fp_prof_vol_nucl_reac_th(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_vol_nucl_reac_th), intent(in) :: structure_in
-     type (type_fp_prof_vol_nucl_reac_th), intent(inout) :: structure_out
- 
-     if (associated(structure_in%rate)) then
-       if (associated(structure_out%rate)) then
-         if (size(structure_in%rate) &
-          /= size(structure_out%rate)) &
-          deallocate(structure_out%rate)
-       end if
-       if (.not. associated(structure_out%rate)) then
-         allocate(structure_out%rate(size(structure_in%rate, 1), &
-          size(structure_in%rate, 2), &
-          size(structure_in%rate, 3)))
-       end if
-       structure_out%rate = structure_in%rate
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_nucl_reac_th%rate'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1), &
-          size(structure_in%power, 2), &
-          size(structure_in%power, 3)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_nucl_reac_th%power'
-     end if
- 
-   end subroutine copy_type_fp_prof_vol_nucl_reac_th
- 
-   subroutine copy_type_fp_nucl_reac_th(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_nucl_reac_th), intent(in) :: structure_in
-     type (type_fp_nucl_reac_th), intent(inout) :: structure_out
- 
-     if (associated(structure_in%rate)) then
-       if (associated(structure_out%rate)) then
-         if (size(structure_in%rate) &
-          /= size(structure_out%rate)) &
-          deallocate(structure_out%rate)
-       end if
-       if (.not. associated(structure_out%rate)) then
-         allocate(structure_out%rate(size(structure_in%rate, 1), &
-          size(structure_in%rate, 2)))
-       end if
-       structure_out%rate = structure_in%rate
-       if (verbose > 0) write(iu6, *) 'copied fp_nucl_reac_th%rate'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1), &
-          size(structure_in%power, 2)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied fp_nucl_reac_th%power'
-     end if
- 
-   end subroutine copy_type_fp_nucl_reac_th
- 
-   subroutine copy_type_fp_glob_dist_losses(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_glob_dist_losses), intent(in) :: structure_in
-     type (type_fp_glob_dist_losses), intent(inout) :: structure_out
- 
-     call copy_type_fp_src_snk_tot(structure_in%orb_loss, structure_out%orb_loss)
- 
-     call copy_type_fp_src_snk_tot(structure_in%neutr_loss, structure_out%neutr_loss)
- 
-   end subroutine copy_type_fp_glob_dist_losses
- 
-   subroutine copy_type_fp_glob_dist_energies(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_glob_dist_energies), intent(in) :: structure_in
-     type (type_fp_glob_dist_energies), intent(inout) :: structure_out
- 
-     if (associated(structure_in%total)) then
-       if (associated(structure_out%total)) then
-         if (size(structure_in%total) &
-          /= size(structure_out%total)) &
-          deallocate(structure_out%total)
-       end if
-       if (.not. associated(structure_out%total)) then
-         allocate(structure_out%total(size(structure_in%total, 1)))
-       end if
-       structure_out%total = structure_in%total
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_dist_energies%total'
-     end if
- 
-     if (associated(structure_in%perp)) then
-       if (associated(structure_out%perp)) then
-         if (size(structure_in%perp) &
-          /= size(structure_out%perp)) &
-          deallocate(structure_out%perp)
-       end if
-       if (.not. associated(structure_out%perp)) then
-         allocate(structure_out%perp(size(structure_in%perp, 1)))
-       end if
-       structure_out%perp = structure_in%perp
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_dist_energies%perp'
-     end if
- 
-     if (associated(structure_in%parallel)) then
-       if (associated(structure_out%parallel)) then
-         if (size(structure_in%parallel) &
-          /= size(structure_out%parallel)) &
-          deallocate(structure_out%parallel)
-       end if
-       if (.not. associated(structure_out%parallel)) then
-         allocate(structure_out%parallel(size(structure_in%parallel, 1)))
-       end if
-       structure_out%parallel = structure_in%parallel
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_dist_energies%parallel'
-     end if
- 
-   end subroutine copy_type_fp_glob_dist_energies
- 
-   subroutine copy_type_fp_glob_dist(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_glob_dist), intent(in) :: structure_in
-     type (type_fp_glob_dist), intent(inout) :: structure_out
- 
-     call copy_type_fp_glob_dist_energies(structure_in%energies, structure_out%energies)
- 
-     call copy_type_fp_glob_dist_losses(structure_in%losses, structure_out%losses)
- 
-     call copy_type_fp_src_snk_tot(structure_in%therm_src, structure_out%therm_src)
- 
-     if (associated(structure_in%driven_cur)) then
-       if (associated(structure_out%driven_cur)) then
-         if (size(structure_in%driven_cur) &
-          /= size(structure_out%driven_cur)) &
-          deallocate(structure_out%driven_cur)
-       end if
-       if (.not. associated(structure_out%driven_cur)) then
-         allocate(structure_out%driven_cur(size(structure_in%driven_cur, 1)))
-       end if
-       structure_out%driven_cur = structure_in%driven_cur
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_dist%driven_cur'
-     end if
- 
-     if (associated(structure_in%trq_j_rxb)) then
-       if (associated(structure_out%trq_j_rxb)) then
-         if (size(structure_in%trq_j_rxb) &
-          /= size(structure_out%trq_j_rxb)) &
-          deallocate(structure_out%trq_j_rxb)
-       end if
-       if (.not. associated(structure_out%trq_j_rxb)) then
-         allocate(structure_out%trq_j_rxb(size(structure_in%trq_j_rxb, 1)))
-       end if
-       structure_out%trq_j_rxb = structure_in%trq_j_rxb
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_dist%trq_j_rxb'
-     end if
- 
-     call copy_type_fp_nucl_reac_th(structure_in%nucl_reac_th, structure_out%nucl_reac_th)
- 
-     call copy_type_fp_nucl_reac_sf(structure_in%nucl_reac_sf, structure_out%nucl_reac_sf)
- 
-   end subroutine copy_type_fp_glob_dist
- 
-   subroutine copy_type_fp_glob_coll(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_glob_coll), intent(in) :: structure_in
-     type (type_fp_glob_coll), intent(inout) :: structure_out
- 
-     if (associated(structure_in%power_i)) then
-       if (associated(structure_out%power_i)) then
-         if (size(structure_in%power_i) &
-          /= size(structure_out%power_i)) &
-          deallocate(structure_out%power_i)
-       end if
-       if (.not. associated(structure_out%power_i)) then
-         allocate(structure_out%power_i(size(structure_in%power_i, 1), &
-          size(structure_in%power_i, 2)))
-       end if
-       structure_out%power_i = structure_in%power_i
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_coll%power_i'
-     end if
- 
-     if (associated(structure_in%power_e)) then
-       if (associated(structure_out%power_e)) then
-         if (size(structure_in%power_e) &
-          /= size(structure_out%power_e)) &
-          deallocate(structure_out%power_e)
-       end if
-       if (.not. associated(structure_out%power_e)) then
-         allocate(structure_out%power_e(size(structure_in%power_e, 1)))
-       end if
-       structure_out%power_e = structure_in%power_e
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_coll%power_e'
-     end if
- 
-     if (associated(structure_in%trq_i)) then
-       if (associated(structure_out%trq_i)) then
-         if (size(structure_in%trq_i) &
-          /= size(structure_out%trq_i)) &
-          deallocate(structure_out%trq_i)
-       end if
-       if (.not. associated(structure_out%trq_i)) then
-         allocate(structure_out%trq_i(size(structure_in%trq_i, 1), &
-          size(structure_in%trq_i, 2)))
-       end if
-       structure_out%trq_i = structure_in%trq_i
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_coll%trq_i'
-     end if
- 
-     if (associated(structure_in%trq_e)) then
-       if (associated(structure_out%trq_e)) then
-         if (size(structure_in%trq_e) &
-          /= size(structure_out%trq_e)) &
-          deallocate(structure_out%trq_e)
-       end if
-       if (.not. associated(structure_out%trq_e)) then
-         allocate(structure_out%trq_e(size(structure_in%trq_e, 1)))
-       end if
-       structure_out%trq_e = structure_in%trq_e
-       if (verbose > 0) write(iu6, *) 'copied fp_glob_coll%trq_e'
-     end if
- 
-   end subroutine copy_type_fp_glob_coll
- 
-   subroutine copy_type_fp_prof_vol_coll(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_vol_coll), intent(in) :: structure_in
-     type (type_fp_prof_vol_coll), intent(inout) :: structure_out
- 
-     if (associated(structure_in%power_i)) then
-       if (associated(structure_out%power_i)) then
-         if (size(structure_in%power_i) &
-          /= size(structure_out%power_i)) &
-          deallocate(structure_out%power_i)
-       end if
-       if (.not. associated(structure_out%power_i)) then
-         allocate(structure_out%power_i(size(structure_in%power_i, 1), &
-          size(structure_in%power_i, 2), &
-          size(structure_in%power_i, 3)))
-       end if
-       structure_out%power_i = structure_in%power_i
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_coll%power_i'
-     end if
- 
-     if (associated(structure_in%power_e)) then
-       if (associated(structure_out%power_e)) then
-         if (size(structure_in%power_e) &
-          /= size(structure_out%power_e)) &
-          deallocate(structure_out%power_e)
-       end if
-       if (.not. associated(structure_out%power_e)) then
-         allocate(structure_out%power_e(size(structure_in%power_e, 1), &
-          size(structure_in%power_e, 2)))
-       end if
-       structure_out%power_e = structure_in%power_e
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_coll%power_e'
-     end if
- 
-     if (associated(structure_in%trq_i)) then
-       if (associated(structure_out%trq_i)) then
-         if (size(structure_in%trq_i) &
-          /= size(structure_out%trq_i)) &
-          deallocate(structure_out%trq_i)
-       end if
-       if (.not. associated(structure_out%trq_i)) then
-         allocate(structure_out%trq_i(size(structure_in%trq_i, 1), &
-          size(structure_in%trq_i, 2), &
-          size(structure_in%trq_i, 3)))
-       end if
-       structure_out%trq_i = structure_in%trq_i
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_coll%trq_i'
-     end if
- 
-     if (associated(structure_in%trq_e)) then
-       if (associated(structure_out%trq_e)) then
-         if (size(structure_in%trq_e) &
-          /= size(structure_out%trq_e)) &
-          deallocate(structure_out%trq_e)
-       end if
-       if (.not. associated(structure_out%trq_e)) then
-         allocate(structure_out%trq_e(size(structure_in%trq_e, 1), &
-          size(structure_in%trq_e, 2)))
-       end if
-       structure_out%trq_e = structure_in%trq_e
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_coll%trq_e'
-     end if
- 
-   end subroutine copy_type_fp_prof_vol_coll
- 
-   subroutine copy_type_fp_prof_surf_coll(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_surf_coll), intent(in) :: structure_in
-     type (type_fp_prof_surf_coll), intent(inout) :: structure_out
- 
-     if (associated(structure_in%powerd_i)) then
-       if (associated(structure_out%powerd_i)) then
-         if (size(structure_in%powerd_i) &
-          /= size(structure_out%powerd_i)) &
-          deallocate(structure_out%powerd_i)
-       end if
-       if (.not. associated(structure_out%powerd_i)) then
-         allocate(structure_out%powerd_i(size(structure_in%powerd_i, 1), &
-          size(structure_in%powerd_i, 2), &
-          size(structure_in%powerd_i, 3)))
-       end if
-       structure_out%powerd_i = structure_in%powerd_i
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_coll%powerd_i'
-     end if
- 
-     if (associated(structure_in%powerd_e)) then
-       if (associated(structure_out%powerd_e)) then
-         if (size(structure_in%powerd_e) &
-          /= size(structure_out%powerd_e)) &
-          deallocate(structure_out%powerd_e)
-       end if
-       if (.not. associated(structure_out%powerd_e)) then
-         allocate(structure_out%powerd_e(size(structure_in%powerd_e, 1), &
-          size(structure_in%powerd_e, 2)))
-       end if
-       structure_out%powerd_e = structure_in%powerd_e
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_coll%powerd_e'
-     end if
- 
-     if (associated(structure_in%trqd_i)) then
-       if (associated(structure_out%trqd_i)) then
-         if (size(structure_in%trqd_i) &
-          /= size(structure_out%trqd_i)) &
-          deallocate(structure_out%trqd_i)
-       end if
-       if (.not. associated(structure_out%trqd_i)) then
-         allocate(structure_out%trqd_i(size(structure_in%trqd_i, 1), &
-          size(structure_in%trqd_i, 2), &
-          size(structure_in%trqd_i, 3)))
-       end if
-       structure_out%trqd_i = structure_in%trqd_i
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_coll%trqd_i'
-     end if
- 
-     if (associated(structure_in%trqd_e)) then
-       if (associated(structure_out%trqd_e)) then
-         if (size(structure_in%trqd_e) &
-          /= size(structure_out%trqd_e)) &
-          deallocate(structure_out%trqd_e)
-       end if
-       if (.not. associated(structure_out%trqd_e)) then
-         allocate(structure_out%trqd_e(size(structure_in%trqd_e, 1), &
-          size(structure_in%trqd_e, 2)))
-       end if
-       structure_out%trqd_e = structure_in%trqd_e
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_surf_coll%trqd_e'
-     end if
- 
-   end subroutine copy_type_fp_prof_surf_coll
- 
-   subroutine copy_type_fp_prof_vol_dist_energies(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_vol_dist_energies), intent(in) :: structure_in
-     type (type_fp_prof_vol_dist_energies), intent(inout) :: structure_out
- 
-     if (associated(structure_in%total)) then
-       if (associated(structure_out%total)) then
-         if (size(structure_in%total) &
-          /= size(structure_out%total)) &
-          deallocate(structure_out%total)
-       end if
-       if (.not. associated(structure_out%total)) then
-         allocate(structure_out%total(size(structure_in%total, 1), &
-          size(structure_in%total, 2)))
-       end if
-       structure_out%total = structure_in%total
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_dist_energies%total'
-     end if
- 
-     if (associated(structure_in%perp)) then
-       if (associated(structure_out%perp)) then
-         if (size(structure_in%perp) &
-          /= size(structure_out%perp)) &
-          deallocate(structure_out%perp)
-       end if
-       if (.not. associated(structure_out%perp)) then
-         allocate(structure_out%perp(size(structure_in%perp, 1), &
-          size(structure_in%perp, 2)))
-       end if
-       structure_out%perp = structure_in%perp
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_dist_energies%perp'
-     end if
- 
-     if (associated(structure_in%parallel)) then
-       if (associated(structure_out%parallel)) then
-         if (size(structure_in%parallel) &
-          /= size(structure_out%parallel)) &
-          deallocate(structure_out%parallel)
-       end if
-       if (.not. associated(structure_out%parallel)) then
-         allocate(structure_out%parallel(size(structure_in%parallel, 1), &
-          size(structure_in%parallel, 2)))
-       end if
-       structure_out%parallel = structure_in%parallel
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_dist_energies%parallel'
-     end if
- 
-   end subroutine copy_type_fp_prof_vol_dist_energies
- 
-   subroutine copy_type_fp_prof_vol_dist(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_vol_dist), intent(in) :: structure_in
-     type (type_fp_prof_vol_dist), intent(inout) :: structure_out
- 
-     call copy_type_fp_prof_vol_dist_energies(structure_in%energies, structure_out%energies)
- 
-     call copy_type_fp_prof_vol_dist_losses(structure_in%losses, structure_out%losses)
- 
-     call copy_type_fp_src_snk_vol(structure_in%therm_src, structure_out%therm_src)
- 
-     if (associated(structure_in%driven_cur)) then
-       if (associated(structure_out%driven_cur)) then
-         if (size(structure_in%driven_cur) &
-          /= size(structure_out%driven_cur)) &
-          deallocate(structure_out%driven_cur)
-       end if
-       if (.not. associated(structure_out%driven_cur)) then
-         allocate(structure_out%driven_cur(size(structure_in%driven_cur, 1), &
-          size(structure_in%driven_cur, 2)))
-       end if
-       structure_out%driven_cur = structure_in%driven_cur
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_dist%driven_cur'
-     end if
- 
-     if (associated(structure_in%trq_j_rxb)) then
-       if (associated(structure_out%trq_j_rxb)) then
-         if (size(structure_in%trq_j_rxb) &
-          /= size(structure_out%trq_j_rxb)) &
-          deallocate(structure_out%trq_j_rxb)
-       end if
-       if (.not. associated(structure_out%trq_j_rxb)) then
-         allocate(structure_out%trq_j_rxb(size(structure_in%trq_j_rxb, 1), &
-          size(structure_in%trq_j_rxb, 2)))
-       end if
-       structure_out%trq_j_rxb = structure_in%trq_j_rxb
-       if (verbose > 0) write(iu6, *) 'copied fp_prof_vol_dist%trq_j_rxb'
-     end if
- 
-     call copy_type_fp_prof_vol_nucl_reac_th(structure_in%nucl_reac_th, structure_out%nucl_reac_th)
- 
-     call copy_type_fp_prof_vol_nucl_reac_sf(structure_in%nucl_reac_sf, structure_out%nucl_reac_sf)
- 
-   end subroutine copy_type_fp_prof_vol_dist
- 
-   subroutine copy_type_fp_dist_func(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_dist_func), intent(in) :: structure_in
-     type (type_fp_dist_func), intent(inout) :: structure_out
- 
-     if (associated(structure_in%sol_type)) then
-       if (associated(structure_out%sol_type)) then
-         if (size(structure_in%sol_type) &
-          /= size(structure_out%sol_type)) &
-          deallocate(structure_out%sol_type)
-       end if
-       if (.not. associated(structure_out%sol_type)) then
-         allocate(structure_out%sol_type(size(structure_in%sol_type, 1)))
-       end if
-       structure_out%sol_type = structure_in%sol_type
-       if (verbose > 0) write(iu6, *) 'copied fp_dist_func%sol_type'
-     end if
- 
-     call copy_type_fp_test_part(structure_in%test_part, structure_out%test_part)
- 
-     call copy_type_fp_ff(structure_in%f0, structure_out%f0)
- 
-     call copy_type_fp_ff(structure_in%fullf, structure_out%fullf)
- 
-   end subroutine copy_type_fp_dist_func
- 
-   subroutine copy_type_fp_glob(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_glob), intent(in) :: structure_in
-     type (type_fp_glob), intent(inout) :: structure_out
- 
-     call copy_type_fp_glob_dist(structure_in%dist_spec, structure_out%dist_spec)
- 
-     call copy_type_fp_glob_coll(structure_in%collision_bg, structure_out%collision_bg)
- 
-   end subroutine copy_type_fp_glob
- 
-   subroutine copy_type_fp_nucl_reac(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_nucl_reac), intent(in) :: structure_in
-     type (type_fp_nucl_reac), intent(inout) :: structure_out
- 
-     if (associated(structure_in%nreacs)) then
-       if (associated(structure_out%nreacs)) then
-         if (size(structure_in%nreacs) &
-          /= size(structure_out%nreacs)) &
-          deallocate(structure_out%nreacs)
-       end if
-       if (.not. associated(structure_out%nreacs)) then
-         allocate(structure_out%nreacs(size(structure_in%nreacs, 1)))
-       end if
-       structure_out%nreacs = structure_in%nreacs
-       if (verbose > 0) write(iu6, *) 'copied fp_nucl_reac%nreacs'
-     end if
- 
-     if (associated(structure_in%point_reac)) then
-       if (associated(structure_out%point_reac)) then
-         if (size(structure_in%point_reac) &
-          /= size(structure_out%point_reac)) &
-          deallocate(structure_out%point_reac)
-       end if
-       if (.not. associated(structure_out%point_reac)) then
-         allocate(structure_out%point_reac(size(structure_in%point_reac, 1), &
-          size(structure_in%point_reac, 2)))
-       end if
-       structure_out%point_reac = structure_in%point_reac
-       if (verbose > 0) write(iu6, *) 'copied fp_nucl_reac%point_reac'
-     end if
- 
-     if (associated(structure_in%id_reac)) then
-       if (associated(structure_out%id_reac)) then
-         if (size(structure_in%id_reac) &
-          /= size(structure_out%id_reac)) &
-          deallocate(structure_out%id_reac)
-       end if
-       if (.not. associated(structure_out%id_reac)) then
-         allocate(structure_out%id_reac(size(structure_in%id_reac, 1), &
-          size(structure_in%id_reac, 2)))
-       end if
-       structure_out%id_reac = structure_in%id_reac
-       if (verbose > 0) write(iu6, *) 'copied fp_nucl_reac%id_reac'
-     end if
- 
-   end subroutine copy_type_fp_nucl_reac
- 
-   subroutine copy_type_fp_prof_vol(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_vol), intent(in) :: structure_in
-     type (type_fp_prof_vol), intent(inout) :: structure_out
- 
-     call copy_type_fp_prof_vol_dist(structure_in%dist_spec, structure_out%dist_spec)
- 
-     call copy_type_fp_prof_vol_coll(structure_in%collision_bg, structure_out%collision_bg)
- 
-   end subroutine copy_type_fp_prof_vol
- 
-   subroutine copy_type_fp_prof_surf(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_prof_surf), intent(in) :: structure_in
-     type (type_fp_prof_surf), intent(inout) :: structure_out
- 
-     call copy_type_fp_prof_surf_dist(structure_in%dist_spec, structure_out%dist_spec)
- 
-     call copy_type_fp_prof_surf_coll(structure_in%collision_bg, structure_out%collision_bg)
- 
-   end subroutine copy_type_fp_prof_surf
- 
-   subroutine copy_type_fp_profiles(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp_profiles), intent(in) :: structure_in
-     type (type_fp_profiles), intent(inout) :: structure_out
- 
-     if (associated(structure_in%psin)) then
-       if (associated(structure_out%psin)) then
-         if (size(structure_in%psin) &
-          /= size(structure_out%psin)) &
-          deallocate(structure_out%psin)
-       end if
-       if (.not. associated(structure_out%psin)) then
-         allocate(structure_out%psin(size(structure_in%psin, 1)))
-       end if
-       structure_out%psin = structure_in%psin
-       if (verbose > 0) write(iu6, *) 'copied fp_profiles%psin'
-     end if
- 
-     call copy_type_fp_prof_vol(structure_in%volume_intgr, structure_out%volume_intgr)
- 
-     call copy_type_fp_prof_surf(structure_in%flux_surf_av, structure_out%flux_surf_av)
- 
-   end subroutine copy_type_fp_profiles
- 
-   subroutine copy_type_dist_func(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_dist_func), intent(in) :: structure_in
-     type (type_dist_func), intent(inout) :: structure_out
- 
-     if (associated(structure_in%sol_type)) then
-       if (associated(structure_out%sol_type)) then
-         if (size(structure_in%sol_type) &
-          /= size(structure_out%sol_type)) &
-          deallocate(structure_out%sol_type)
-       end if
-       if (.not. associated(structure_out%sol_type)) then
-         allocate(structure_out%sol_type(size(structure_in%sol_type, 1)))
-       end if
-       structure_out%sol_type = structure_in%sol_type
-       if (verbose > 0) write(iu6, *) 'copied dist_func%sol_type'
-     end if
- 
-     call copy_type_fp_test_part(structure_in%test_part, structure_out%test_part)
- 
-     call copy_type_fp_ff(structure_in%f0, structure_out%f0)
- 
-     call copy_type_fp_ff(structure_in%fullf, structure_out%fullf)
- 
-   end subroutine copy_type_dist_func
- 
-   subroutine copy_type_fp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fp), intent(in) :: structure_in
-     type (type_fp), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_composition(structure_in%composition, structure_out%composition)
- 
-     if (associated(structure_in%calc_spec)) then
-       if (associated(structure_out%calc_spec)) then
-         if (size(structure_in%calc_spec) &
-          /= size(structure_out%calc_spec)) &
-          deallocate(structure_out%calc_spec)
-       end if
-       if (.not. associated(structure_out%calc_spec)) then
-         allocate(structure_out%calc_spec(size(structure_in%calc_spec, 1)))
-       end if
-       structure_out%calc_spec = structure_in%calc_spec
-       if (verbose > 0) write(iu6, *) 'copied fp%calc_spec'
-     end if
- 
-     call copy_type_fp_nucl_reac(structure_in%nucl_reac, structure_out%nucl_reac)
- 
-     call copy_type_fp_glob(structure_in%global_param, structure_out%global_param)
- 
-     call copy_type_fp_profiles(structure_in%profiles, structure_out%profiles)
- 
-     call copy_type_dist_func(structure_in%dist_func, structure_out%dist_func)
- 
-     call copy_type_fp_input_src(structure_in%input_src, structure_out%input_src)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied fp%time'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_fp
- 
-   subroutine copy_type_eqgeometry(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_eqgeometry), intent(in) :: structure_in
-     type (type_eqgeometry), intent(inout) :: structure_out
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied eqgeometry%source'
-     end if
- 
-     if (structure_in%boundarytype /= -999999999) then
-       structure_out%boundarytype = structure_in%boundarytype
-       if (verbose > 0) write(iu6, *) 'copied eqgeometry%boundarytype'
-     end if
- 
-     call copy_type_rz1D_npoints(structure_in%boundary, structure_out%boundary)
- 
-     call copy_type_rz0D(structure_in%geom_axis, structure_out%geom_axis)
- 
-     if (structure_in%a_minor /= -9.0D40) then
-       structure_out%a_minor = structure_in%a_minor
-       if (verbose > 0) write(iu6, *) 'copied eqgeometry%a_minor'
-     end if
- 
-     if (structure_in%elongation /= -9.0D40) then
-       structure_out%elongation = structure_in%elongation
-       if (verbose > 0) write(iu6, *) 'copied eqgeometry%elongation'
-     end if
- 
-     if (structure_in%tria_upper /= -9.0D40) then
-       structure_out%tria_upper = structure_in%tria_upper
-       if (verbose > 0) write(iu6, *) 'copied eqgeometry%tria_upper'
-     end if
- 
-     if (structure_in%tria_lower /= -9.0D40) then
-       structure_out%tria_lower = structure_in%tria_lower
-       if (verbose > 0) write(iu6, *) 'copied eqgeometry%tria_lower'
-     end if
- 
-     call copy_type_rz1D(structure_in%xpts, structure_out%xpts)
- 
-     call copy_type_rz0D(structure_in%left_low_st, structure_out%left_low_st)
- 
-     call copy_type_rz0D(structure_in%right_low_st, structure_out%right_low_st)
- 
-     call copy_type_rz0D(structure_in%left_up_st, structure_out%left_up_st)
- 
-     call copy_type_rz0D(structure_in%right_up_st, structure_out%right_up_st)
- 
-     call copy_type_rz0D(structure_in%active_limit, structure_out%active_limit)
- 
-   end subroutine copy_type_eqgeometry
- 
-   subroutine copy_type_mag_axis(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_mag_axis), intent(in) :: structure_in
-     type (type_mag_axis), intent(inout) :: structure_out
- 
-     call copy_type_rz0D(structure_in%position, structure_out%position)
- 
-     if (structure_in%bphi /= -9.0D40) then
-       structure_out%bphi = structure_in%bphi
-       if (verbose > 0) write(iu6, *) 'copied mag_axis%bphi'
-     end if
- 
-     if (structure_in%q /= -9.0D40) then
-       structure_out%q = structure_in%q
-       if (verbose > 0) write(iu6, *) 'copied mag_axis%q'
-     end if
- 
-   end subroutine copy_type_mag_axis
- 
-   subroutine copy_type_global_param(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_global_param), intent(in) :: structure_in
-     type (type_global_param), intent(inout) :: structure_out
- 
-     if (structure_in%beta_pol /= -9.0D40) then
-       structure_out%beta_pol = structure_in%beta_pol
-       if (verbose > 0) write(iu6, *) 'copied global_param%beta_pol'
-     end if
- 
-     if (structure_in%beta_tor /= -9.0D40) then
-       structure_out%beta_tor = structure_in%beta_tor
-       if (verbose > 0) write(iu6, *) 'copied global_param%beta_tor'
-     end if
- 
-     if (structure_in%beta_normal /= -9.0D40) then
-       structure_out%beta_normal = structure_in%beta_normal
-       if (verbose > 0) write(iu6, *) 'copied global_param%beta_normal'
-     end if
- 
-     if (structure_in%i_plasma /= -9.0D40) then
-       structure_out%i_plasma = structure_in%i_plasma
-       if (verbose > 0) write(iu6, *) 'copied global_param%i_plasma'
-     end if
- 
-     if (structure_in%li /= -9.0D40) then
-       structure_out%li = structure_in%li
-       if (verbose > 0) write(iu6, *) 'copied global_param%li'
-     end if
- 
-     if (structure_in%volume /= -9.0D40) then
-       structure_out%volume = structure_in%volume
-       if (verbose > 0) write(iu6, *) 'copied global_param%volume'
-     end if
- 
-     if (structure_in%area /= -9.0D40) then
-       structure_out%area = structure_in%area
-       if (verbose > 0) write(iu6, *) 'copied global_param%area'
-     end if
- 
-     if (structure_in%psi_ax /= -9.0D40) then
-       structure_out%psi_ax = structure_in%psi_ax
-       if (verbose > 0) write(iu6, *) 'copied global_param%psi_ax'
-     end if
- 
-     if (structure_in%psi_bound /= -9.0D40) then
-       structure_out%psi_bound = structure_in%psi_bound
-       if (verbose > 0) write(iu6, *) 'copied global_param%psi_bound'
-     end if
- 
-     call copy_type_mag_axis(structure_in%mag_axis, structure_out%mag_axis)
- 
-     if (structure_in%q_95 /= -9.0D40) then
-       structure_out%q_95 = structure_in%q_95
-       if (verbose > 0) write(iu6, *) 'copied global_param%q_95'
-     end if
- 
-     if (structure_in%q_min /= -9.0D40) then
-       structure_out%q_min = structure_in%q_min
-       if (verbose > 0) write(iu6, *) 'copied global_param%q_min'
-     end if
- 
-     call copy_type_b0r0(structure_in%toroid_field, structure_out%toroid_field)
- 
-     if (structure_in%w_mhd /= -9.0D40) then
-       structure_out%w_mhd = structure_in%w_mhd
-       if (verbose > 0) write(iu6, *) 'copied global_param%w_mhd'
-     end if
- 
-   end subroutine copy_type_global_param
- 
-   subroutine copy_type_grid(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_grid), intent(in) :: structure_in
-     type (type_grid), intent(inout) :: structure_out
- 
-     if (associated(structure_in%dim1)) then
-       if (associated(structure_out%dim1)) then
-         if (size(structure_in%dim1) &
-          /= size(structure_out%dim1)) &
-          deallocate(structure_out%dim1)
-       end if
-       if (.not. associated(structure_out%dim1)) then
-         allocate(structure_out%dim1(size(structure_in%dim1, 1)))
-       end if
-       structure_out%dim1 = structure_in%dim1
-       if (verbose > 0) write(iu6, *) 'copied grid%dim1'
-     end if
- 
-     if (associated(structure_in%dim2)) then
-       if (associated(structure_out%dim2)) then
-         if (size(structure_in%dim2) &
-          /= size(structure_out%dim2)) &
-          deallocate(structure_out%dim2)
-       end if
-       if (.not. associated(structure_out%dim2)) then
-         allocate(structure_out%dim2(size(structure_in%dim2, 1)))
-       end if
-       structure_out%dim2 = structure_in%dim2
-       if (verbose > 0) write(iu6, *) 'copied grid%dim2'
-     end if
- 
-     if (associated(structure_in%connect)) then
-       if (associated(structure_out%connect)) then
-         if (size(structure_in%connect) &
-          /= size(structure_out%connect)) &
-          deallocate(structure_out%connect)
-       end if
-       if (.not. associated(structure_out%connect)) then
-         allocate(structure_out%connect(size(structure_in%connect, 1), &
-          size(structure_in%connect, 2)))
-       end if
-       structure_out%connect = structure_in%connect
-       if (verbose > 0) write(iu6, *) 'copied grid%connect'
-     end if
- 
-   end subroutine copy_type_grid
- 
-   subroutine copy_type_profiles_2d(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_profiles_2d), intent(in) :: structure_in
-     type (type_profiles_2d), intent(inout) :: structure_out
- 
-     if (associated(structure_in%grid_type)) then
-       if (associated(structure_out%grid_type)) then
-         if (size(structure_in%grid_type) &
-          /= size(structure_out%grid_type)) &
-          deallocate(structure_out%grid_type)
-       end if
-       if (.not. associated(structure_out%grid_type)) then
-         allocate(structure_out%grid_type(size(structure_in%grid_type)))
-       end if
-       structure_out%grid_type = structure_in%grid_type
-       if (verbose > 0) write(iu6, *) 'copied profiles_2d%grid_type'
-     end if
- 
-     call copy_type_grid(structure_in%grid, structure_out%grid)
- 
-     if (associated(structure_in%psi_grid)) then
-       if (associated(structure_out%psi_grid)) then
-         if (size(structure_in%psi_grid) &
-          /= size(structure_out%psi_grid)) &
-          deallocate(structure_out%psi_grid)
-       end if
-       if (.not. associated(structure_out%psi_grid)) then
-         allocate(structure_out%psi_grid(size(structure_in%psi_grid, 1), &
-          size(structure_in%psi_grid, 2)))
-       end if
-       structure_out%psi_grid = structure_in%psi_grid
-       if (verbose > 0) write(iu6, *) 'copied profiles_2d%psi_grid'
-     end if
- 
-     if (associated(structure_in%jphi_grid)) then
-       if (associated(structure_out%jphi_grid)) then
-         if (size(structure_in%jphi_grid) &
-          /= size(structure_out%jphi_grid)) &
-          deallocate(structure_out%jphi_grid)
-       end if
-       if (.not. associated(structure_out%jphi_grid)) then
-         allocate(structure_out%jphi_grid(size(structure_in%jphi_grid, 1), &
-          size(structure_in%jphi_grid, 2)))
-       end if
-       structure_out%jphi_grid = structure_in%jphi_grid
-       if (verbose > 0) write(iu6, *) 'copied profiles_2d%jphi_grid'
-     end if
- 
-     if (associated(structure_in%jpar_grid)) then
-       if (associated(structure_out%jpar_grid)) then
-         if (size(structure_in%jpar_grid) &
-          /= size(structure_out%jpar_grid)) &
-          deallocate(structure_out%jpar_grid)
-       end if
-       if (.not. associated(structure_out%jpar_grid)) then
-         allocate(structure_out%jpar_grid(size(structure_in%jpar_grid, 1), &
-          size(structure_in%jpar_grid, 2)))
-       end if
-       structure_out%jpar_grid = structure_in%jpar_grid
-       if (verbose > 0) write(iu6, *) 'copied profiles_2d%jpar_grid'
-     end if
- 
-     if (associated(structure_in%br)) then
-       if (associated(structure_out%br)) then
-         if (size(structure_in%br) &
-          /= size(structure_out%br)) &
-          deallocate(structure_out%br)
-       end if
-       if (.not. associated(structure_out%br)) then
-         allocate(structure_out%br(size(structure_in%br, 1), &
-          size(structure_in%br, 2)))
-       end if
-       structure_out%br = structure_in%br
-       if (verbose > 0) write(iu6, *) 'copied profiles_2d%br'
-     end if
- 
-     if (associated(structure_in%bz)) then
-       if (associated(structure_out%bz)) then
-         if (size(structure_in%bz) &
-          /= size(structure_out%bz)) &
-          deallocate(structure_out%bz)
-       end if
-       if (.not. associated(structure_out%bz)) then
-         allocate(structure_out%bz(size(structure_in%bz, 1), &
-          size(structure_in%bz, 2)))
-       end if
-       structure_out%bz = structure_in%bz
-       if (verbose > 0) write(iu6, *) 'copied profiles_2d%bz'
-     end if
- 
-     if (associated(structure_in%bphi)) then
-       if (associated(structure_out%bphi)) then
-         if (size(structure_in%bphi) &
-          /= size(structure_out%bphi)) &
-          deallocate(structure_out%bphi)
-       end if
-       if (.not. associated(structure_out%bphi)) then
-         allocate(structure_out%bphi(size(structure_in%bphi, 1), &
-          size(structure_in%bphi, 2)))
-       end if
-       structure_out%bphi = structure_in%bphi
-       if (verbose > 0) write(iu6, *) 'copied profiles_2d%bphi'
-     end if
- 
-   end subroutine copy_type_profiles_2d
- 
-   subroutine copy_type_profiles_1d(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_profiles_1d), intent(in) :: structure_in
-     type (type_profiles_1d), intent(inout) :: structure_out
- 
-     if (associated(structure_in%psi)) then
-       if (associated(structure_out%psi)) then
-         if (size(structure_in%psi) &
-          /= size(structure_out%psi)) &
-          deallocate(structure_out%psi)
-       end if
-       if (.not. associated(structure_out%psi)) then
-         allocate(structure_out%psi(size(structure_in%psi, 1)))
-       end if
-       structure_out%psi = structure_in%psi
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%psi'
-     end if
- 
-     if (associated(structure_in%phi)) then
-       if (associated(structure_out%phi)) then
-         if (size(structure_in%phi) &
-          /= size(structure_out%phi)) &
-          deallocate(structure_out%phi)
-       end if
-       if (.not. associated(structure_out%phi)) then
-         allocate(structure_out%phi(size(structure_in%phi, 1)))
-       end if
-       structure_out%phi = structure_in%phi
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%phi'
-     end if
- 
-     if (associated(structure_in%pressure)) then
-       if (associated(structure_out%pressure)) then
-         if (size(structure_in%pressure) &
-          /= size(structure_out%pressure)) &
-          deallocate(structure_out%pressure)
-       end if
-       if (.not. associated(structure_out%pressure)) then
-         allocate(structure_out%pressure(size(structure_in%pressure, 1)))
-       end if
-       structure_out%pressure = structure_in%pressure
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%pressure'
-     end if
- 
-     if (associated(structure_in%F_dia)) then
-       if (associated(structure_out%F_dia)) then
-         if (size(structure_in%F_dia) &
-          /= size(structure_out%F_dia)) &
-          deallocate(structure_out%F_dia)
-       end if
-       if (.not. associated(structure_out%F_dia)) then
-         allocate(structure_out%F_dia(size(structure_in%F_dia, 1)))
-       end if
-       structure_out%F_dia = structure_in%F_dia
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%F_dia'
-     end if
- 
-     if (associated(structure_in%pprime)) then
-       if (associated(structure_out%pprime)) then
-         if (size(structure_in%pprime) &
-          /= size(structure_out%pprime)) &
-          deallocate(structure_out%pprime)
-       end if
-       if (.not. associated(structure_out%pprime)) then
-         allocate(structure_out%pprime(size(structure_in%pprime, 1)))
-       end if
-       structure_out%pprime = structure_in%pprime
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%pprime'
-     end if
- 
-     if (associated(structure_in%ffprime)) then
-       if (associated(structure_out%ffprime)) then
-         if (size(structure_in%ffprime) &
-          /= size(structure_out%ffprime)) &
-          deallocate(structure_out%ffprime)
-       end if
-       if (.not. associated(structure_out%ffprime)) then
-         allocate(structure_out%ffprime(size(structure_in%ffprime, 1)))
-       end if
-       structure_out%ffprime = structure_in%ffprime
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%ffprime'
-     end if
- 
-     if (associated(structure_in%jphi)) then
-       if (associated(structure_out%jphi)) then
-         if (size(structure_in%jphi) &
-          /= size(structure_out%jphi)) &
-          deallocate(structure_out%jphi)
-       end if
-       if (.not. associated(structure_out%jphi)) then
-         allocate(structure_out%jphi(size(structure_in%jphi, 1)))
-       end if
-       structure_out%jphi = structure_in%jphi
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%jphi'
-     end if
- 
-     if (associated(structure_in%jparallel)) then
-       if (associated(structure_out%jparallel)) then
-         if (size(structure_in%jparallel) &
-          /= size(structure_out%jparallel)) &
-          deallocate(structure_out%jparallel)
-       end if
-       if (.not. associated(structure_out%jparallel)) then
-         allocate(structure_out%jparallel(size(structure_in%jparallel, 1)))
-       end if
-       structure_out%jparallel = structure_in%jparallel
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%jparallel'
-     end if
- 
-     if (associated(structure_in%q)) then
-       if (associated(structure_out%q)) then
-         if (size(structure_in%q) &
-          /= size(structure_out%q)) &
-          deallocate(structure_out%q)
-       end if
-       if (.not. associated(structure_out%q)) then
-         allocate(structure_out%q(size(structure_in%q, 1)))
-       end if
-       structure_out%q = structure_in%q
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%q'
-     end if
- 
-     if (associated(structure_in%r_inboard)) then
-       if (associated(structure_out%r_inboard)) then
-         if (size(structure_in%r_inboard) &
-          /= size(structure_out%r_inboard)) &
-          deallocate(structure_out%r_inboard)
-       end if
-       if (.not. associated(structure_out%r_inboard)) then
-         allocate(structure_out%r_inboard(size(structure_in%r_inboard, 1)))
-       end if
-       structure_out%r_inboard = structure_in%r_inboard
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%r_inboard'
-     end if
- 
-     if (associated(structure_in%r_outboard)) then
-       if (associated(structure_out%r_outboard)) then
-         if (size(structure_in%r_outboard) &
-          /= size(structure_out%r_outboard)) &
-          deallocate(structure_out%r_outboard)
-       end if
-       if (.not. associated(structure_out%r_outboard)) then
-         allocate(structure_out%r_outboard(size(structure_in%r_outboard, 1)))
-       end if
-       structure_out%r_outboard = structure_in%r_outboard
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%r_outboard'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%rho_tor'
-     end if
- 
-     if (associated(structure_in%rho_vol)) then
-       if (associated(structure_out%rho_vol)) then
-         if (size(structure_in%rho_vol) &
-          /= size(structure_out%rho_vol)) &
-          deallocate(structure_out%rho_vol)
-       end if
-       if (.not. associated(structure_out%rho_vol)) then
-         allocate(structure_out%rho_vol(size(structure_in%rho_vol, 1)))
-       end if
-       structure_out%rho_vol = structure_in%rho_vol
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%rho_vol'
-     end if
- 
-     if (associated(structure_in%beta_pol)) then
-       if (associated(structure_out%beta_pol)) then
-         if (size(structure_in%beta_pol) &
-          /= size(structure_out%beta_pol)) &
-          deallocate(structure_out%beta_pol)
-       end if
-       if (.not. associated(structure_out%beta_pol)) then
-         allocate(structure_out%beta_pol(size(structure_in%beta_pol, 1)))
-       end if
-       structure_out%beta_pol = structure_in%beta_pol
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%beta_pol'
-     end if
- 
-     if (associated(structure_in%li)) then
-       if (associated(structure_out%li)) then
-         if (size(structure_in%li) &
-          /= size(structure_out%li)) &
-          deallocate(structure_out%li)
-       end if
-       if (.not. associated(structure_out%li)) then
-         allocate(structure_out%li(size(structure_in%li, 1)))
-       end if
-       structure_out%li = structure_in%li
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%li'
-     end if
- 
-     if (associated(structure_in%elongation)) then
-       if (associated(structure_out%elongation)) then
-         if (size(structure_in%elongation) &
-          /= size(structure_out%elongation)) &
-          deallocate(structure_out%elongation)
-       end if
-       if (.not. associated(structure_out%elongation)) then
-         allocate(structure_out%elongation(size(structure_in%elongation, 1)))
-       end if
-       structure_out%elongation = structure_in%elongation
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%elongation'
-     end if
- 
-     if (associated(structure_in%tria_upper)) then
-       if (associated(structure_out%tria_upper)) then
-         if (size(structure_in%tria_upper) &
-          /= size(structure_out%tria_upper)) &
-          deallocate(structure_out%tria_upper)
-       end if
-       if (.not. associated(structure_out%tria_upper)) then
-         allocate(structure_out%tria_upper(size(structure_in%tria_upper, 1)))
-       end if
-       structure_out%tria_upper = structure_in%tria_upper
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%tria_upper'
-     end if
- 
-     if (associated(structure_in%tria_lower)) then
-       if (associated(structure_out%tria_lower)) then
-         if (size(structure_in%tria_lower) &
-          /= size(structure_out%tria_lower)) &
-          deallocate(structure_out%tria_lower)
-       end if
-       if (.not. associated(structure_out%tria_lower)) then
-         allocate(structure_out%tria_lower(size(structure_in%tria_lower, 1)))
-       end if
-       structure_out%tria_lower = structure_in%tria_lower
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%tria_lower'
-     end if
- 
-     if (associated(structure_in%volume)) then
-       if (associated(structure_out%volume)) then
-         if (size(structure_in%volume) &
-          /= size(structure_out%volume)) &
-          deallocate(structure_out%volume)
-       end if
-       if (.not. associated(structure_out%volume)) then
-         allocate(structure_out%volume(size(structure_in%volume, 1)))
-       end if
-       structure_out%volume = structure_in%volume
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%volume'
-     end if
- 
-     if (associated(structure_in%vprime)) then
-       if (associated(structure_out%vprime)) then
-         if (size(structure_in%vprime) &
-          /= size(structure_out%vprime)) &
-          deallocate(structure_out%vprime)
-       end if
-       if (.not. associated(structure_out%vprime)) then
-         allocate(structure_out%vprime(size(structure_in%vprime, 1)))
-       end if
-       structure_out%vprime = structure_in%vprime
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%vprime'
-     end if
- 
-     if (associated(structure_in%area)) then
-       if (associated(structure_out%area)) then
-         if (size(structure_in%area) &
-          /= size(structure_out%area)) &
-          deallocate(structure_out%area)
-       end if
-       if (.not. associated(structure_out%area)) then
-         allocate(structure_out%area(size(structure_in%area, 1)))
-       end if
-       structure_out%area = structure_in%area
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%area'
-     end if
- 
-     if (associated(structure_in%aprime)) then
-       if (associated(structure_out%aprime)) then
-         if (size(structure_in%aprime) &
-          /= size(structure_out%aprime)) &
-          deallocate(structure_out%aprime)
-       end if
-       if (.not. associated(structure_out%aprime)) then
-         allocate(structure_out%aprime(size(structure_in%aprime, 1)))
-       end if
-       structure_out%aprime = structure_in%aprime
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%aprime'
-     end if
- 
-     if (associated(structure_in%surface)) then
-       if (associated(structure_out%surface)) then
-         if (size(structure_in%surface) &
-          /= size(structure_out%surface)) &
-          deallocate(structure_out%surface)
-       end if
-       if (.not. associated(structure_out%surface)) then
-         allocate(structure_out%surface(size(structure_in%surface, 1)))
-       end if
-       structure_out%surface = structure_in%surface
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%surface'
-     end if
- 
-     if (associated(structure_in%ftrap)) then
-       if (associated(structure_out%ftrap)) then
-         if (size(structure_in%ftrap) &
-          /= size(structure_out%ftrap)) &
-          deallocate(structure_out%ftrap)
-       end if
-       if (.not. associated(structure_out%ftrap)) then
-         allocate(structure_out%ftrap(size(structure_in%ftrap, 1)))
-       end if
-       structure_out%ftrap = structure_in%ftrap
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%ftrap'
-     end if
- 
-     if (associated(structure_in%gm1)) then
-       if (associated(structure_out%gm1)) then
-         if (size(structure_in%gm1) &
-          /= size(structure_out%gm1)) &
-          deallocate(structure_out%gm1)
-       end if
-       if (.not. associated(structure_out%gm1)) then
-         allocate(structure_out%gm1(size(structure_in%gm1, 1)))
-       end if
-       structure_out%gm1 = structure_in%gm1
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm1'
-     end if
- 
-     if (associated(structure_in%gm2)) then
-       if (associated(structure_out%gm2)) then
-         if (size(structure_in%gm2) &
-          /= size(structure_out%gm2)) &
-          deallocate(structure_out%gm2)
-       end if
-       if (.not. associated(structure_out%gm2)) then
-         allocate(structure_out%gm2(size(structure_in%gm2, 1)))
-       end if
-       structure_out%gm2 = structure_in%gm2
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm2'
-     end if
- 
-     if (associated(structure_in%gm3)) then
-       if (associated(structure_out%gm3)) then
-         if (size(structure_in%gm3) &
-          /= size(structure_out%gm3)) &
-          deallocate(structure_out%gm3)
-       end if
-       if (.not. associated(structure_out%gm3)) then
-         allocate(structure_out%gm3(size(structure_in%gm3, 1)))
-       end if
-       structure_out%gm3 = structure_in%gm3
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm3'
-     end if
- 
-     if (associated(structure_in%gm4)) then
-       if (associated(structure_out%gm4)) then
-         if (size(structure_in%gm4) &
-          /= size(structure_out%gm4)) &
-          deallocate(structure_out%gm4)
-       end if
-       if (.not. associated(structure_out%gm4)) then
-         allocate(structure_out%gm4(size(structure_in%gm4, 1)))
-       end if
-       structure_out%gm4 = structure_in%gm4
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm4'
-     end if
- 
-     if (associated(structure_in%gm5)) then
-       if (associated(structure_out%gm5)) then
-         if (size(structure_in%gm5) &
-          /= size(structure_out%gm5)) &
-          deallocate(structure_out%gm5)
-       end if
-       if (.not. associated(structure_out%gm5)) then
-         allocate(structure_out%gm5(size(structure_in%gm5, 1)))
-       end if
-       structure_out%gm5 = structure_in%gm5
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm5'
-     end if
- 
-     if (associated(structure_in%gm6)) then
-       if (associated(structure_out%gm6)) then
-         if (size(structure_in%gm6) &
-          /= size(structure_out%gm6)) &
-          deallocate(structure_out%gm6)
-       end if
-       if (.not. associated(structure_out%gm6)) then
-         allocate(structure_out%gm6(size(structure_in%gm6, 1)))
-       end if
-       structure_out%gm6 = structure_in%gm6
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm6'
-     end if
- 
-     if (associated(structure_in%gm7)) then
-       if (associated(structure_out%gm7)) then
-         if (size(structure_in%gm7) &
-          /= size(structure_out%gm7)) &
-          deallocate(structure_out%gm7)
-       end if
-       if (.not. associated(structure_out%gm7)) then
-         allocate(structure_out%gm7(size(structure_in%gm7, 1)))
-       end if
-       structure_out%gm7 = structure_in%gm7
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm7'
-     end if
- 
-     if (associated(structure_in%gm8)) then
-       if (associated(structure_out%gm8)) then
-         if (size(structure_in%gm8) &
-          /= size(structure_out%gm8)) &
-          deallocate(structure_out%gm8)
-       end if
-       if (.not. associated(structure_out%gm8)) then
-         allocate(structure_out%gm8(size(structure_in%gm8, 1)))
-       end if
-       structure_out%gm8 = structure_in%gm8
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm8'
-     end if
- 
-     if (associated(structure_in%gm9)) then
-       if (associated(structure_out%gm9)) then
-         if (size(structure_in%gm9) &
-          /= size(structure_out%gm9)) &
-          deallocate(structure_out%gm9)
-       end if
-       if (.not. associated(structure_out%gm9)) then
-         allocate(structure_out%gm9(size(structure_in%gm9, 1)))
-       end if
-       structure_out%gm9 = structure_in%gm9
-       if (verbose > 0) write(iu6, *) 'copied profiles_1d%gm9'
-     end if
- 
-   end subroutine copy_type_profiles_1d
- 
-   subroutine copy_type_equilibrium(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_equilibrium), intent(in) :: structure_in
-     type (type_equilibrium), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_eqconstraint(structure_in%eqconstraint, structure_out%eqconstraint)
- 
-     call copy_type_eqgeometry(structure_in%eqgeometry, structure_out%eqgeometry)
- 
-     call copy_type_flush(structure_in%flush, structure_out%flush)
- 
-     call copy_type_global_param(structure_in%global_param, structure_out%global_param)
- 
-     call copy_type_profiles_1d(structure_in%profiles_1d, structure_out%profiles_1d)
- 
-     call copy_type_profiles_2d(structure_in%profiles_2d, structure_out%profiles_2d)
- 
-     call copy_type_coord_sys(structure_in%coord_sys, structure_out%coord_sys)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied equilibrium%time'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_equilibrium
- 
-   subroutine copy_type_permeability(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_permeability), intent(in) :: structure_in
-     type (type_permeability), intent(inout) :: structure_out
- 
-     if (associated(structure_in%b)) then
-       if (associated(structure_out%b)) then
-         if (size(structure_in%b) &
-          /= size(structure_out%b)) &
-          deallocate(structure_out%b)
-       end if
-       if (.not. associated(structure_out%b)) then
-         allocate(structure_out%b(size(structure_in%b, 1), &
-          size(structure_in%b, 2)))
-       end if
-       structure_out%b = structure_in%b
-       if (verbose > 0) write(iu6, *) 'copied permeability%b'
-     end if
- 
-     if (associated(structure_in%mur)) then
-       if (associated(structure_out%mur)) then
-         if (size(structure_in%mur) &
-          /= size(structure_out%mur)) &
-          deallocate(structure_out%mur)
-       end if
-       if (.not. associated(structure_out%mur)) then
-         allocate(structure_out%mur(size(structure_in%mur, 1), &
-          size(structure_in%mur, 2)))
-       end if
-       structure_out%mur = structure_in%mur
-       if (verbose > 0) write(iu6, *) 'copied permeability%mur'
-     end if
- 
-   end subroutine copy_type_permeability
- 
-   subroutine copy_type_geom_iron(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_geom_iron), intent(in) :: structure_in
-     type (type_geom_iron), intent(inout) :: structure_out
- 
-     if (associated(structure_in%npoints)) then
-       if (associated(structure_out%npoints)) then
-         if (size(structure_in%npoints) &
-          /= size(structure_out%npoints)) &
-          deallocate(structure_out%npoints)
-       end if
-       if (.not. associated(structure_out%npoints)) then
-         allocate(structure_out%npoints(size(structure_in%npoints, 1)))
-       end if
-       structure_out%npoints = structure_in%npoints
-       if (verbose > 0) write(iu6, *) 'copied geom_iron%npoints'
-     end if
- 
-     call copy_type_rz2D(structure_in%rzcoordinate, structure_out%rzcoordinate)
- 
-   end subroutine copy_type_geom_iron
- 
-   subroutine copy_type_desc_iron(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_desc_iron), intent(in) :: structure_in
-     type (type_desc_iron), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied desc_iron%name'
-     end if
- 
-     if (associated(structure_in%id)) then
-       if (associated(structure_out%id)) then
-         if (size(structure_in%id) &
-          /= size(structure_out%id)) &
-          deallocate(structure_out%id)
-       end if
-       if (.not. associated(structure_out%id)) then
-         allocate(structure_out%id(size(structure_in%id)))
-       end if
-       structure_out%id = structure_in%id
-       if (verbose > 0) write(iu6, *) 'copied desc_iron%id'
-     end if
- 
-     call copy_type_permeability(structure_in%permeability, structure_out%permeability)
- 
-     call copy_type_geom_iron(structure_in%geom_iron, structure_out%geom_iron)
- 
-   end subroutine copy_type_desc_iron
- 
-   subroutine copy_type_magnetise(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_magnetise), intent(in) :: structure_in
-     type (type_magnetise), intent(inout) :: structure_out
- 
-     call copy_type_exp1D(structure_in%mr, structure_out%mr)
- 
-     call copy_type_exp1D(structure_in%mz, structure_out%mz)
- 
-   end subroutine copy_type_magnetise
- 
-   subroutine copy_type_ironmodel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_ironmodel), intent(in) :: structure_in
-     type (type_ironmodel), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_desc_iron(structure_in%desc_iron, structure_out%desc_iron)
- 
-     call copy_type_magnetise(structure_in%magnetise, structure_out%magnetise)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied ironmodel%time'
-     end if
- 
-   end subroutine copy_type_ironmodel
- 
-   subroutine copy_type_spectrum(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_spectrum), intent(in) :: structure_in
-     type (type_spectrum), intent(inout) :: structure_out
- 
-     if (associated(structure_in%nn_phi)) then
-       if (associated(structure_out%nn_phi)) then
-         if (size(structure_in%nn_phi) &
-          /= size(structure_out%nn_phi)) &
-          deallocate(structure_out%nn_phi)
-       end if
-       if (.not. associated(structure_out%nn_phi)) then
-         allocate(structure_out%nn_phi(size(structure_in%nn_phi, 1)))
-       end if
-       structure_out%nn_phi = structure_in%nn_phi
-       if (verbose > 0) write(iu6, *) 'copied spectrum%nn_phi'
-     end if
- 
-     if (associated(structure_in%nn_theta)) then
-       if (associated(structure_out%nn_theta)) then
-         if (size(structure_in%nn_theta) &
-          /= size(structure_out%nn_theta)) &
-          deallocate(structure_out%nn_theta)
-       end if
-       if (.not. associated(structure_out%nn_theta)) then
-         allocate(structure_out%nn_theta(size(structure_in%nn_theta, 1)))
-       end if
-       structure_out%nn_theta = structure_in%nn_theta
-       if (verbose > 0) write(iu6, *) 'copied spectrum%nn_theta'
-     end if
- 
-     if (associated(structure_in%n_phi)) then
-       if (associated(structure_out%n_phi)) then
-         if (size(structure_in%n_phi) &
-          /= size(structure_out%n_phi)) &
-          deallocate(structure_out%n_phi)
-       end if
-       if (.not. associated(structure_out%n_phi)) then
-         allocate(structure_out%n_phi(size(structure_in%n_phi, 1), &
-          size(structure_in%n_phi, 2)))
-       end if
-       structure_out%n_phi = structure_in%n_phi
-       if (verbose > 0) write(iu6, *) 'copied spectrum%n_phi'
-     end if
- 
-     if (associated(structure_in%n_theta)) then
-       if (associated(structure_out%n_theta)) then
-         if (size(structure_in%n_theta) &
-          /= size(structure_out%n_theta)) &
-          deallocate(structure_out%n_theta)
-       end if
-       if (.not. associated(structure_out%n_theta)) then
-         allocate(structure_out%n_theta(size(structure_in%n_theta, 1), &
-          size(structure_in%n_theta, 2)))
-       end if
-       structure_out%n_theta = structure_in%n_theta
-       if (verbose > 0) write(iu6, *) 'copied spectrum%n_theta'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1), &
-          size(structure_in%power, 2), &
-          size(structure_in%power, 3)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied spectrum%power'
-     end if
- 
-   end subroutine copy_type_spectrum
- 
-   subroutine copy_type_launchs(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_launchs), intent(in) :: structure_in
-     type (type_launchs), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied launchs%name'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied launchs%type'
-     end if
- 
-     if (associated(structure_in%frequency)) then
-       if (associated(structure_out%frequency)) then
-         if (size(structure_in%frequency) &
-          /= size(structure_out%frequency)) &
-          deallocate(structure_out%frequency)
-       end if
-       if (.not. associated(structure_out%frequency)) then
-         allocate(structure_out%frequency(size(structure_in%frequency, 1)))
-       end if
-       structure_out%frequency = structure_in%frequency
-       if (verbose > 0) write(iu6, *) 'copied launchs%frequency'
-     end if
- 
-     if (associated(structure_in%mode)) then
-       if (associated(structure_out%mode)) then
-         if (size(structure_in%mode) &
-          /= size(structure_out%mode)) &
-          deallocate(structure_out%mode)
-       end if
-       if (.not. associated(structure_out%mode)) then
-         allocate(structure_out%mode(size(structure_in%mode, 1)))
-       end if
-       structure_out%mode = structure_in%mode
-       if (verbose > 0) write(iu6, *) 'copied launchs%mode'
-     end if
- 
-     call copy_type_rzphi1D(structure_in%position, structure_out%position)
- 
-     call copy_type_spectrum(structure_in%spectrum, structure_out%spectrum)
- 
-     call copy_type_rf_beam(structure_in%beam, structure_out%beam)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied launchs%time'
-     end if
- 
-   end subroutine copy_type_launchs
- 
-   subroutine copy_type_limiter(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_limiter), intent(in) :: structure_in
-     type (type_limiter), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_rz1D(structure_in%position, structure_out%position)
- 
-   end subroutine copy_type_limiter
- 
-   subroutine copy_type_setup_floops(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_setup_floops), intent(in) :: structure_in
-     type (type_setup_floops), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied setup_floops%name'
-     end if
- 
-     if (associated(structure_in%id)) then
-       if (associated(structure_out%id)) then
-         if (size(structure_in%id) &
-          /= size(structure_out%id)) &
-          deallocate(structure_out%id)
-       end if
-       if (.not. associated(structure_out%id)) then
-         allocate(structure_out%id(size(structure_in%id)))
-       end if
-       structure_out%id = structure_in%id
-       if (verbose > 0) write(iu6, *) 'copied setup_floops%id'
-     end if
- 
-     call copy_type_rzphi2D(structure_in%position, structure_out%position)
- 
-     if (associated(structure_in%npoints)) then
-       if (associated(structure_out%npoints)) then
-         if (size(structure_in%npoints) &
-          /= size(structure_out%npoints)) &
-          deallocate(structure_out%npoints)
-       end if
-       if (.not. associated(structure_out%npoints)) then
-         allocate(structure_out%npoints(size(structure_in%npoints, 1)))
-       end if
-       structure_out%npoints = structure_in%npoints
-       if (verbose > 0) write(iu6, *) 'copied setup_floops%npoints'
-     end if
- 
-   end subroutine copy_type_setup_floops
- 
-   subroutine copy_type_setup_bprobe(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_setup_bprobe), intent(in) :: structure_in
-     type (type_setup_bprobe), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied setup_bprobe%name'
-     end if
- 
-     if (associated(structure_in%id)) then
-       if (associated(structure_out%id)) then
-         if (size(structure_in%id) &
-          /= size(structure_out%id)) &
-          deallocate(structure_out%id)
-       end if
-       if (.not. associated(structure_out%id)) then
-         allocate(structure_out%id(size(structure_in%id)))
-       end if
-       structure_out%id = structure_in%id
-       if (verbose > 0) write(iu6, *) 'copied setup_bprobe%id'
-     end if
- 
-     call copy_type_rz1D(structure_in%position, structure_out%position)
- 
-     if (associated(structure_in%polangle)) then
-       if (associated(structure_out%polangle)) then
-         if (size(structure_in%polangle) &
-          /= size(structure_out%polangle)) &
-          deallocate(structure_out%polangle)
-       end if
-       if (.not. associated(structure_out%polangle)) then
-         allocate(structure_out%polangle(size(structure_in%polangle, 1)))
-       end if
-       structure_out%polangle = structure_in%polangle
-       if (verbose > 0) write(iu6, *) 'copied setup_bprobe%polangle'
-     end if
- 
-     if (associated(structure_in%torangle)) then
-       if (associated(structure_out%torangle)) then
-         if (size(structure_in%torangle) &
-          /= size(structure_out%torangle)) &
-          deallocate(structure_out%torangle)
-       end if
-       if (.not. associated(structure_out%torangle)) then
-         allocate(structure_out%torangle(size(structure_in%torangle, 1)))
-       end if
-       structure_out%torangle = structure_in%torangle
-       if (verbose > 0) write(iu6, *) 'copied setup_bprobe%torangle'
-     end if
- 
-     if (associated(structure_in%area)) then
-       if (associated(structure_out%area)) then
-         if (size(structure_in%area) &
-          /= size(structure_out%area)) &
-          deallocate(structure_out%area)
-       end if
-       if (.not. associated(structure_out%area)) then
-         allocate(structure_out%area(size(structure_in%area, 1)))
-       end if
-       structure_out%area = structure_in%area
-       if (verbose > 0) write(iu6, *) 'copied setup_bprobe%area'
-     end if
- 
-     if (associated(structure_in%length)) then
-       if (associated(structure_out%length)) then
-         if (size(structure_in%length) &
-          /= size(structure_out%length)) &
-          deallocate(structure_out%length)
-       end if
-       if (.not. associated(structure_out%length)) then
-         allocate(structure_out%length(size(structure_in%length, 1)))
-       end if
-       structure_out%length = structure_in%length
-       if (verbose > 0) write(iu6, *) 'copied setup_bprobe%length'
-     end if
- 
-     if (associated(structure_in%turns)) then
-       if (associated(structure_out%turns)) then
-         if (size(structure_in%turns) &
-          /= size(structure_out%turns)) &
-          deallocate(structure_out%turns)
-       end if
-       if (.not. associated(structure_out%turns)) then
-         allocate(structure_out%turns(size(structure_in%turns, 1)))
-       end if
-       structure_out%turns = structure_in%turns
-       if (verbose > 0) write(iu6, *) 'copied setup_bprobe%turns'
-     end if
- 
-   end subroutine copy_type_setup_bprobe
- 
-   subroutine copy_type_flux_loops(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_flux_loops), intent(in) :: structure_in
-     type (type_flux_loops), intent(inout) :: structure_out
- 
-     call copy_type_setup_floops(structure_in%setup_floops, structure_out%setup_floops)
- 
-     call copy_type_exp1D(structure_in%measure, structure_out%measure)
- 
-   end subroutine copy_type_flux_loops
- 
-   subroutine copy_type_bpol_probes(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_bpol_probes), intent(in) :: structure_in
-     type (type_bpol_probes), intent(inout) :: structure_out
- 
-     call copy_type_setup_bprobe(structure_in%setup_bprobe, structure_out%setup_bprobe)
- 
-     call copy_type_exp1D(structure_in%measure, structure_out%measure)
- 
-   end subroutine copy_type_bpol_probes
- 
-   subroutine copy_type_magdiag(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_magdiag), intent(in) :: structure_in
-     type (type_magdiag), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_exp0D(structure_in%ip, structure_out%ip)
- 
-     call copy_type_exp0D(structure_in%diamagflux, structure_out%diamagflux)
- 
-     call copy_type_flux_loops(structure_in%flux_loops, structure_out%flux_loops)
- 
-     call copy_type_bpol_probes(structure_in%bpol_probes, structure_out%bpol_probes)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied magdiag%time'
-     end if
- 
-   end subroutine copy_type_magdiag
- 
-   subroutine copy_type_setup_mse(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_setup_mse), intent(in) :: structure_in
-     type (type_setup_mse), intent(inout) :: structure_out
- 
-     call copy_type_rz1D(structure_in%rzgamma, structure_out%rzgamma)
- 
-     if (associated(structure_in%geom_coef)) then
-       if (associated(structure_out%geom_coef)) then
-         if (size(structure_in%geom_coef) &
-          /= size(structure_out%geom_coef)) &
-          deallocate(structure_out%geom_coef)
-       end if
-       if (.not. associated(structure_out%geom_coef)) then
-         allocate(structure_out%geom_coef(size(structure_in%geom_coef, 1), &
-          size(structure_in%geom_coef, 2)))
-       end if
-       structure_out%geom_coef = structure_in%geom_coef
-       if (verbose > 0) write(iu6, *) 'copied setup_mse%geom_coef'
-     end if
- 
-   end subroutine copy_type_setup_mse
- 
-   subroutine copy_type_msediag(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_msediag), intent(in) :: structure_in
-     type (type_msediag), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_setup_mse(structure_in%setup_mse, structure_out%setup_mse)
- 
-     call copy_type_exp1D(structure_in%measure, structure_out%measure)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied msediag%time'
-     end if
- 
-   end subroutine copy_type_msediag
- 
-   subroutine copy_type_mhd(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_mhd), intent(in) :: structure_in
-     type (type_mhd), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%n)) then
-       if (associated(structure_out%n)) then
-         if (size(structure_in%n) &
-          /= size(structure_out%n)) &
-          deallocate(structure_out%n)
-       end if
-       if (.not. associated(structure_out%n)) then
-         allocate(structure_out%n(size(structure_in%n, 1)))
-       end if
-       structure_out%n = structure_in%n
-       if (verbose > 0) write(iu6, *) 'copied mhd%n'
-     end if
- 
-     if (associated(structure_in%m)) then
-       if (associated(structure_out%m)) then
-         if (size(structure_in%m) &
-          /= size(structure_out%m)) &
-          deallocate(structure_out%m)
-       end if
-       if (.not. associated(structure_out%m)) then
-         allocate(structure_out%m(size(structure_in%m, 1), &
-          size(structure_in%m, 2)))
-       end if
-       structure_out%m = structure_in%m
-       if (verbose > 0) write(iu6, *) 'copied mhd%m'
-     end if
- 
-     if (associated(structure_in%psi)) then
-       if (associated(structure_out%psi)) then
-         if (size(structure_in%psi) &
-          /= size(structure_out%psi)) &
-          deallocate(structure_out%psi)
-       end if
-       if (.not. associated(structure_out%psi)) then
-         allocate(structure_out%psi(size(structure_in%psi, 1)))
-       end if
-       structure_out%psi = structure_in%psi
-       if (verbose > 0) write(iu6, *) 'copied mhd%psi'
-     end if
- 
-     if (associated(structure_in%frequency)) then
-       if (associated(structure_out%frequency)) then
-         if (size(structure_in%frequency) &
-          /= size(structure_out%frequency)) &
-          deallocate(structure_out%frequency)
-       end if
-       if (.not. associated(structure_out%frequency)) then
-         allocate(structure_out%frequency(size(structure_in%frequency, 1)))
-       end if
-       structure_out%frequency = structure_in%frequency
-       if (verbose > 0) write(iu6, *) 'copied mhd%frequency'
-     end if
- 
-     if (associated(structure_in%growthrate)) then
-       if (associated(structure_out%growthrate)) then
-         if (size(structure_in%growthrate) &
-          /= size(structure_out%growthrate)) &
-          deallocate(structure_out%growthrate)
-       end if
-       if (.not. associated(structure_out%growthrate)) then
-         allocate(structure_out%growthrate(size(structure_in%growthrate, 1)))
-       end if
-       structure_out%growthrate = structure_in%growthrate
-       if (verbose > 0) write(iu6, *) 'copied mhd%growthrate'
-     end if
- 
-     if (associated(structure_in%disp_perp)) then
-       if (associated(structure_out%disp_perp)) then
-         if (size(structure_in%disp_perp) &
-          /= size(structure_out%disp_perp)) &
-          deallocate(structure_out%disp_perp)
-       end if
-       if (.not. associated(structure_out%disp_perp)) then
-         allocate(structure_out%disp_perp(size(structure_in%disp_perp, 1), &
-          size(structure_in%disp_perp, 2), &
-          size(structure_in%disp_perp, 3)))
-       end if
-       structure_out%disp_perp = structure_in%disp_perp
-       if (verbose > 0) write(iu6, *) 'copied mhd%disp_perp'
-     end if
- 
-     if (associated(structure_in%disp_par)) then
-       if (associated(structure_out%disp_par)) then
-         if (size(structure_in%disp_par) &
-          /= size(structure_out%disp_par)) &
-          deallocate(structure_out%disp_par)
-       end if
-       if (.not. associated(structure_out%disp_par)) then
-         allocate(structure_out%disp_par(size(structure_in%disp_par, 1), &
-          size(structure_in%disp_par, 2), &
-          size(structure_in%disp_par, 3)))
-       end if
-       structure_out%disp_par = structure_in%disp_par
-       if (verbose > 0) write(iu6, *) 'copied mhd%disp_par'
-     end if
- 
-     if (associated(structure_in%tau_alfven)) then
-       if (associated(structure_out%tau_alfven)) then
-         if (size(structure_in%tau_alfven) &
-          /= size(structure_out%tau_alfven)) &
-          deallocate(structure_out%tau_alfven)
-       end if
-       if (.not. associated(structure_out%tau_alfven)) then
-         allocate(structure_out%tau_alfven(size(structure_in%tau_alfven, 1)))
-       end if
-       structure_out%tau_alfven = structure_in%tau_alfven
-       if (verbose > 0) write(iu6, *) 'copied mhd%tau_alfven'
-     end if
- 
-     if (associated(structure_in%tau_resistive)) then
-       if (associated(structure_out%tau_resistive)) then
-         if (size(structure_in%tau_resistive) &
-          /= size(structure_out%tau_resistive)) &
-          deallocate(structure_out%tau_resistive)
-       end if
-       if (.not. associated(structure_out%tau_resistive)) then
-         allocate(structure_out%tau_resistive(size(structure_in%tau_resistive, 1)))
-       end if
-       structure_out%tau_resistive = structure_in%tau_resistive
-       if (verbose > 0) write(iu6, *) 'copied mhd%tau_resistive'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied mhd%time'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_mhd
- 
-   subroutine copy_type_neoclassic(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_neoclassic), intent(in) :: structure_in
-     type (type_neoclassic), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%rho_tor_norm'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%rho_tor'
-     end if
- 
-     call copy_type_transcoefion(structure_in%ni_neo, structure_out%ni_neo)
- 
-     call copy_type_transcoefel(structure_in%ne_neo, structure_out%ne_neo)
- 
-     call copy_type_transcoefimp(structure_in%nz_neo, structure_out%nz_neo)
- 
-     call copy_type_transcoefion(structure_in%ti_neo, structure_out%ti_neo)
- 
-     call copy_type_transcoefel(structure_in%te_neo, structure_out%te_neo)
- 
-     call copy_type_transcoefimp(structure_in%tz_neo, structure_out%tz_neo)
- 
-     call copy_type_transcoefel(structure_in%mtor_neo, structure_out%mtor_neo)
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%sigma'
-     end if
- 
-     if (associated(structure_in%jboot)) then
-       if (associated(structure_out%jboot)) then
-         if (size(structure_in%jboot) &
-          /= size(structure_out%jboot)) &
-          deallocate(structure_out%jboot)
-       end if
-       if (.not. associated(structure_out%jboot)) then
-         allocate(structure_out%jboot(size(structure_in%jboot, 1)))
-       end if
-       structure_out%jboot = structure_in%jboot
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%jboot'
-     end if
- 
-     if (associated(structure_in%er)) then
-       if (associated(structure_out%er)) then
-         if (size(structure_in%er) &
-          /= size(structure_out%er)) &
-          deallocate(structure_out%er)
-       end if
-       if (.not. associated(structure_out%er)) then
-         allocate(structure_out%er(size(structure_in%er, 1)))
-       end if
-       structure_out%er = structure_in%er
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%er'
-     end if
- 
-     if (associated(structure_in%vpol)) then
-       if (associated(structure_out%vpol)) then
-         if (size(structure_in%vpol) &
-          /= size(structure_out%vpol)) &
-          deallocate(structure_out%vpol)
-       end if
-       if (.not. associated(structure_out%vpol)) then
-         allocate(structure_out%vpol(size(structure_in%vpol, 1), &
-          size(structure_in%vpol, 2)))
-       end if
-       structure_out%vpol = structure_in%vpol
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%vpol'
-     end if
- 
-     if (associated(structure_in%fext)) then
-       if (associated(structure_out%fext)) then
-         if (size(structure_in%fext) &
-          /= size(structure_out%fext)) &
-          deallocate(structure_out%fext)
-       end if
-       if (.not. associated(structure_out%fext)) then
-         allocate(structure_out%fext(size(structure_in%fext, 1), &
-          size(structure_in%fext, 2), &
-          size(structure_in%fext, 3)))
-       end if
-       structure_out%fext = structure_in%fext
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%fext'
-     end if
- 
-     if (associated(structure_in%jext)) then
-       if (associated(structure_out%jext)) then
-         if (size(structure_in%jext) &
-          /= size(structure_out%jext)) &
-          deallocate(structure_out%jext)
-       end if
-       if (.not. associated(structure_out%jext)) then
-         allocate(structure_out%jext(size(structure_in%jext, 1)))
-       end if
-       structure_out%jext = structure_in%jext
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%jext'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied neoclassic%time'
-     end if
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-   end subroutine copy_type_neoclassic
- 
-   subroutine copy_type_orbit_pos(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_orbit_pos), intent(in) :: structure_in
-     type (type_orbit_pos), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied orbit_pos%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied orbit_pos%z'
-     end if
- 
-     if (associated(structure_in%psi)) then
-       if (associated(structure_out%psi)) then
-         if (size(structure_in%psi) &
-          /= size(structure_out%psi)) &
-          deallocate(structure_out%psi)
-       end if
-       if (.not. associated(structure_out%psi)) then
-         allocate(structure_out%psi(size(structure_in%psi, 1)))
-       end if
-       structure_out%psi = structure_in%psi
-       if (verbose > 0) write(iu6, *) 'copied orbit_pos%psi'
-     end if
- 
-     if (associated(structure_in%theta_b)) then
-       if (associated(structure_out%theta_b)) then
-         if (size(structure_in%theta_b) &
-          /= size(structure_out%theta_b)) &
-          deallocate(structure_out%theta_b)
-       end if
-       if (.not. associated(structure_out%theta_b)) then
-         allocate(structure_out%theta_b(size(structure_in%theta_b, 1)))
-       end if
-       structure_out%theta_b = structure_in%theta_b
-       if (verbose > 0) write(iu6, *) 'copied orbit_pos%theta_b'
-     end if
- 
-   end subroutine copy_type_orbit_pos
- 
-   subroutine copy_type_midplane(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_midplane), intent(in) :: structure_in
-     type (type_midplane), intent(inout) :: structure_out
- 
-     call copy_type_orbit_pos(structure_in%outer, structure_out%outer)
- 
-     call copy_type_orbit_pos(structure_in%inner, structure_out%inner)
- 
-   end subroutine copy_type_midplane
- 
-   subroutine copy_type_turning_pts(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_turning_pts), intent(in) :: structure_in
-     type (type_turning_pts), intent(inout) :: structure_out
- 
-     call copy_type_orbit_pos(structure_in%upper, structure_out%upper)
- 
-     call copy_type_orbit_pos(structure_in%lower, structure_out%lower)
- 
-   end subroutine copy_type_turning_pts
- 
-   subroutine copy_type_special_pos(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_special_pos), intent(in) :: structure_in
-     type (type_special_pos), intent(inout) :: structure_out
- 
-     call copy_type_midplane(structure_in%midplane, structure_out%midplane)
- 
-     call copy_type_turning_pts(structure_in%turning_pts, structure_out%turning_pts)
- 
-   end subroutine copy_type_special_pos
- 
-   subroutine copy_type_orbitt_id(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_orbitt_id), intent(in) :: structure_in
-     type (type_orbitt_id), intent(inout) :: structure_out
- 
-     if (structure_in%amn /= -9.0D40) then
-       structure_out%amn = structure_in%amn
-       if (verbose > 0) write(iu6, *) 'copied orbitt_id%amn'
-     end if
- 
-     if (structure_in%zion /= -9.0D40) then
-       structure_out%zion = structure_in%zion
-       if (verbose > 0) write(iu6, *) 'copied orbitt_id%zion'
-     end if
- 
-     if (associated(structure_in%energy)) then
-       if (associated(structure_out%energy)) then
-         if (size(structure_in%energy) &
-          /= size(structure_out%energy)) &
-          deallocate(structure_out%energy)
-       end if
-       if (.not. associated(structure_out%energy)) then
-         allocate(structure_out%energy(size(structure_in%energy, 1)))
-       end if
-       structure_out%energy = structure_in%energy
-       if (verbose > 0) write(iu6, *) 'copied orbitt_id%energy'
-     end if
- 
-     if (associated(structure_in%magn_mom)) then
-       if (associated(structure_out%magn_mom)) then
-         if (size(structure_in%magn_mom) &
-          /= size(structure_out%magn_mom)) &
-          deallocate(structure_out%magn_mom)
-       end if
-       if (.not. associated(structure_out%magn_mom)) then
-         allocate(structure_out%magn_mom(size(structure_in%magn_mom, 1)))
-       end if
-       structure_out%magn_mom = structure_in%magn_mom
-       if (verbose > 0) write(iu6, *) 'copied orbitt_id%magn_mom'
-     end if
- 
-     if (associated(structure_in%p_phi)) then
-       if (associated(structure_out%p_phi)) then
-         if (size(structure_in%p_phi) &
-          /= size(structure_out%p_phi)) &
-          deallocate(structure_out%p_phi)
-       end if
-       if (.not. associated(structure_out%p_phi)) then
-         allocate(structure_out%p_phi(size(structure_in%p_phi, 1)))
-       end if
-       structure_out%p_phi = structure_in%p_phi
-       if (verbose > 0) write(iu6, *) 'copied orbitt_id%p_phi'
-     end if
- 
-     if (associated(structure_in%sigma)) then
-       if (associated(structure_out%sigma)) then
-         if (size(structure_in%sigma) &
-          /= size(structure_out%sigma)) &
-          deallocate(structure_out%sigma)
-       end if
-       if (.not. associated(structure_out%sigma)) then
-         allocate(structure_out%sigma(size(structure_in%sigma, 1)))
-       end if
-       structure_out%sigma = structure_in%sigma
-       if (verbose > 0) write(iu6, *) 'copied orbitt_id%sigma'
-     end if
- 
-   end subroutine copy_type_orbitt_id
- 
-   subroutine copy_type_orb_trace(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_orb_trace), intent(in) :: structure_in
-     type (type_orb_trace), intent(inout) :: structure_out
- 
-     if (associated(structure_in%time_orb)) then
-       if (associated(structure_out%time_orb)) then
-         if (size(structure_in%time_orb) &
-          /= size(structure_out%time_orb)) &
-          deallocate(structure_out%time_orb)
-       end if
-       if (.not. associated(structure_out%time_orb)) then
-         allocate(structure_out%time_orb(size(structure_in%time_orb, 1), &
-          size(structure_in%time_orb, 2)))
-       end if
-       structure_out%time_orb = structure_in%time_orb
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%time_orb'
-     end if
- 
-     if (associated(structure_in%ntorb)) then
-       if (associated(structure_out%ntorb)) then
-         if (size(structure_in%ntorb) &
-          /= size(structure_out%ntorb)) &
-          deallocate(structure_out%ntorb)
-       end if
-       if (.not. associated(structure_out%ntorb)) then
-         allocate(structure_out%ntorb(size(structure_in%ntorb, 1)))
-       end if
-       structure_out%ntorb = structure_in%ntorb
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%ntorb'
-     end if
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1), &
-          size(structure_in%r, 2)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1), &
-          size(structure_in%z, 2)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%z'
-     end if
- 
-     if (associated(structure_in%psi)) then
-       if (associated(structure_out%psi)) then
-         if (size(structure_in%psi) &
-          /= size(structure_out%psi)) &
-          deallocate(structure_out%psi)
-       end if
-       if (.not. associated(structure_out%psi)) then
-         allocate(structure_out%psi(size(structure_in%psi, 1), &
-          size(structure_in%psi, 2)))
-       end if
-       structure_out%psi = structure_in%psi
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%psi'
-     end if
- 
-     if (associated(structure_in%theta_b)) then
-       if (associated(structure_out%theta_b)) then
-         if (size(structure_in%theta_b) &
-          /= size(structure_out%theta_b)) &
-          deallocate(structure_out%theta_b)
-       end if
-       if (.not. associated(structure_out%theta_b)) then
-         allocate(structure_out%theta_b(size(structure_in%theta_b, 1), &
-          size(structure_in%theta_b, 2)))
-       end if
-       structure_out%theta_b = structure_in%theta_b
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%theta_b'
-     end if
- 
-     if (associated(structure_in%v_parallel)) then
-       if (associated(structure_out%v_parallel)) then
-         if (size(structure_in%v_parallel) &
-          /= size(structure_out%v_parallel)) &
-          deallocate(structure_out%v_parallel)
-       end if
-       if (.not. associated(structure_out%v_parallel)) then
-         allocate(structure_out%v_parallel(size(structure_in%v_parallel, 1), &
-          size(structure_in%v_parallel, 2)))
-       end if
-       structure_out%v_parallel = structure_in%v_parallel
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%v_parallel'
-     end if
- 
-     if (associated(structure_in%v_perp)) then
-       if (associated(structure_out%v_perp)) then
-         if (size(structure_in%v_perp) &
-          /= size(structure_out%v_perp)) &
-          deallocate(structure_out%v_perp)
-       end if
-       if (.not. associated(structure_out%v_perp)) then
-         allocate(structure_out%v_perp(size(structure_in%v_perp, 1), &
-          size(structure_in%v_perp, 2)))
-       end if
-       structure_out%v_perp = structure_in%v_perp
-       if (verbose > 0) write(iu6, *) 'copied orb_trace%v_perp'
-     end if
- 
-   end subroutine copy_type_orb_trace
- 
-   subroutine copy_type_orb_glob_dat(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_orb_glob_dat), intent(in) :: structure_in
-     type (type_orb_glob_dat), intent(inout) :: structure_out
- 
-     if (associated(structure_in%orbit_type)) then
-       if (associated(structure_out%orbit_type)) then
-         if (size(structure_in%orbit_type) &
-          /= size(structure_out%orbit_type)) &
-          deallocate(structure_out%orbit_type)
-       end if
-       if (.not. associated(structure_out%orbit_type)) then
-         allocate(structure_out%orbit_type(size(structure_in%orbit_type, 1)))
-       end if
-       structure_out%orbit_type = structure_in%orbit_type
-       if (verbose > 0) write(iu6, *) 'copied orb_glob_dat%orbit_type'
-     end if
- 
-     if (associated(structure_in%omega_b)) then
-       if (associated(structure_out%omega_b)) then
-         if (size(structure_in%omega_b) &
-          /= size(structure_out%omega_b)) &
-          deallocate(structure_out%omega_b)
-       end if
-       if (.not. associated(structure_out%omega_b)) then
-         allocate(structure_out%omega_b(size(structure_in%omega_b, 1)))
-       end if
-       structure_out%omega_b = structure_in%omega_b
-       if (verbose > 0) write(iu6, *) 'copied orb_glob_dat%omega_b'
-     end if
- 
-     if (associated(structure_in%omega_phi)) then
-       if (associated(structure_out%omega_phi)) then
-         if (size(structure_in%omega_phi) &
-          /= size(structure_out%omega_phi)) &
-          deallocate(structure_out%omega_phi)
-       end if
-       if (.not. associated(structure_out%omega_phi)) then
-         allocate(structure_out%omega_phi(size(structure_in%omega_phi, 1)))
-       end if
-       structure_out%omega_phi = structure_in%omega_phi
-       if (verbose > 0) write(iu6, *) 'copied orb_glob_dat%omega_phi'
-     end if
- 
-     if (associated(structure_in%omega_c_av)) then
-       if (associated(structure_out%omega_c_av)) then
-         if (size(structure_in%omega_c_av) &
-          /= size(structure_out%omega_c_av)) &
-          deallocate(structure_out%omega_c_av)
-       end if
-       if (.not. associated(structure_out%omega_c_av)) then
-         allocate(structure_out%omega_c_av(size(structure_in%omega_c_av, 1)))
-       end if
-       structure_out%omega_c_av = structure_in%omega_c_av
-       if (verbose > 0) write(iu6, *) 'copied orb_glob_dat%omega_c_av'
-     end if
- 
-     call copy_type_special_pos(structure_in%special_pos, structure_out%special_pos)
- 
-   end subroutine copy_type_orb_glob_dat
- 
-   subroutine copy_type_orbit(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_orbit), intent(in) :: structure_in
-     type (type_orbit), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_orbitt_id(structure_in%orbitt_id, structure_out%orbitt_id)
- 
-     call copy_type_orb_trace(structure_in%orb_trace, structure_out%orb_trace)
- 
-     call copy_type_orb_glob_dat(structure_in%orb_glob_dat, structure_out%orb_glob_dat)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied orbit%time'
-     end if
- 
-   end subroutine copy_type_orbit
- 
-   subroutine copy_type_pfgeometry(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfgeometry), intent(in) :: structure_in
-     type (type_pfgeometry), intent(inout) :: structure_out
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type, 1), &
-          size(structure_in%type, 2)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied pfgeometry%type'
-     end if
- 
-     if (associated(structure_in%npoints)) then
-       if (associated(structure_out%npoints)) then
-         if (size(structure_in%npoints) &
-          /= size(structure_out%npoints)) &
-          deallocate(structure_out%npoints)
-       end if
-       if (.not. associated(structure_out%npoints)) then
-         allocate(structure_out%npoints(size(structure_in%npoints, 1), &
-          size(structure_in%npoints, 2)))
-       end if
-       structure_out%npoints = structure_in%npoints
-       if (verbose > 0) write(iu6, *) 'copied pfgeometry%npoints'
-     end if
- 
-     call copy_type_rz3D(structure_in%rzcoordinate, structure_out%rzcoordinate)
- 
-     if (associated(structure_in%rzdrdz)) then
-       if (associated(structure_out%rzdrdz)) then
-         if (size(structure_in%rzdrdz) &
-          /= size(structure_out%rzdrdz)) &
-          deallocate(structure_out%rzdrdz)
-       end if
-       if (.not. associated(structure_out%rzdrdz)) then
-         allocate(structure_out%rzdrdz(size(structure_in%rzdrdz, 1), &
-          size(structure_in%rzdrdz, 2), &
-          size(structure_in%rzdrdz, 3)))
-       end if
-       structure_out%rzdrdz = structure_in%rzdrdz
-       if (verbose > 0) write(iu6, *) 'copied pfgeometry%rzdrdz'
-     end if
- 
-   end subroutine copy_type_pfgeometry
- 
-   subroutine copy_type_pfelement(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfelement), intent(in) :: structure_in
-     type (type_pfelement), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied pfelement%name'
-     end if
- 
-     if (associated(structure_in%id)) then
-       if (associated(structure_out%id)) then
-         if (size(structure_in%id) &
-          /= size(structure_out%id)) &
-          deallocate(structure_out%id)
-       end if
-       if (.not. associated(structure_out%id)) then
-         allocate(structure_out%id(size(structure_in%id)))
-       end if
-       structure_out%id = structure_in%id
-       if (verbose > 0) write(iu6, *) 'copied pfelement%id'
-     end if
- 
-     if (associated(structure_in%turnsign)) then
-       if (associated(structure_out%turnsign)) then
-         if (size(structure_in%turnsign) &
-          /= size(structure_out%turnsign)) &
-          deallocate(structure_out%turnsign)
-       end if
-       if (.not. associated(structure_out%turnsign)) then
-         allocate(structure_out%turnsign(size(structure_in%turnsign, 1), &
-          size(structure_in%turnsign, 2)))
-       end if
-       structure_out%turnsign = structure_in%turnsign
-       if (verbose > 0) write(iu6, *) 'copied pfelement%turnsign'
-     end if
- 
-     if (associated(structure_in%area)) then
-       if (associated(structure_out%area)) then
-         if (size(structure_in%area) &
-          /= size(structure_out%area)) &
-          deallocate(structure_out%area)
-       end if
-       if (.not. associated(structure_out%area)) then
-         allocate(structure_out%area(size(structure_in%area, 1), &
-          size(structure_in%area, 2)))
-       end if
-       structure_out%area = structure_in%area
-       if (verbose > 0) write(iu6, *) 'copied pfelement%area'
-     end if
- 
-     call copy_type_pfgeometry(structure_in%pfgeometry, structure_out%pfgeometry)
- 
-   end subroutine copy_type_pfelement
- 
-   subroutine copy_type_pfcircuits(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfcircuits), intent(in) :: structure_in
-     type (type_pfcircuits), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied pfcircuits%name'
-     end if
- 
-     if (associated(structure_in%id)) then
-       if (associated(structure_out%id)) then
-         if (size(structure_in%id) &
-          /= size(structure_out%id)) &
-          deallocate(structure_out%id)
-       end if
-       if (.not. associated(structure_out%id)) then
-         allocate(structure_out%id(size(structure_in%id)))
-       end if
-       structure_out%id = structure_in%id
-       if (verbose > 0) write(iu6, *) 'copied pfcircuits%id'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied pfcircuits%type'
-     end if
- 
-     if (associated(structure_in%nnodes)) then
-       if (associated(structure_out%nnodes)) then
-         if (size(structure_in%nnodes) &
-          /= size(structure_out%nnodes)) &
-          deallocate(structure_out%nnodes)
-       end if
-       if (.not. associated(structure_out%nnodes)) then
-         allocate(structure_out%nnodes(size(structure_in%nnodes, 1)))
-       end if
-       structure_out%nnodes = structure_in%nnodes
-       if (verbose > 0) write(iu6, *) 'copied pfcircuits%nnodes'
-     end if
- 
-     if (associated(structure_in%connections)) then
-       if (associated(structure_out%connections)) then
-         if (size(structure_in%connections) &
-          /= size(structure_out%connections)) &
-          deallocate(structure_out%connections)
-       end if
-       if (.not. associated(structure_out%connections)) then
-         allocate(structure_out%connections(size(structure_in%connections, 1), &
-          size(structure_in%connections, 2), &
-          size(structure_in%connections, 3)))
-       end if
-       structure_out%connections = structure_in%connections
-       if (verbose > 0) write(iu6, *) 'copied pfcircuits%connections'
-     end if
- 
-   end subroutine copy_type_pfcircuits
- 
-   subroutine copy_type_desc_pfcoils(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_desc_pfcoils), intent(in) :: structure_in
-     type (type_desc_pfcoils), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied desc_pfcoils%name'
-     end if
- 
-     if (associated(structure_in%id)) then
-       if (associated(structure_out%id)) then
-         if (size(structure_in%id) &
-          /= size(structure_out%id)) &
-          deallocate(structure_out%id)
-       end if
-       if (.not. associated(structure_out%id)) then
-         allocate(structure_out%id(size(structure_in%id)))
-       end if
-       structure_out%id = structure_in%id
-       if (verbose > 0) write(iu6, *) 'copied desc_pfcoils%id'
-     end if
- 
-     if (associated(structure_in%res)) then
-       if (associated(structure_out%res)) then
-         if (size(structure_in%res) &
-          /= size(structure_out%res)) &
-          deallocate(structure_out%res)
-       end if
-       if (.not. associated(structure_out%res)) then
-         allocate(structure_out%res(size(structure_in%res, 1)))
-       end if
-       structure_out%res = structure_in%res
-       if (verbose > 0) write(iu6, *) 'copied desc_pfcoils%res'
-     end if
- 
-     if (associated(structure_in%emax)) then
-       if (associated(structure_out%emax)) then
-         if (size(structure_in%emax) &
-          /= size(structure_out%emax)) &
-          deallocate(structure_out%emax)
-       end if
-       if (.not. associated(structure_out%emax)) then
-         allocate(structure_out%emax(size(structure_in%emax, 1)))
-       end if
-       structure_out%emax = structure_in%emax
-       if (verbose > 0) write(iu6, *) 'copied desc_pfcoils%emax'
-     end if
- 
-     if (associated(structure_in%nelement)) then
-       if (associated(structure_out%nelement)) then
-         if (size(structure_in%nelement) &
-          /= size(structure_out%nelement)) &
-          deallocate(structure_out%nelement)
-       end if
-       if (.not. associated(structure_out%nelement)) then
-         allocate(structure_out%nelement(size(structure_in%nelement, 1)))
-       end if
-       structure_out%nelement = structure_in%nelement
-       if (verbose > 0) write(iu6, *) 'copied desc_pfcoils%nelement'
-     end if
- 
-     call copy_type_pfelement(structure_in%pfelement, structure_out%pfelement)
- 
-   end subroutine copy_type_desc_pfcoils
- 
-   subroutine copy_type_pfcoils(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfcoils), intent(in) :: structure_in
-     type (type_pfcoils), intent(inout) :: structure_out
- 
-     call copy_type_desc_pfcoils(structure_in%desc_pfcoils, structure_out%desc_pfcoils)
- 
-     call copy_type_exp1D(structure_in%coilcurrent, structure_out%coilcurrent)
- 
-     call copy_type_exp1D(structure_in%coilvoltage, structure_out%coilvoltage)
- 
-   end subroutine copy_type_pfcoils
- 
-   subroutine copy_type_pfpageometry(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfpageometry), intent(in) :: structure_in
-     type (type_pfpageometry), intent(inout) :: structure_out
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type, 1)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied pfpageometry%type'
-     end if
- 
-     if (associated(structure_in%npoints)) then
-       if (associated(structure_out%npoints)) then
-         if (size(structure_in%npoints) &
-          /= size(structure_out%npoints)) &
-          deallocate(structure_out%npoints)
-       end if
-       if (.not. associated(structure_out%npoints)) then
-         allocate(structure_out%npoints(size(structure_in%npoints, 1)))
-       end if
-       structure_out%npoints = structure_in%npoints
-       if (verbose > 0) write(iu6, *) 'copied pfpageometry%npoints'
-     end if
- 
-     call copy_type_rz2D(structure_in%rzcoordinate, structure_out%rzcoordinate)
- 
-     if (associated(structure_in%rzdrdz)) then
-       if (associated(structure_out%rzdrdz)) then
-         if (size(structure_in%rzdrdz) &
-          /= size(structure_out%rzdrdz)) &
-          deallocate(structure_out%rzdrdz)
-       end if
-       if (.not. associated(structure_out%rzdrdz)) then
-         allocate(structure_out%rzdrdz(size(structure_in%rzdrdz, 1), &
-          size(structure_in%rzdrdz, 2)))
-       end if
-       structure_out%rzdrdz = structure_in%rzdrdz
-       if (verbose > 0) write(iu6, *) 'copied pfpageometry%rzdrdz'
-     end if
- 
-   end subroutine copy_type_pfpageometry
- 
-   subroutine copy_type_pfpassive(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfpassive), intent(in) :: structure_in
-     type (type_pfpassive), intent(inout) :: structure_out
- 
-     if (associated(structure_in%area)) then
-       if (associated(structure_out%area)) then
-         if (size(structure_in%area) &
-          /= size(structure_out%area)) &
-          deallocate(structure_out%area)
-       end if
-       if (.not. associated(structure_out%area)) then
-         allocate(structure_out%area(size(structure_in%area, 1)))
-       end if
-       structure_out%area = structure_in%area
-       if (verbose > 0) write(iu6, *) 'copied pfpassive%area'
-     end if
- 
-     if (associated(structure_in%res)) then
-       if (associated(structure_out%res)) then
-         if (size(structure_in%res) &
-          /= size(structure_out%res)) &
-          deallocate(structure_out%res)
-       end if
-       if (.not. associated(structure_out%res)) then
-         allocate(structure_out%res(size(structure_in%res, 1)))
-       end if
-       structure_out%res = structure_in%res
-       if (verbose > 0) write(iu6, *) 'copied pfpassive%res'
-     end if
- 
-     call copy_type_pfpageometry(structure_in%pfpageometry, structure_out%pfpageometry)
- 
-   end subroutine copy_type_pfpassive
- 
-   subroutine copy_type_filter(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_filter), intent(in) :: structure_in
-     type (type_filter), intent(inout) :: structure_out
- 
-     if (associated(structure_in%num)) then
-       if (associated(structure_out%num)) then
-         if (size(structure_in%num) &
-          /= size(structure_out%num)) &
-          deallocate(structure_out%num)
-       end if
-       if (.not. associated(structure_out%num)) then
-         allocate(structure_out%num(size(structure_in%num, 1), &
-          size(structure_in%num, 2)))
-       end if
-       structure_out%num = structure_in%num
-       if (verbose > 0) write(iu6, *) 'copied filter%num'
-     end if
- 
-     if (associated(structure_in%den)) then
-       if (associated(structure_out%den)) then
-         if (size(structure_in%den) &
-          /= size(structure_out%den)) &
-          deallocate(structure_out%den)
-       end if
-       if (.not. associated(structure_out%den)) then
-         allocate(structure_out%den(size(structure_in%den, 1), &
-          size(structure_in%den, 2)))
-       end if
-       structure_out%den = structure_in%den
-       if (verbose > 0) write(iu6, *) 'copied filter%den'
-     end if
- 
-   end subroutine copy_type_filter
- 
-   subroutine copy_type_desc_supply(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_desc_supply), intent(in) :: structure_in
-     type (type_desc_supply), intent(inout) :: structure_out
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%name'
-     end if
- 
-     if (associated(structure_in%id)) then
-       if (associated(structure_out%id)) then
-         if (size(structure_in%id) &
-          /= size(structure_out%id)) &
-          deallocate(structure_out%id)
-       end if
-       if (.not. associated(structure_out%id)) then
-         allocate(structure_out%id(size(structure_in%id)))
-       end if
-       structure_out%id = structure_in%id
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%id'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%type'
-     end if
- 
-     if (associated(structure_in%delay)) then
-       if (associated(structure_out%delay)) then
-         if (size(structure_in%delay) &
-          /= size(structure_out%delay)) &
-          deallocate(structure_out%delay)
-       end if
-       if (.not. associated(structure_out%delay)) then
-         allocate(structure_out%delay(size(structure_in%delay, 1)))
-       end if
-       structure_out%delay = structure_in%delay
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%delay'
-     end if
- 
-     call copy_type_filter(structure_in%filter, structure_out%filter)
- 
-     if (associated(structure_in%imin)) then
-       if (associated(structure_out%imin)) then
-         if (size(structure_in%imin) &
-          /= size(structure_out%imin)) &
-          deallocate(structure_out%imin)
-       end if
-       if (.not. associated(structure_out%imin)) then
-         allocate(structure_out%imin(size(structure_in%imin, 1)))
-       end if
-       structure_out%imin = structure_in%imin
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%imin'
-     end if
- 
-     if (associated(structure_in%imax)) then
-       if (associated(structure_out%imax)) then
-         if (size(structure_in%imax) &
-          /= size(structure_out%imax)) &
-          deallocate(structure_out%imax)
-       end if
-       if (.not. associated(structure_out%imax)) then
-         allocate(structure_out%imax(size(structure_in%imax, 1)))
-       end if
-       structure_out%imax = structure_in%imax
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%imax'
-     end if
- 
-     if (associated(structure_in%res)) then
-       if (associated(structure_out%res)) then
-         if (size(structure_in%res) &
-          /= size(structure_out%res)) &
-          deallocate(structure_out%res)
-       end if
-       if (.not. associated(structure_out%res)) then
-         allocate(structure_out%res(size(structure_in%res, 1)))
-       end if
-       structure_out%res = structure_in%res
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%res'
-     end if
- 
-     if (associated(structure_in%umin)) then
-       if (associated(structure_out%umin)) then
-         if (size(structure_in%umin) &
-          /= size(structure_out%umin)) &
-          deallocate(structure_out%umin)
-       end if
-       if (.not. associated(structure_out%umin)) then
-         allocate(structure_out%umin(size(structure_in%umin, 1)))
-       end if
-       structure_out%umin = structure_in%umin
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%umin'
-     end if
- 
-     if (associated(structure_in%umax)) then
-       if (associated(structure_out%umax)) then
-         if (size(structure_in%umax) &
-          /= size(structure_out%umax)) &
-          deallocate(structure_out%umax)
-       end if
-       if (.not. associated(structure_out%umax)) then
-         allocate(structure_out%umax(size(structure_in%umax, 1)))
-       end if
-       structure_out%umax = structure_in%umax
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%umax'
-     end if
- 
-     if (associated(structure_in%emax)) then
-       if (associated(structure_out%emax)) then
-         if (size(structure_in%emax) &
-          /= size(structure_out%emax)) &
-          deallocate(structure_out%emax)
-       end if
-       if (.not. associated(structure_out%emax)) then
-         allocate(structure_out%emax(size(structure_in%emax, 1)))
-       end if
-       structure_out%emax = structure_in%emax
-       if (verbose > 0) write(iu6, *) 'copied desc_supply%emax'
-     end if
- 
-   end subroutine copy_type_desc_supply
- 
-   subroutine copy_type_pfsupplies(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfsupplies), intent(in) :: structure_in
-     type (type_pfsupplies), intent(inout) :: structure_out
- 
-     call copy_type_desc_supply(structure_in%desc_supply, structure_out%desc_supply)
- 
-     call copy_type_exp1D(structure_in%voltage, structure_out%voltage)
- 
-     call copy_type_exp1D(structure_in%current, structure_out%current)
- 
-   end subroutine copy_type_pfsupplies
- 
-   subroutine copy_type_pfsystems(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_pfsystems), intent(in) :: structure_in
-     type (type_pfsystems), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_pfcoils(structure_in%pfcoils, structure_out%pfcoils)
- 
-     call copy_type_pfpassive(structure_in%pfpassive, structure_out%pfpassive)
- 
-     call copy_type_pfcircuits(structure_in%pfcircuits, structure_out%pfcircuits)
- 
-     call copy_type_pfsupplies(structure_in%pfsupplies, structure_out%pfsupplies)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied pfsystems%time'
-     end if
- 
-   end subroutine copy_type_pfsystems
- 
-   subroutine copy_type_toroidfield(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_toroidfield), intent(in) :: structure_in
-     type (type_toroidfield), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (structure_in%nturns /= -999999999) then
-       structure_out%nturns = structure_in%nturns
-       if (verbose > 0) write(iu6, *) 'copied toroidfield%nturns'
-     end if
- 
-     if (structure_in%ncoils /= -999999999) then
-       structure_out%ncoils = structure_in%ncoils
-       if (verbose > 0) write(iu6, *) 'copied toroidfield%ncoils'
-     end if
- 
-     call copy_type_exp0D(structure_in%current, structure_out%current)
- 
-     call copy_type_exp0D(structure_in%bvac_r, structure_out%bvac_r)
- 
-     if (structure_in%r0 /= -9.0D40) then
-       structure_out%r0 = structure_in%r0
-       if (verbose > 0) write(iu6, *) 'copied toroidfield%r0'
-     end if
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied toroidfield%time'
-     end if
- 
-   end subroutine copy_type_toroidfield
- 
-   subroutine copy_type_sawteeth_profiles1d(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_sawteeth_profiles1d), intent(in) :: structure_in
-     type (type_sawteeth_profiles1d), intent(inout) :: structure_out
- 
-     if (associated(structure_in%ne)) then
-       if (associated(structure_out%ne)) then
-         if (size(structure_in%ne) &
-          /= size(structure_out%ne)) &
-          deallocate(structure_out%ne)
-       end if
-       if (.not. associated(structure_out%ne)) then
-         allocate(structure_out%ne(size(structure_in%ne, 1)))
-       end if
-       structure_out%ne = structure_in%ne
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%ne'
-     end if
- 
-     if (associated(structure_in%ni)) then
-       if (associated(structure_out%ni)) then
-         if (size(structure_in%ni) &
-          /= size(structure_out%ni)) &
-          deallocate(structure_out%ni)
-       end if
-       if (.not. associated(structure_out%ni)) then
-         allocate(structure_out%ni(size(structure_in%ni, 1), &
-          size(structure_in%ni, 2)))
-       end if
-       structure_out%ni = structure_in%ni
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%ni'
-     end if
- 
-     if (associated(structure_in%te)) then
-       if (associated(structure_out%te)) then
-         if (size(structure_in%te) &
-          /= size(structure_out%te)) &
-          deallocate(structure_out%te)
-       end if
-       if (.not. associated(structure_out%te)) then
-         allocate(structure_out%te(size(structure_in%te, 1)))
-       end if
-       structure_out%te = structure_in%te
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%te'
-     end if
- 
-     if (associated(structure_in%ti)) then
-       if (associated(structure_out%ti)) then
-         if (size(structure_in%ti) &
-          /= size(structure_out%ti)) &
-          deallocate(structure_out%ti)
-       end if
-       if (.not. associated(structure_out%ti)) then
-         allocate(structure_out%ti(size(structure_in%ti, 1), &
-          size(structure_in%ti, 2)))
-       end if
-       structure_out%ti = structure_in%ti
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%ti'
-     end if
- 
-     if (associated(structure_in%psi)) then
-       if (associated(structure_out%psi)) then
-         if (size(structure_in%psi) &
-          /= size(structure_out%psi)) &
-          deallocate(structure_out%psi)
-       end if
-       if (.not. associated(structure_out%psi)) then
-         allocate(structure_out%psi(size(structure_in%psi, 1)))
-       end if
-       structure_out%psi = structure_in%psi
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%psi'
-     end if
- 
-     if (associated(structure_in%phi)) then
-       if (associated(structure_out%phi)) then
-         if (size(structure_in%phi) &
-          /= size(structure_out%phi)) &
-          deallocate(structure_out%phi)
-       end if
-       if (.not. associated(structure_out%phi)) then
-         allocate(structure_out%phi(size(structure_in%phi, 1)))
-       end if
-       structure_out%phi = structure_in%phi
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%phi'
-     end if
- 
-     if (associated(structure_in%psistar)) then
-       if (associated(structure_out%psistar)) then
-         if (size(structure_in%psistar) &
-          /= size(structure_out%psistar)) &
-          deallocate(structure_out%psistar)
-       end if
-       if (.not. associated(structure_out%psistar)) then
-         allocate(structure_out%psistar(size(structure_in%psistar, 1)))
-       end if
-       structure_out%psistar = structure_in%psistar
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%psistar'
-     end if
- 
-     if (associated(structure_in%volume)) then
-       if (associated(structure_out%volume)) then
-         if (size(structure_in%volume) &
-          /= size(structure_out%volume)) &
-          deallocate(structure_out%volume)
-       end if
-       if (.not. associated(structure_out%volume)) then
-         allocate(structure_out%volume(size(structure_in%volume, 1)))
-       end if
-       structure_out%volume = structure_in%volume
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%volume'
-     end if
- 
-     if (associated(structure_in%q)) then
-       if (associated(structure_out%q)) then
-         if (size(structure_in%q) &
-          /= size(structure_out%q)) &
-          deallocate(structure_out%q)
-       end if
-       if (.not. associated(structure_out%q)) then
-         allocate(structure_out%q(size(structure_in%q, 1)))
-       end if
-       structure_out%q = structure_in%q
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_profiles1d%q'
-     end if
- 
-   end subroutine copy_type_sawteeth_profiles1d
- 
-   subroutine copy_type_sawteeth_diags(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_sawteeth_diags), intent(in) :: structure_in
-     type (type_sawteeth_diags), intent(inout) :: structure_out
- 
-     if (structure_in%shear1 /= -9.0D40) then
-       structure_out%shear1 = structure_in%shear1
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_diags%shear1'
-     end if
- 
-     if (structure_in%rhotorn_q1 /= -9.0D40) then
-       structure_out%rhotorn_q1 = structure_in%rhotorn_q1
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_diags%rhotorn_q1'
-     end if
- 
-     if (structure_in%rhotorn_inv /= -9.0D40) then
-       structure_out%rhotorn_inv = structure_in%rhotorn_inv
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_diags%rhotorn_inv'
-     end if
- 
-     if (structure_in%rhotorn_mix /= -9.0D40) then
-       structure_out%rhotorn_mix = structure_in%rhotorn_mix
-       if (verbose > 0) write(iu6, *) 'copied sawteeth_diags%rhotorn_mix'
-     end if
- 
-   end subroutine copy_type_sawteeth_diags
- 
-   subroutine copy_type_sawteeth(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_sawteeth), intent(in) :: structure_in
-     type (type_sawteeth), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (structure_in%crash_trig /= -999999999) then
-       structure_out%crash_trig = structure_in%crash_trig
-       if (verbose > 0) write(iu6, *) 'copied sawteeth%crash_trig'
-     end if
- 
-     call copy_type_composition(structure_in%composition, structure_out%composition)
- 
-     if (associated(structure_in%rho_tor_norm)) then
-       if (associated(structure_out%rho_tor_norm)) then
-         if (size(structure_in%rho_tor_norm) &
-          /= size(structure_out%rho_tor_norm)) &
-          deallocate(structure_out%rho_tor_norm)
-       end if
-       if (.not. associated(structure_out%rho_tor_norm)) then
-         allocate(structure_out%rho_tor_norm(size(structure_in%rho_tor_norm, 1)))
-       end if
-       structure_out%rho_tor_norm = structure_in%rho_tor_norm
-       if (verbose > 0) write(iu6, *) 'copied sawteeth%rho_tor_norm'
-     end if
- 
-     if (associated(structure_in%rho_tor)) then
-       if (associated(structure_out%rho_tor)) then
-         if (size(structure_in%rho_tor) &
-          /= size(structure_out%rho_tor)) &
-          deallocate(structure_out%rho_tor)
-       end if
-       if (.not. associated(structure_out%rho_tor)) then
-         allocate(structure_out%rho_tor(size(structure_in%rho_tor, 1)))
-       end if
-       structure_out%rho_tor = structure_in%rho_tor
-       if (verbose > 0) write(iu6, *) 'copied sawteeth%rho_tor'
-     end if
- 
-     call copy_type_sawteeth_profiles1d(structure_in%profiles1d, structure_out%profiles1d)
- 
-     call copy_type_sawteeth_diags(structure_in%diags, structure_out%diags)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied sawteeth%time'
-     end if
- 
-   end subroutine copy_type_sawteeth
- 
-   subroutine copy_type_scenario_ref(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_ref), intent(in) :: structure_in
-     type (type_scenario_ref), intent(inout) :: structure_out
- 
-     if (structure_in%value /= -9.0D40) then
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied scenario_ref%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied scenario_ref%source'
-     end if
- 
-   end subroutine copy_type_scenario_ref
- 
-   subroutine copy_type_scenario_int(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_int), intent(in) :: structure_in
-     type (type_scenario_int), intent(inout) :: structure_out
- 
-     if (structure_in%value /= -999999999) then
-       structure_out%value = structure_in%value
-       if (verbose > 0) write(iu6, *) 'copied scenario_int%value'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied scenario_int%source'
-     end if
- 
-   end subroutine copy_type_scenario_int
- 
-   subroutine copy_type_scenario_reactor(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_reactor), intent(in) :: structure_in
-     type (type_scenario_reactor), intent(inout) :: structure_out
- 
-     if (structure_in%pnetwork /= -9.0D40) then
-       structure_out%pnetwork = structure_in%pnetwork
-       if (verbose > 0) write(iu6, *) 'copied scenario_reactor%pnetwork'
-     end if
- 
-   end subroutine copy_type_scenario_reactor
- 
-   subroutine copy_type_scenario_vol_ave(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_vol_ave), intent(in) :: structure_in
-     type (type_scenario_vol_ave), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%te_ave, structure_out%te_ave)
- 
-     call copy_type_scenario_ref(structure_in%ti_ave, structure_out%ti_ave)
- 
-     call copy_type_scenario_ref(structure_in%ne_ave, structure_out%ne_ave)
- 
-     call copy_type_scenario_ref(structure_in%dne_ave_dt, structure_out%dne_ave_dt)
- 
-     call copy_type_scenario_ref(structure_in%ni_ave, structure_out%ni_ave)
- 
-     call copy_type_scenario_ref(structure_in%zeff_ave, structure_out%zeff_ave)
- 
-     call copy_type_scenario_ref(structure_in%ti_o_te_ave, structure_out%ti_o_te_ave)
- 
-     call copy_type_scenario_ref(structure_in%meff_ave, structure_out%meff_ave)
- 
-     call copy_type_scenario_ref(structure_in%pellet_flux, structure_out%pellet_flux)
- 
-     if (associated(structure_in%nions_ave)) then
-       if (associated(structure_out%nions_ave)) then
-         if (size(structure_in%nions_ave) &
-          /= size(structure_out%nions_ave)) &
-          deallocate(structure_out%nions_ave)
-       end if
-       if (.not. associated(structure_out%nions_ave)) then
-         allocate(structure_out%nions_ave(size(structure_in%nions_ave, 1)))
-       end if
-       structure_out%nions_ave = structure_in%nions_ave
-       if (verbose > 0) write(iu6, *) 'copied scenario_vol_ave%nions_ave'
-     end if
- 
-     call copy_type_scenario_ref(structure_in%omega_ave, structure_out%omega_ave)
- 
-   end subroutine copy_type_scenario_vol_ave
- 
-   subroutine copy_type_scenario_references(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_references), intent(in) :: structure_in
-     type (type_scenario_references), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%plh, structure_out%plh)
- 
-     call copy_type_scenario_ref(structure_in%picrh, structure_out%picrh)
- 
-     call copy_type_scenario_ref(structure_in%pecrh, structure_out%pecrh)
- 
-     call copy_type_scenario_ref(structure_in%pnbi, structure_out%pnbi)
- 
-     call copy_type_scenario_ref(structure_in%ip, structure_out%ip)
- 
-     call copy_type_scenario_ref(structure_in%bvac_r, structure_out%bvac_r)
- 
-     call copy_type_scenario_ref(structure_in%zeffl, structure_out%zeffl)
- 
-     call copy_type_scenario_ref(structure_in%nbar, structure_out%nbar)
- 
-     call copy_type_scenario_ref(structure_in%xecrh, structure_out%xecrh)
- 
-     call copy_type_scenario_ref(structure_in%pol_flux, structure_out%pol_flux)
- 
-     call copy_type_scenario_ref(structure_in%enhancement, structure_out%enhancement)
- 
-     call copy_type_scenario_ref(structure_in%isotopic, structure_out%isotopic)
- 
-     call copy_type_scenario_ref(structure_in%nbi_td_ratio, structure_out%nbi_td_ratio)
- 
-   end subroutine copy_type_scenario_references
- 
-   subroutine copy_type_scenario_sol(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_sol), intent(in) :: structure_in
-     type (type_scenario_sol), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%l_te_sol, structure_out%l_te_sol)
- 
-     call copy_type_scenario_ref(structure_in%l_ti_sol, structure_out%l_ti_sol)
- 
-     call copy_type_scenario_ref(structure_in%l_ne_sol, structure_out%l_ne_sol)
- 
-     call copy_type_scenario_ref(structure_in%l_ni_sol, structure_out%l_ni_sol)
- 
-     call copy_type_scenario_ref(structure_in%l_qe_sol, structure_out%l_qe_sol)
- 
-     call copy_type_scenario_ref(structure_in%l_qi_sol, structure_out%l_qi_sol)
- 
-     call copy_type_scenario_ref(structure_in%p_rad_sol, structure_out%p_rad_sol)
- 
-     if (associated(structure_in%gaz_puff)) then
-       if (associated(structure_out%gaz_puff)) then
-         if (size(structure_in%gaz_puff) &
-          /= size(structure_out%gaz_puff)) &
-          deallocate(structure_out%gaz_puff)
-       end if
-       if (.not. associated(structure_out%gaz_puff)) then
-         allocate(structure_out%gaz_puff(size(structure_in%gaz_puff, 1)))
-       end if
-       structure_out%gaz_puff = structure_in%gaz_puff
-       if (verbose > 0) write(iu6, *) 'copied scenario_sol%gaz_puff'
-     end if
- 
-   end subroutine copy_type_scenario_sol
- 
-   subroutine copy_type_scenario_pedestal(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_pedestal), intent(in) :: structure_in
-     type (type_scenario_pedestal), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%te_ped, structure_out%te_ped)
- 
-     call copy_type_scenario_ref(structure_in%ti_ped, structure_out%ti_ped)
- 
-     call copy_type_scenario_ref(structure_in%ne_ped, structure_out%ne_ped)
- 
-     call copy_type_scenario_ref(structure_in%ni_ped, structure_out%ni_ped)
- 
-     call copy_type_scenario_ref(structure_in%psi_ped, structure_out%psi_ped)
- 
-     call copy_type_scenario_ref(structure_in%phi_ped, structure_out%phi_ped)
- 
-     call copy_type_scenario_ref(structure_in%rho_ped, structure_out%rho_ped)
- 
-     call copy_type_scenario_ref(structure_in%q_ped, structure_out%q_ped)
- 
-     call copy_type_scenario_ref(structure_in%pressure_ped, structure_out%pressure_ped)
- 
-     call copy_type_scenario_ref(structure_in%vtor_ped, structure_out%vtor_ped)
- 
-   end subroutine copy_type_scenario_pedestal
- 
-   subroutine copy_type_scenario_ninety_five(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_ninety_five), intent(in) :: structure_in
-     type (type_scenario_ninety_five), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%q_95, structure_out%q_95)
- 
-     call copy_type_scenario_ref(structure_in%elong_95, structure_out%elong_95)
- 
-     call copy_type_scenario_ref(structure_in%tria_95, structure_out%tria_95)
- 
-     call copy_type_scenario_ref(structure_in%tria_up_95, structure_out%tria_up_95)
- 
-     call copy_type_scenario_ref(structure_in%tria_lo_95, structure_out%tria_lo_95)
- 
-     call copy_type_scenario_ref(structure_in%te_95, structure_out%te_95)
- 
-     call copy_type_scenario_ref(structure_in%ti_95, structure_out%ti_95)
- 
-     call copy_type_scenario_ref(structure_in%ne_95, structure_out%ne_95)
- 
-     call copy_type_scenario_ref(structure_in%ni_95, structure_out%ni_95)
- 
-     call copy_type_scenario_ref(structure_in%phi_95, structure_out%phi_95)
- 
-     call copy_type_scenario_ref(structure_in%rho_95, structure_out%rho_95)
- 
-     call copy_type_scenario_ref(structure_in%vtor_95, structure_out%vtor_95)
- 
-   end subroutine copy_type_scenario_ninety_five
- 
-   subroutine copy_type_scenario_neutron(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_neutron), intent(in) :: structure_in
-     type (type_scenario_neutron), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%ndd_tot, structure_out%ndd_tot)
- 
-     call copy_type_scenario_ref(structure_in%ndd_th, structure_out%ndd_th)
- 
-     call copy_type_scenario_ref(structure_in%ndd_nbi_th, structure_out%ndd_nbi_th)
- 
-     call copy_type_scenario_ref(structure_in%ndd_nbi_nbi, structure_out%ndd_nbi_nbi)
- 
-     call copy_type_scenario_ref(structure_in%ndt_tot, structure_out%ndt_tot)
- 
-     call copy_type_scenario_ref(structure_in%ndt_th, structure_out%ndt_th)
- 
-   end subroutine copy_type_scenario_neutron
- 
-   subroutine copy_type_scenario_line_ave(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_line_ave), intent(in) :: structure_in
-     type (type_scenario_line_ave), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%ne_line, structure_out%ne_line)
- 
-     call copy_type_scenario_ref(structure_in%zeff_line, structure_out%zeff_line)
- 
-     call copy_type_scenario_ref(structure_in%ne_zeff_line, structure_out%ne_zeff_line)
- 
-     call copy_type_scenario_ref(structure_in%dne_line_dt, structure_out%dne_line_dt)
- 
-   end subroutine copy_type_scenario_line_ave
- 
-   subroutine copy_type_scenario_lim_div_wall(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_lim_div_wall), intent(in) :: structure_in
-     type (type_scenario_lim_div_wall), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%te_lim_div, structure_out%te_lim_div)
- 
-     call copy_type_scenario_ref(structure_in%ti_lim_div, structure_out%ti_lim_div)
- 
-     call copy_type_scenario_ref(structure_in%ne_lim_div, structure_out%ne_lim_div)
- 
-     call copy_type_scenario_ref(structure_in%ni_lim_div, structure_out%ni_lim_div)
- 
-     call copy_type_scenario_ref(structure_in%p_peak_div, structure_out%p_peak_div)
- 
-     call copy_type_scenario_ref(structure_in%surf_temp, structure_out%surf_temp)
- 
-     call copy_type_scenario_ref(structure_in%p_lim_div, structure_out%p_lim_div)
- 
-     call copy_type_scenario_ref(structure_in%p_rad_div, structure_out%p_rad_div)
- 
-     call copy_type_scenario_ref(structure_in%wall_temp, structure_out%wall_temp)
- 
-     call copy_type_scenario_ref(structure_in%wall_state, structure_out%wall_state)
- 
-     call copy_type_scenario_ref(structure_in%detach_state, structure_out%detach_state)
- 
-     if (associated(structure_in%pump_flux)) then
-       if (associated(structure_out%pump_flux)) then
-         if (size(structure_in%pump_flux) &
-          /= size(structure_out%pump_flux)) &
-          deallocate(structure_out%pump_flux)
-       end if
-       if (.not. associated(structure_out%pump_flux)) then
-         allocate(structure_out%pump_flux(size(structure_in%pump_flux, 1)))
-       end if
-       structure_out%pump_flux = structure_in%pump_flux
-       if (verbose > 0) write(iu6, *) 'copied scenario_lim_div_wall%pump_flux'
-     end if
- 
-   end subroutine copy_type_scenario_lim_div_wall
- 
-   subroutine copy_type_scenario_itb(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_itb), intent(in) :: structure_in
-     type (type_scenario_itb), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%q_min, structure_out%q_min)
- 
-     call copy_type_scenario_ref(structure_in%te_itb, structure_out%te_itb)
- 
-     call copy_type_scenario_ref(structure_in%ti_itb, structure_out%ti_itb)
- 
-     call copy_type_scenario_ref(structure_in%ne_itb, structure_out%ne_itb)
- 
-     call copy_type_scenario_ref(structure_in%ni_itb, structure_out%ni_itb)
- 
-     call copy_type_scenario_ref(structure_in%psi_itb, structure_out%psi_itb)
- 
-     call copy_type_scenario_ref(structure_in%phi_itb, structure_out%phi_itb)
- 
-     call copy_type_scenario_ref(structure_in%rho_itb, structure_out%rho_itb)
- 
-     call copy_type_scenario_ref(structure_in%h_itb, structure_out%h_itb)
- 
-     call copy_type_scenario_ref(structure_in%width_itb, structure_out%width_itb)
- 
-     call copy_type_scenario_ref(structure_in%vtor_itb, structure_out%vtor_itb)
- 
-     call copy_type_scenario_int(structure_in%itb_type, structure_out%itb_type)
- 
-   end subroutine copy_type_scenario_itb
- 
-   subroutine copy_type_scenario_heat_power(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_heat_power), intent(in) :: structure_in
-     type (type_scenario_heat_power), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%plh, structure_out%plh)
- 
-     call copy_type_scenario_ref(structure_in%pohmic, structure_out%pohmic)
- 
-     call copy_type_scenario_ref(structure_in%picrh, structure_out%picrh)
- 
-     call copy_type_scenario_ref(structure_in%pecrh, structure_out%pecrh)
- 
-     call copy_type_scenario_ref(structure_in%pnbi, structure_out%pnbi)
- 
-     call copy_type_scenario_ref(structure_in%pnbi_co_cur, structure_out%pnbi_co_cur)
- 
-     call copy_type_scenario_ref(structure_in%pnbi_counter, structure_out%pnbi_counter)
- 
-     call copy_type_scenario_ref(structure_in%plh_th, structure_out%plh_th)
- 
-     call copy_type_scenario_ref(structure_in%picrh_th, structure_out%picrh_th)
- 
-     call copy_type_scenario_ref(structure_in%pecrh_th, structure_out%pecrh_th)
- 
-     call copy_type_scenario_ref(structure_in%pnbi_th, structure_out%pnbi_th)
- 
-     call copy_type_scenario_ref(structure_in%ploss_icrh, structure_out%ploss_icrh)
- 
-     call copy_type_scenario_ref(structure_in%ploss_nbi, structure_out%ploss_nbi)
- 
-     call copy_type_scenario_ref(structure_in%pbrem, structure_out%pbrem)
- 
-     call copy_type_scenario_ref(structure_in%pcyclo, structure_out%pcyclo)
- 
-     call copy_type_scenario_ref(structure_in%prad, structure_out%prad)
- 
-     call copy_type_scenario_ref(structure_in%pdd_fus, structure_out%pdd_fus)
- 
-     call copy_type_scenario_ref(structure_in%pei, structure_out%pei)
- 
-     call copy_type_scenario_ref(structure_in%pel_tot, structure_out%pel_tot)
- 
-     call copy_type_scenario_ref(structure_in%pel_fus, structure_out%pel_fus)
- 
-     call copy_type_scenario_ref(structure_in%pel_icrh, structure_out%pel_icrh)
- 
-     call copy_type_scenario_ref(structure_in%pel_nbi, structure_out%pel_nbi)
- 
-     call copy_type_scenario_ref(structure_in%pfus_dt, structure_out%pfus_dt)
- 
-     call copy_type_scenario_ref(structure_in%ploss_fus, structure_out%ploss_fus)
- 
-     call copy_type_scenario_ref(structure_in%pfus_nbi, structure_out%pfus_nbi)
- 
-     call copy_type_scenario_ref(structure_in%pfus_th, structure_out%pfus_th)
- 
-     call copy_type_scenario_ref(structure_in%padd_tot, structure_out%padd_tot)
- 
-     call copy_type_scenario_ref(structure_in%pion_tot, structure_out%pion_tot)
- 
-     call copy_type_scenario_ref(structure_in%pion_fus, structure_out%pion_fus)
- 
-     call copy_type_scenario_ref(structure_in%pion_icrh, structure_out%pion_icrh)
- 
-     call copy_type_scenario_ref(structure_in%pion_nbi, structure_out%pion_nbi)
- 
-     call copy_type_scenario_ref(structure_in%pioniz, structure_out%pioniz)
- 
-     call copy_type_scenario_ref(structure_in%ploss, structure_out%ploss)
- 
-     call copy_type_scenario_ref(structure_in%p_wth, structure_out%p_wth)
- 
-     call copy_type_scenario_ref(structure_in%p_w, structure_out%p_w)
- 
-     call copy_type_scenario_ref(structure_in%p_l2h_thr, structure_out%p_l2h_thr)
- 
-     call copy_type_scenario_ref(structure_in%p_l2h_sc, structure_out%p_l2h_sc)
- 
-     call copy_type_scenario_ref(structure_in%p_nbi_icrh, structure_out%p_nbi_icrh)
- 
-   end subroutine copy_type_scenario_heat_power
- 
-   subroutine copy_type_scenario_global(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_global), intent(in) :: structure_in
-     type (type_scenario_global), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%ip, structure_out%ip)
- 
-     call copy_type_scenario_ref(structure_in%dip_dt, structure_out%dip_dt)
- 
-     call copy_type_scenario_ref(structure_in%beta_pol, structure_out%beta_pol)
- 
-     call copy_type_scenario_ref(structure_in%beta_tor, structure_out%beta_tor)
- 
-     call copy_type_scenario_ref(structure_in%beta_normal, structure_out%beta_normal)
- 
-     call copy_type_scenario_ref(structure_in%li, structure_out%li)
- 
-     call copy_type_scenario_ref(structure_in%volume, structure_out%volume)
- 
-     call copy_type_scenario_ref(structure_in%area_pol, structure_out%area_pol)
- 
-     call copy_type_scenario_ref(structure_in%area_ext, structure_out%area_ext)
- 
-     call copy_type_scenario_ref(structure_in%len_sepa, structure_out%len_sepa)
- 
-     call copy_type_scenario_ref(structure_in%beta_pol_th, structure_out%beta_pol_th)
- 
-     call copy_type_scenario_ref(structure_in%beta_tor_th, structure_out%beta_tor_th)
- 
-     call copy_type_scenario_ref(structure_in%beta_n_th, structure_out%beta_n_th)
- 
-     call copy_type_scenario_ref(structure_in%disruption, structure_out%disruption)
- 
-     call copy_type_scenario_ref(structure_in%mode_h, structure_out%mode_h)
- 
-     call copy_type_scenario_ref(structure_in%s_alpha, structure_out%s_alpha)
- 
-   end subroutine copy_type_scenario_global
- 
-   subroutine copy_type_scenario_energy(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_energy), intent(in) :: structure_in
-     type (type_scenario_energy), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%w_tot, structure_out%w_tot)
- 
-     call copy_type_scenario_ref(structure_in%w_b_pol, structure_out%w_b_pol)
- 
-     call copy_type_scenario_ref(structure_in%w_dia, structure_out%w_dia)
- 
-     call copy_type_scenario_ref(structure_in%dwdia_dt, structure_out%dwdia_dt)
- 
-     call copy_type_scenario_ref(structure_in%w_b_tor_pla, structure_out%w_b_tor_pla)
- 
-     call copy_type_scenario_ref(structure_in%w_th, structure_out%w_th)
- 
-     call copy_type_scenario_ref(structure_in%dwtot_dt, structure_out%dwtot_dt)
- 
-     call copy_type_scenario_ref(structure_in%dwbpol_dt, structure_out%dwbpol_dt)
- 
-     call copy_type_scenario_ref(structure_in%dwbtorpla_dt, structure_out%dwbtorpla_dt)
- 
-     call copy_type_scenario_ref(structure_in%dwth_dt, structure_out%dwth_dt)
- 
-     call copy_type_scenario_ref(structure_in%esup_icrhtot, structure_out%esup_icrhtot)
- 
-     call copy_type_scenario_ref(structure_in%esup_icrhper, structure_out%esup_icrhper)
- 
-     call copy_type_scenario_ref(structure_in%esup_nbitot, structure_out%esup_nbitot)
- 
-     call copy_type_scenario_ref(structure_in%esup_nbiperp, structure_out%esup_nbiperp)
- 
-     call copy_type_scenario_ref(structure_in%esup_lhcd, structure_out%esup_lhcd)
- 
-     call copy_type_scenario_ref(structure_in%esup_alpha, structure_out%esup_alpha)
- 
-   end subroutine copy_type_scenario_energy
- 
-   subroutine copy_type_scenario_edge(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_edge), intent(in) :: structure_in
-     type (type_scenario_edge), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%te_edge, structure_out%te_edge)
- 
-     call copy_type_scenario_ref(structure_in%ti_edge, structure_out%ti_edge)
- 
-     call copy_type_scenario_ref(structure_in%ne_edge, structure_out%ne_edge)
- 
-     call copy_type_scenario_ref(structure_in%ni_edge, structure_out%ni_edge)
- 
-     call copy_type_scenario_ref(structure_in%psi_edge, structure_out%psi_edge)
- 
-     call copy_type_scenario_ref(structure_in%phi_edge, structure_out%phi_edge)
- 
-     call copy_type_scenario_ref(structure_in%rho_edge, structure_out%rho_edge)
- 
-     call copy_type_scenario_ref(structure_in%drho_edge_dt, structure_out%drho_edge_dt)
- 
-     call copy_type_scenario_ref(structure_in%q_edge, structure_out%q_edge)
- 
-     call copy_type_scenario_ref(structure_in%neutral_flux, structure_out%neutral_flux)
- 
-     call copy_type_scenario_ref(structure_in%phi_plasma, structure_out%phi_plasma)
- 
-     call copy_type_scenario_ref(structure_in%vtor_edge, structure_out%vtor_edge)
- 
-   end subroutine copy_type_scenario_edge
- 
-   subroutine copy_type_scenario_currents(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_currents), intent(in) :: structure_in
-     type (type_scenario_currents), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%RR, structure_out%RR)
- 
-     call copy_type_scenario_ref(structure_in%i_align, structure_out%i_align)
- 
-     call copy_type_scenario_ref(structure_in%i_boot, structure_out%i_boot)
- 
-     call copy_type_scenario_ref(structure_in%i_cd_tot, structure_out%i_cd_tot)
- 
-     call copy_type_scenario_ref(structure_in%i_eccd, structure_out%i_eccd)
- 
-     call copy_type_scenario_ref(structure_in%i_fast_ion, structure_out%i_fast_ion)
- 
-     call copy_type_scenario_ref(structure_in%i_fwcd, structure_out%i_fwcd)
- 
-     call copy_type_scenario_ref(structure_in%i_lhcd, structure_out%i_lhcd)
- 
-     call copy_type_scenario_ref(structure_in%i_nbicd, structure_out%i_nbicd)
- 
-     call copy_type_scenario_ref(structure_in%i_ni_tot, structure_out%i_ni_tot)
- 
-     call copy_type_scenario_ref(structure_in%i_ohm, structure_out%i_ohm)
- 
-     call copy_type_scenario_ref(structure_in%i_par, structure_out%i_par)
- 
-     call copy_type_scenario_ref(structure_in%i_runaway, structure_out%i_runaway)
- 
-     call copy_type_scenario_ref(structure_in%v_loop, structure_out%v_loop)
- 
-     call copy_type_scenario_ref(structure_in%v_meas, structure_out%v_meas)
- 
-   end subroutine copy_type_scenario_currents
- 
-   subroutine copy_type_scenario_confinement(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_confinement), intent(in) :: structure_in
-     type (type_scenario_confinement), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%tau_e, structure_out%tau_e)
- 
-     call copy_type_scenario_ref(structure_in%tau_l_sc, structure_out%tau_l_sc)
- 
-     call copy_type_scenario_ref(structure_in%tau_h_sc, structure_out%tau_h_sc)
- 
-     call copy_type_scenario_ref(structure_in%tau_he, structure_out%tau_he)
- 
-     call copy_type_scenario_ref(structure_in%tau_e_ee, structure_out%tau_e_ee)
- 
-     call copy_type_scenario_ref(structure_in%tau_e_ii, structure_out%tau_e_ii)
- 
-     call copy_type_scenario_ref(structure_in%tau_e_ei, structure_out%tau_e_ei)
- 
-     call copy_type_scenario_ref(structure_in%tau_cur_diff, structure_out%tau_cur_diff)
- 
-     call copy_type_scenario_ref(structure_in%tau_i_rol, structure_out%tau_i_rol)
- 
-   end subroutine copy_type_scenario_confinement
- 
-   subroutine copy_type_scenario_configuration(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_configuration), intent(in) :: structure_in
-     type (type_scenario_configuration), intent(inout) :: structure_out
- 
-     call copy_type_scenario_int(structure_in%config, structure_out%config)
- 
-     if (associated(structure_in%lmode_sc)) then
-       if (associated(structure_out%lmode_sc)) then
-         if (size(structure_in%lmode_sc) &
-          /= size(structure_out%lmode_sc)) &
-          deallocate(structure_out%lmode_sc)
-       end if
-       if (.not. associated(structure_out%lmode_sc)) then
-         allocate(structure_out%lmode_sc(size(structure_in%lmode_sc)))
-       end if
-       structure_out%lmode_sc = structure_in%lmode_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%lmode_sc'
-     end if
- 
-     if (associated(structure_in%hmode_sc)) then
-       if (associated(structure_out%hmode_sc)) then
-         if (size(structure_in%hmode_sc) &
-          /= size(structure_out%hmode_sc)) &
-          deallocate(structure_out%hmode_sc)
-       end if
-       if (.not. associated(structure_out%hmode_sc)) then
-         allocate(structure_out%hmode_sc(size(structure_in%hmode_sc)))
-       end if
-       structure_out%hmode_sc = structure_in%hmode_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%hmode_sc'
-     end if
- 
-     if (associated(structure_in%core_sc)) then
-       if (associated(structure_out%core_sc)) then
-         if (size(structure_in%core_sc) &
-          /= size(structure_out%core_sc)) &
-          deallocate(structure_out%core_sc)
-       end if
-       if (.not. associated(structure_out%core_sc)) then
-         allocate(structure_out%core_sc(size(structure_in%core_sc)))
-       end if
-       structure_out%core_sc = structure_in%core_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%core_sc'
-     end if
- 
-     if (associated(structure_in%pedestal_sc)) then
-       if (associated(structure_out%pedestal_sc)) then
-         if (size(structure_in%pedestal_sc) &
-          /= size(structure_out%pedestal_sc)) &
-          deallocate(structure_out%pedestal_sc)
-       end if
-       if (.not. associated(structure_out%pedestal_sc)) then
-         allocate(structure_out%pedestal_sc(size(structure_in%pedestal_sc)))
-       end if
-       structure_out%pedestal_sc = structure_in%pedestal_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%pedestal_sc'
-     end if
- 
-     if (associated(structure_in%helium_sc)) then
-       if (associated(structure_out%helium_sc)) then
-         if (size(structure_in%helium_sc) &
-          /= size(structure_out%helium_sc)) &
-          deallocate(structure_out%helium_sc)
-       end if
-       if (.not. associated(structure_out%helium_sc)) then
-         allocate(structure_out%helium_sc(size(structure_in%helium_sc)))
-       end if
-       structure_out%helium_sc = structure_in%helium_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%helium_sc'
-     end if
- 
-     if (associated(structure_in%impurity_sc)) then
-       if (associated(structure_out%impurity_sc)) then
-         if (size(structure_in%impurity_sc) &
-          /= size(structure_out%impurity_sc)) &
-          deallocate(structure_out%impurity_sc)
-       end if
-       if (.not. associated(structure_out%impurity_sc)) then
-         allocate(structure_out%impurity_sc(size(structure_in%impurity_sc)))
-       end if
-       structure_out%impurity_sc = structure_in%impurity_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%impurity_sc'
-     end if
- 
-     if (associated(structure_in%l2h_sc)) then
-       if (associated(structure_out%l2h_sc)) then
-         if (size(structure_in%l2h_sc) &
-          /= size(structure_out%l2h_sc)) &
-          deallocate(structure_out%l2h_sc)
-       end if
-       if (.not. associated(structure_out%l2h_sc)) then
-         allocate(structure_out%l2h_sc(size(structure_in%l2h_sc)))
-       end if
-       structure_out%l2h_sc = structure_in%l2h_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%l2h_sc'
-     end if
- 
-     if (associated(structure_in%tor_rot_sc)) then
-       if (associated(structure_out%tor_rot_sc)) then
-         if (size(structure_in%tor_rot_sc) &
-          /= size(structure_out%tor_rot_sc)) &
-          deallocate(structure_out%tor_rot_sc)
-       end if
-       if (.not. associated(structure_out%tor_rot_sc)) then
-         allocate(structure_out%tor_rot_sc(size(structure_in%tor_rot_sc)))
-       end if
-       structure_out%tor_rot_sc = structure_in%tor_rot_sc
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%tor_rot_sc'
-     end if
- 
-     if (associated(structure_in%wall_mat)) then
-       if (associated(structure_out%wall_mat)) then
-         if (size(structure_in%wall_mat) &
-          /= size(structure_out%wall_mat)) &
-          deallocate(structure_out%wall_mat)
-       end if
-       if (.not. associated(structure_out%wall_mat)) then
-         allocate(structure_out%wall_mat(size(structure_in%wall_mat)))
-       end if
-       structure_out%wall_mat = structure_in%wall_mat
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%wall_mat'
-     end if
- 
-     if (associated(structure_in%evap_mat)) then
-       if (associated(structure_out%evap_mat)) then
-         if (size(structure_in%evap_mat) &
-          /= size(structure_out%evap_mat)) &
-          deallocate(structure_out%evap_mat)
-       end if
-       if (.not. associated(structure_out%evap_mat)) then
-         allocate(structure_out%evap_mat(size(structure_in%evap_mat)))
-       end if
-       structure_out%evap_mat = structure_in%evap_mat
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%evap_mat'
-     end if
- 
-     if (associated(structure_in%lim_mat)) then
-       if (associated(structure_out%lim_mat)) then
-         if (size(structure_in%lim_mat) &
-          /= size(structure_out%lim_mat)) &
-          deallocate(structure_out%lim_mat)
-       end if
-       if (.not. associated(structure_out%lim_mat)) then
-         allocate(structure_out%lim_mat(size(structure_in%lim_mat)))
-       end if
-       structure_out%lim_mat = structure_in%lim_mat
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%lim_mat'
-     end if
- 
-     if (associated(structure_in%div_mat)) then
-       if (associated(structure_out%div_mat)) then
-         if (size(structure_in%div_mat) &
-          /= size(structure_out%div_mat)) &
-          deallocate(structure_out%div_mat)
-       end if
-       if (.not. associated(structure_out%div_mat)) then
-         allocate(structure_out%div_mat(size(structure_in%div_mat)))
-       end if
-       structure_out%div_mat = structure_in%div_mat
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%div_mat'
-     end if
- 
-     if (associated(structure_in%coordinate)) then
-       if (associated(structure_out%coordinate)) then
-         if (size(structure_in%coordinate) &
-          /= size(structure_out%coordinate)) &
-          deallocate(structure_out%coordinate)
-       end if
-       if (.not. associated(structure_out%coordinate)) then
-         allocate(structure_out%coordinate(size(structure_in%coordinate)))
-       end if
-       structure_out%coordinate = structure_in%coordinate
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%coordinate'
-     end if
- 
-     call copy_type_scenario_ref(structure_in%ecrh_freq, structure_out%ecrh_freq)
- 
-     call copy_type_scenario_ref(structure_in%ecrh_loc, structure_out%ecrh_loc)
- 
-     call copy_type_scenario_int(structure_in%ecrh_mode, structure_out%ecrh_mode)
- 
-     call copy_type_scenario_ref(structure_in%ecrh_tor_ang, structure_out%ecrh_tor_ang)
- 
-     call copy_type_scenario_ref(structure_in%ecrh_pol_ang, structure_out%ecrh_pol_ang)
- 
-     call copy_type_scenario_int(structure_in%ecrh_harm, structure_out%ecrh_harm)
- 
-     call copy_type_scenario_ref(structure_in%enbi, structure_out%enbi)
- 
-     call copy_type_scenario_ref(structure_in%r_nbi, structure_out%r_nbi)
- 
-     call copy_type_scenario_int(structure_in%grad_b_drift, structure_out%grad_b_drift)
- 
-     call copy_type_scenario_ref(structure_in%icrh_freq, structure_out%icrh_freq)
- 
-     if (associated(structure_in%icrh_scheme)) then
-       if (associated(structure_out%icrh_scheme)) then
-         if (size(structure_in%icrh_scheme) &
-          /= size(structure_out%icrh_scheme)) &
-          deallocate(structure_out%icrh_scheme)
-       end if
-       if (.not. associated(structure_out%icrh_scheme)) then
-         allocate(structure_out%icrh_scheme(size(structure_in%icrh_scheme)))
-       end if
-       structure_out%icrh_scheme = structure_in%icrh_scheme
-       if (verbose > 0) write(iu6, *) 'copied scenario_configuration%icrh_scheme'
-     end if
- 
-     call copy_type_scenario_ref(structure_in%icrh_phase, structure_out%icrh_phase)
- 
-     call copy_type_scenario_ref(structure_in%LH_freq, structure_out%LH_freq)
- 
-     call copy_type_scenario_ref(structure_in%LH_npar, structure_out%LH_npar)
- 
-     call copy_type_scenario_ref(structure_in%pellet_ang, structure_out%pellet_ang)
- 
-     call copy_type_scenario_ref(structure_in%pellet_v, structure_out%pellet_v)
- 
-     call copy_type_scenario_ref(structure_in%pellet_nba, structure_out%pellet_nba)
- 
-   end subroutine copy_type_scenario_configuration
- 
-   subroutine copy_type_scenario_composition(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_composition), intent(in) :: structure_in
-     type (type_scenario_composition), intent(inout) :: structure_out
- 
-     if (associated(structure_in%amn)) then
-       if (associated(structure_out%amn)) then
-         if (size(structure_in%amn) &
-          /= size(structure_out%amn)) &
-          deallocate(structure_out%amn)
-       end if
-       if (.not. associated(structure_out%amn)) then
-         allocate(structure_out%amn(size(structure_in%amn, 1)))
-       end if
-       structure_out%amn = structure_in%amn
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%amn'
-     end if
- 
-     if (associated(structure_in%zn)) then
-       if (associated(structure_out%zn)) then
-         if (size(structure_in%zn) &
-          /= size(structure_out%zn)) &
-          deallocate(structure_out%zn)
-       end if
-       if (.not. associated(structure_out%zn)) then
-         allocate(structure_out%zn(size(structure_in%zn, 1)))
-       end if
-       structure_out%zn = structure_in%zn
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%zn'
-     end if
- 
-     if (associated(structure_in%zion)) then
-       if (associated(structure_out%zion)) then
-         if (size(structure_in%zion) &
-          /= size(structure_out%zion)) &
-          deallocate(structure_out%zion)
-       end if
-       if (.not. associated(structure_out%zion)) then
-         allocate(structure_out%zion(size(structure_in%zion, 1)))
-       end if
-       structure_out%zion = structure_in%zion
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%zion'
-     end if
- 
-     if (associated(structure_in%imp_flag)) then
-       if (associated(structure_out%imp_flag)) then
-         if (size(structure_in%imp_flag) &
-          /= size(structure_out%imp_flag)) &
-          deallocate(structure_out%imp_flag)
-       end if
-       if (.not. associated(structure_out%imp_flag)) then
-         allocate(structure_out%imp_flag(size(structure_in%imp_flag, 1)))
-       end if
-       structure_out%imp_flag = structure_in%imp_flag
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%imp_flag'
-     end if
- 
-     if (associated(structure_in%rot_imp_flag)) then
-       if (associated(structure_out%rot_imp_flag)) then
-         if (size(structure_in%rot_imp_flag) &
-          /= size(structure_out%rot_imp_flag)) &
-          deallocate(structure_out%rot_imp_flag)
-       end if
-       if (.not. associated(structure_out%rot_imp_flag)) then
-         allocate(structure_out%rot_imp_flag(size(structure_in%rot_imp_flag, 1)))
-       end if
-       structure_out%rot_imp_flag = structure_in%rot_imp_flag
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%rot_imp_flag'
-     end if
- 
-     if (associated(structure_in%pellet_amn)) then
-       if (associated(structure_out%pellet_amn)) then
-         if (size(structure_in%pellet_amn) &
-          /= size(structure_out%pellet_amn)) &
-          deallocate(structure_out%pellet_amn)
-       end if
-       if (.not. associated(structure_out%pellet_amn)) then
-         allocate(structure_out%pellet_amn(size(structure_in%pellet_amn, 1)))
-       end if
-       structure_out%pellet_amn = structure_in%pellet_amn
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%pellet_amn'
-     end if
- 
-     if (associated(structure_in%pellet_zn)) then
-       if (associated(structure_out%pellet_zn)) then
-         if (size(structure_in%pellet_zn) &
-          /= size(structure_out%pellet_zn)) &
-          deallocate(structure_out%pellet_zn)
-       end if
-       if (.not. associated(structure_out%pellet_zn)) then
-         allocate(structure_out%pellet_zn(size(structure_in%pellet_zn, 1)))
-       end if
-       structure_out%pellet_zn = structure_in%pellet_zn
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%pellet_zn'
-     end if
- 
-     if (associated(structure_in%nbi_amn)) then
-       if (associated(structure_out%nbi_amn)) then
-         if (size(structure_in%nbi_amn) &
-          /= size(structure_out%nbi_amn)) &
-          deallocate(structure_out%nbi_amn)
-       end if
-       if (.not. associated(structure_out%nbi_amn)) then
-         allocate(structure_out%nbi_amn(size(structure_in%nbi_amn, 1)))
-       end if
-       structure_out%nbi_amn = structure_in%nbi_amn
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%nbi_amn'
-     end if
- 
-     if (associated(structure_in%nbi_zn)) then
-       if (associated(structure_out%nbi_zn)) then
-         if (size(structure_in%nbi_zn) &
-          /= size(structure_out%nbi_zn)) &
-          deallocate(structure_out%nbi_zn)
-       end if
-       if (.not. associated(structure_out%nbi_zn)) then
-         allocate(structure_out%nbi_zn(size(structure_in%nbi_zn, 1)))
-       end if
-       structure_out%nbi_zn = structure_in%nbi_zn
-       if (verbose > 0) write(iu6, *) 'copied scenario_composition%nbi_zn'
-     end if
- 
-   end subroutine copy_type_scenario_composition
- 
-   subroutine copy_type_scenario_centre(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario_centre), intent(in) :: structure_in
-     type (type_scenario_centre), intent(inout) :: structure_out
- 
-     call copy_type_scenario_ref(structure_in%te0, structure_out%te0)
- 
-     call copy_type_scenario_ref(structure_in%ti0, structure_out%ti0)
- 
-     call copy_type_scenario_ref(structure_in%ne0, structure_out%ne0)
- 
-     call copy_type_scenario_ref(structure_in%ni0, structure_out%ni0)
- 
-     call copy_type_scenario_ref(structure_in%shift0, structure_out%shift0)
- 
-     call copy_type_scenario_ref(structure_in%psi0, structure_out%psi0)
- 
-     call copy_type_scenario_ref(structure_in%phi0, structure_out%phi0)
- 
-     call copy_type_scenario_ref(structure_in%q0, structure_out%q0)
- 
-     call copy_type_scenario_ref(structure_in%Rmag, structure_out%Rmag)
- 
-     call copy_type_scenario_ref(structure_in%Zmag, structure_out%Zmag)
- 
-     call copy_type_scenario_ref(structure_in%vtor_0, structure_out%vtor_0)
- 
-   end subroutine copy_type_scenario_centre
- 
-   subroutine copy_type_scenario(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_scenario), intent(in) :: structure_in
-     type (type_scenario), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_scenario_centre(structure_in%centre, structure_out%centre)
- 
-     call copy_type_scenario_composition(structure_in%composition, structure_out%composition)
- 
-     call copy_type_scenario_configuration(structure_in%configs, structure_out%configs)
- 
-     call copy_type_scenario_confinement(structure_in%confinement, structure_out%confinement)
- 
-     call copy_type_scenario_currents(structure_in%currents, structure_out%currents)
- 
-     call copy_type_scenario_edge(structure_in%edge, structure_out%edge)
- 
-     call copy_type_scenario_energy(structure_in%energy, structure_out%energy)
- 
-     call copy_type_eqgeometry(structure_in%eqgeometry, structure_out%eqgeometry)
- 
-     call copy_type_scenario_global(structure_in%global_param, structure_out%global_param)
- 
-     call copy_type_scenario_heat_power(structure_in%heat_power, structure_out%heat_power)
- 
-     call copy_type_scenario_itb(structure_in%itb, structure_out%itb)
- 
-     call copy_type_scenario_lim_div_wall(structure_in%lim_div_wall, structure_out%lim_div_wall)
- 
-     call copy_type_scenario_line_ave(structure_in%line_ave, structure_out%line_ave)
- 
-     call copy_type_scenario_neutron(structure_in%neutron, structure_out%neutron)
- 
-     call copy_type_scenario_ninety_five(structure_in%ninety_five, structure_out%ninety_five)
- 
-     call copy_type_scenario_pedestal(structure_in%pedestal, structure_out%pedestal)
- 
-     call copy_type_scenario_references(structure_in%references, structure_out%references)
- 
-     call copy_type_scenario_reactor(structure_in%reactor, structure_out%reactor)
- 
-     call copy_type_scenario_sol(structure_in%sol, structure_out%sol)
- 
-     call copy_type_scenario_vol_ave(structure_in%vol_ave, structure_out%vol_ave)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied scenario%time'
-     end if
- 
-   end subroutine copy_type_scenario
- 
-   subroutine copy_type_summary(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_summary), intent(in) :: structure_in
-     type (type_summary), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_reduced(structure_in%ip, structure_out%ip)
- 
-     call copy_type_reduced(structure_in%bvac_r, structure_out%bvac_r)
- 
-     call copy_type_reduced(structure_in%geom_axis_r, structure_out%geom_axis_r)
- 
-     call copy_type_reduced(structure_in%a_minor, structure_out%a_minor)
- 
-     call copy_type_reduced(structure_in%elongation, structure_out%elongation)
- 
-     call copy_type_reduced(structure_in%tria_lower, structure_out%tria_lower)
- 
-     call copy_type_reduced(structure_in%tria_upper, structure_out%tria_upper)
- 
-     call copy_type_reduced(structure_in%tev, structure_out%tev)
- 
-     call copy_type_reduced(structure_in%tiv, structure_out%tiv)
- 
-     call copy_type_reduced(structure_in%nev, structure_out%nev)
- 
-     call copy_type_reduced(structure_in%zeffv, structure_out%zeffv)
- 
-     call copy_type_reduced(structure_in%beta_pol, structure_out%beta_pol)
- 
-     call copy_type_reduced(structure_in%beta_tor, structure_out%beta_tor)
- 
-     call copy_type_reduced(structure_in%beta_normal, structure_out%beta_normal)
- 
-     call copy_type_reduced(structure_in%li, structure_out%li)
- 
-     call copy_type_reduced(structure_in%volume, structure_out%volume)
- 
-     call copy_type_reduced(structure_in%area, structure_out%area)
- 
-     call copy_type_reduced(structure_in%main_ion1_z, structure_out%main_ion1_z)
- 
-     call copy_type_reduced(structure_in%main_ion1_a, structure_out%main_ion1_a)
- 
-     call copy_type_reduced(structure_in%main_ion2_z, structure_out%main_ion2_z)
- 
-     call copy_type_reduced(structure_in%main_ion2_a, structure_out%main_ion2_a)
- 
-     call copy_type_reduced(structure_in%impur1_z, structure_out%impur1_z)
- 
-     call copy_type_reduced(structure_in%impur1_a, structure_out%impur1_a)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied summary%time'
-     end if
- 
-   end subroutine copy_type_summary
- 
-   subroutine copy_type_vessel(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_vessel), intent(in) :: structure_in
-     type (type_vessel), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_rz1D(structure_in%position, structure_out%position)
- 
-   end subroutine copy_type_vessel
- 
-   subroutine copy_type_theta_info(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_theta_info), intent(in) :: structure_in
-     type (type_theta_info), intent(inout) :: structure_out
- 
-     if (associated(structure_in%angl_type)) then
-       if (associated(structure_out%angl_type)) then
-         if (size(structure_in%angl_type) &
-          /= size(structure_out%angl_type)) &
-          deallocate(structure_out%angl_type)
-       end if
-       if (.not. associated(structure_out%angl_type)) then
-         allocate(structure_out%angl_type(size(structure_in%angl_type, 1)))
-       end if
-       structure_out%angl_type = structure_in%angl_type
-       if (verbose > 0) write(iu6, *) 'copied theta_info%angl_type'
-     end if
- 
-     if (associated(structure_in%th2th_pol)) then
-       if (associated(structure_out%th2th_pol)) then
-         if (size(structure_in%th2th_pol) &
-          /= size(structure_out%th2th_pol)) &
-          deallocate(structure_out%th2th_pol)
-       end if
-       if (.not. associated(structure_out%th2th_pol)) then
-         allocate(structure_out%th2th_pol(size(structure_in%th2th_pol, 1), &
-          size(structure_in%th2th_pol, 2)))
-       end if
-       structure_out%th2th_pol = structure_in%th2th_pol
-       if (verbose > 0) write(iu6, *) 'copied theta_info%th2th_pol'
-     end if
- 
-   end subroutine copy_type_theta_info
- 
-   subroutine copy_type_waves_2dgrid(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_2dgrid), intent(in) :: structure_in
-     type (type_waves_2dgrid), intent(inout) :: structure_out
- 
-     if (associated(structure_in%psin)) then
-       if (associated(structure_out%psin)) then
-         if (size(structure_in%psin) &
-          /= size(structure_out%psin)) &
-          deallocate(structure_out%psin)
-       end if
-       if (.not. associated(structure_out%psin)) then
-         allocate(structure_out%psin(size(structure_in%psin, 1), &
-          size(structure_in%psin, 2)))
-       end if
-       structure_out%psin = structure_in%psin
-       if (verbose > 0) write(iu6, *) 'copied waves_2dgrid%psin'
-     end if
- 
-     if (associated(structure_in%theta)) then
-       if (associated(structure_out%theta)) then
-         if (size(structure_in%theta) &
-          /= size(structure_out%theta)) &
-          deallocate(structure_out%theta)
-       end if
-       if (.not. associated(structure_out%theta)) then
-         allocate(structure_out%theta(size(structure_in%theta, 1), &
-          size(structure_in%theta, 2)))
-       end if
-       structure_out%theta = structure_in%theta
-       if (verbose > 0) write(iu6, *) 'copied waves_2dgrid%theta'
-     end if
- 
-     if (associated(structure_in%npsin)) then
-       if (associated(structure_out%npsin)) then
-         if (size(structure_in%npsin) &
-          /= size(structure_out%npsin)) &
-          deallocate(structure_out%npsin)
-       end if
-       if (.not. associated(structure_out%npsin)) then
-         allocate(structure_out%npsin(size(structure_in%npsin, 1)))
-       end if
-       structure_out%npsin = structure_in%npsin
-       if (verbose > 0) write(iu6, *) 'copied waves_2dgrid%npsin'
-     end if
- 
-     if (associated(structure_in%ntheta)) then
-       if (associated(structure_out%ntheta)) then
-         if (size(structure_in%ntheta) &
-          /= size(structure_out%ntheta)) &
-          deallocate(structure_out%ntheta)
-       end if
-       if (.not. associated(structure_out%ntheta)) then
-         allocate(structure_out%ntheta(size(structure_in%ntheta, 1)))
-       end if
-       structure_out%ntheta = structure_in%ntheta
-       if (verbose > 0) write(iu6, *) 'copied waves_2dgrid%ntheta'
-     end if
- 
-     call copy_type_rz3D(structure_in%rz_position, structure_out%rz_position)
- 
-     call copy_type_theta_info(structure_in%theta_info, structure_out%theta_info)
- 
-   end subroutine copy_type_waves_2dgrid
- 
-   subroutine copy_type_waves_global_param(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_global_param), intent(in) :: structure_in
-     type (type_waves_global_param), intent(inout) :: structure_out
- 
-     if (associated(structure_in%frequency)) then
-       if (associated(structure_out%frequency)) then
-         if (size(structure_in%frequency) &
-          /= size(structure_out%frequency)) &
-          deallocate(structure_out%frequency)
-       end if
-       if (.not. associated(structure_out%frequency)) then
-         allocate(structure_out%frequency(size(structure_in%frequency, 1)))
-       end if
-       structure_out%frequency = structure_in%frequency
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%frequency'
-     end if
- 
-     if (associated(structure_in%name)) then
-       if (associated(structure_out%name)) then
-         if (size(structure_in%name) &
-          /= size(structure_out%name)) &
-          deallocate(structure_out%name)
-       end if
-       if (.not. associated(structure_out%name)) then
-         allocate(structure_out%name(size(structure_in%name)))
-       end if
-       structure_out%name = structure_in%name
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%name'
-     end if
- 
-     if (associated(structure_in%type)) then
-       if (associated(structure_out%type)) then
-         if (size(structure_in%type) &
-          /= size(structure_out%type)) &
-          deallocate(structure_out%type)
-       end if
-       if (.not. associated(structure_out%type)) then
-         allocate(structure_out%type(size(structure_in%type)))
-       end if
-       structure_out%type = structure_in%type
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%type'
-     end if
- 
-     if (associated(structure_in%nntor)) then
-       if (associated(structure_out%nntor)) then
-         if (size(structure_in%nntor) &
-          /= size(structure_out%nntor)) &
-          deallocate(structure_out%nntor)
-       end if
-       if (.not. associated(structure_out%nntor)) then
-         allocate(structure_out%nntor(size(structure_in%nntor, 1)))
-       end if
-       structure_out%nntor = structure_in%nntor
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%nntor'
-     end if
- 
-     if (associated(structure_in%ntor)) then
-       if (associated(structure_out%ntor)) then
-         if (size(structure_in%ntor) &
-          /= size(structure_out%ntor)) &
-          deallocate(structure_out%ntor)
-       end if
-       if (.not. associated(structure_out%ntor)) then
-         allocate(structure_out%ntor(size(structure_in%ntor, 1), &
-          size(structure_in%ntor, 2)))
-       end if
-       structure_out%ntor = structure_in%ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%ntor'
-     end if
- 
-     if (associated(structure_in%f_assumption)) then
-       if (associated(structure_out%f_assumption)) then
-         if (size(structure_in%f_assumption) &
-          /= size(structure_out%f_assumption)) &
-          deallocate(structure_out%f_assumption)
-       end if
-       if (.not. associated(structure_out%f_assumption)) then
-         allocate(structure_out%f_assumption(size(structure_in%f_assumption, 1), &
-          size(structure_in%f_assumption, 2)))
-       end if
-       structure_out%f_assumption = structure_in%f_assumption
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%f_assumption'
-     end if
- 
-     if (associated(structure_in%power_tot)) then
-       if (associated(structure_out%power_tot)) then
-         if (size(structure_in%power_tot) &
-          /= size(structure_out%power_tot)) &
-          deallocate(structure_out%power_tot)
-       end if
-       if (.not. associated(structure_out%power_tot)) then
-         allocate(structure_out%power_tot(size(structure_in%power_tot, 1)))
-       end if
-       structure_out%power_tot = structure_in%power_tot
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%power_tot'
-     end if
- 
-     if (associated(structure_in%p_frac_ntor)) then
-       if (associated(structure_out%p_frac_ntor)) then
-         if (size(structure_in%p_frac_ntor) &
-          /= size(structure_out%p_frac_ntor)) &
-          deallocate(structure_out%p_frac_ntor)
-       end if
-       if (.not. associated(structure_out%p_frac_ntor)) then
-         allocate(structure_out%p_frac_ntor(size(structure_in%p_frac_ntor, 1), &
-          size(structure_in%p_frac_ntor, 2)))
-       end if
-       structure_out%p_frac_ntor = structure_in%p_frac_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%p_frac_ntor'
-     end if
- 
-     if (associated(structure_in%power_i)) then
-       if (associated(structure_out%power_i)) then
-         if (size(structure_in%power_i) &
-          /= size(structure_out%power_i)) &
-          deallocate(structure_out%power_i)
-       end if
-       if (.not. associated(structure_out%power_i)) then
-         allocate(structure_out%power_i(size(structure_in%power_i, 1), &
-          size(structure_in%power_i, 2)))
-       end if
-       structure_out%power_i = structure_in%power_i
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%power_i'
-     end if
- 
-     if (associated(structure_in%power_e)) then
-       if (associated(structure_out%power_e)) then
-         if (size(structure_in%power_e) &
-          /= size(structure_out%power_e)) &
-          deallocate(structure_out%power_e)
-       end if
-       if (.not. associated(structure_out%power_e)) then
-         allocate(structure_out%power_e(size(structure_in%power_e, 1)))
-       end if
-       structure_out%power_e = structure_in%power_e
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%power_e'
-     end if
- 
-     if (associated(structure_in%power_i_ntor)) then
-       if (associated(structure_out%power_i_ntor)) then
-         if (size(structure_in%power_i_ntor) &
-          /= size(structure_out%power_i_ntor)) &
-          deallocate(structure_out%power_i_ntor)
-       end if
-       if (.not. associated(structure_out%power_i_ntor)) then
-         allocate(structure_out%power_i_ntor(size(structure_in%power_i_ntor, 1), &
-          size(structure_in%power_i_ntor, 2), &
-          size(structure_in%power_i_ntor, 3)))
-       end if
-       structure_out%power_i_ntor = structure_in%power_i_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%power_i_ntor'
-     end if
- 
-     if (associated(structure_in%power_e_ntor)) then
-       if (associated(structure_out%power_e_ntor)) then
-         if (size(structure_in%power_e_ntor) &
-          /= size(structure_out%power_e_ntor)) &
-          deallocate(structure_out%power_e_ntor)
-       end if
-       if (.not. associated(structure_out%power_e_ntor)) then
-         allocate(structure_out%power_e_ntor(size(structure_in%power_e_ntor, 1), &
-          size(structure_in%power_e_ntor, 2)))
-       end if
-       structure_out%power_e_ntor = structure_in%power_e_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%power_e_ntor'
-     end if
- 
-     if (associated(structure_in%code_type)) then
-       if (associated(structure_out%code_type)) then
-         if (size(structure_in%code_type) &
-          /= size(structure_out%code_type)) &
-          deallocate(structure_out%code_type)
-       end if
-       if (.not. associated(structure_out%code_type)) then
-         allocate(structure_out%code_type(size(structure_in%code_type, 1)))
-       end if
-       structure_out%code_type = structure_in%code_type
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%code_type'
-     end if
- 
-     if (associated(structure_in%freq_point)) then
-       if (associated(structure_out%freq_point)) then
-         if (size(structure_in%freq_point) &
-          /= size(structure_out%freq_point)) &
-          deallocate(structure_out%freq_point)
-       end if
-       if (.not. associated(structure_out%freq_point)) then
-         allocate(structure_out%freq_point(size(structure_in%freq_point, 1)))
-       end if
-       structure_out%freq_point = structure_in%freq_point
-       if (verbose > 0) write(iu6, *) 'copied waves_global_param%freq_point'
-     end if
- 
-   end subroutine copy_type_waves_global_param
- 
-   subroutine copy_type_waves_dep_profiles_flux_surf_avr(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_dep_profiles_flux_surf_avr), intent(in) :: structure_in
-     type (type_waves_dep_profiles_flux_surf_avr), intent(inout) :: structure_out
- 
-     if (associated(structure_in%powerd_tot)) then
-       if (associated(structure_out%powerd_tot)) then
-         if (size(structure_in%powerd_tot) &
-          /= size(structure_out%powerd_tot)) &
-          deallocate(structure_out%powerd_tot)
-       end if
-       if (.not. associated(structure_out%powerd_tot)) then
-         allocate(structure_out%powerd_tot(size(structure_in%powerd_tot, 1), &
-          size(structure_in%powerd_tot, 2)))
-       end if
-       structure_out%powerd_tot = structure_in%powerd_tot
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_flux_surf_avr%powerd_tot'
-     end if
- 
-     if (associated(structure_in%powerd_e)) then
-       if (associated(structure_out%powerd_e)) then
-         if (size(structure_in%powerd_e) &
-          /= size(structure_out%powerd_e)) &
-          deallocate(structure_out%powerd_e)
-       end if
-       if (.not. associated(structure_out%powerd_e)) then
-         allocate(structure_out%powerd_e(size(structure_in%powerd_e, 1), &
-          size(structure_in%powerd_e, 2)))
-       end if
-       structure_out%powerd_e = structure_in%powerd_e
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_flux_surf_avr%powerd_e'
-     end if
- 
-     if (associated(structure_in%powerd_i)) then
-       if (associated(structure_out%powerd_i)) then
-         if (size(structure_in%powerd_i) &
-          /= size(structure_out%powerd_i)) &
-          deallocate(structure_out%powerd_i)
-       end if
-       if (.not. associated(structure_out%powerd_i)) then
-         allocate(structure_out%powerd_i(size(structure_in%powerd_i, 1), &
-          size(structure_in%powerd_i, 2), &
-          size(structure_in%powerd_i, 3)))
-       end if
-       structure_out%powerd_i = structure_in%powerd_i
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_flux_surf_avr%powerd_i'
-     end if
- 
-     if (associated(structure_in%powerd_ntor)) then
-       if (associated(structure_out%powerd_ntor)) then
-         if (size(structure_in%powerd_ntor) &
-          /= size(structure_out%powerd_ntor)) &
-          deallocate(structure_out%powerd_ntor)
-       end if
-       if (.not. associated(structure_out%powerd_ntor)) then
-         allocate(structure_out%powerd_ntor(size(structure_in%powerd_ntor, 1), &
-          size(structure_in%powerd_ntor, 2), &
-          size(structure_in%powerd_ntor, 3)))
-       end if
-       structure_out%powerd_ntor = structure_in%powerd_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_flux_surf_avr%powerd_ntor'
-     end if
- 
-     if (associated(structure_in%powerd_entor)) then
-       if (associated(structure_out%powerd_entor)) then
-         if (size(structure_in%powerd_entor) &
-          /= size(structure_out%powerd_entor)) &
-          deallocate(structure_out%powerd_entor)
-       end if
-       if (.not. associated(structure_out%powerd_entor)) then
-         allocate(structure_out%powerd_entor(size(structure_in%powerd_entor, 1), &
-          size(structure_in%powerd_entor, 2), &
-          size(structure_in%powerd_entor, 3)))
-       end if
-       structure_out%powerd_entor = structure_in%powerd_entor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_flux_surf_avr%powerd_entor'
-     end if
- 
-     if (associated(structure_in%powerd_intor)) then
-       if (associated(structure_out%powerd_intor)) then
-         if (size(structure_in%powerd_intor) &
-          /= size(structure_out%powerd_intor)) &
-          deallocate(structure_out%powerd_intor)
-       end if
-       if (.not. associated(structure_out%powerd_intor)) then
-         allocate(structure_out%powerd_intor(size(structure_in%powerd_intor, 1), &
-          size(structure_in%powerd_intor, 2), &
-          size(structure_in%powerd_intor, 3), &
-          size(structure_in%powerd_intor, 4)))
-       end if
-       structure_out%powerd_intor = structure_in%powerd_intor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_flux_surf_avr%powerd_intor'
-     end if
- 
-   end subroutine copy_type_waves_dep_profiles_flux_surf_avr
- 
-   subroutine copy_type_waves_dep_profiles_volume_intgr(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_dep_profiles_volume_intgr), intent(in) :: structure_in
-     type (type_waves_dep_profiles_volume_intgr), intent(inout) :: structure_out
- 
-     if (associated(structure_in%power_tot)) then
-       if (associated(structure_out%power_tot)) then
-         if (size(structure_in%power_tot) &
-          /= size(structure_out%power_tot)) &
-          deallocate(structure_out%power_tot)
-       end if
-       if (.not. associated(structure_out%power_tot)) then
-         allocate(structure_out%power_tot(size(structure_in%power_tot, 1), &
-          size(structure_in%power_tot, 2)))
-       end if
-       structure_out%power_tot = structure_in%power_tot
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_volume_intgr%power_tot'
-     end if
- 
-     if (associated(structure_in%power_e)) then
-       if (associated(structure_out%power_e)) then
-         if (size(structure_in%power_e) &
-          /= size(structure_out%power_e)) &
-          deallocate(structure_out%power_e)
-       end if
-       if (.not. associated(structure_out%power_e)) then
-         allocate(structure_out%power_e(size(structure_in%power_e, 1), &
-          size(structure_in%power_e, 2)))
-       end if
-       structure_out%power_e = structure_in%power_e
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_volume_intgr%power_e'
-     end if
- 
-     if (associated(structure_in%power_i)) then
-       if (associated(structure_out%power_i)) then
-         if (size(structure_in%power_i) &
-          /= size(structure_out%power_i)) &
-          deallocate(structure_out%power_i)
-       end if
-       if (.not. associated(structure_out%power_i)) then
-         allocate(structure_out%power_i(size(structure_in%power_i, 1), &
-          size(structure_in%power_i, 2), &
-          size(structure_in%power_i, 3)))
-       end if
-       structure_out%power_i = structure_in%power_i
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_volume_intgr%power_i'
-     end if
- 
-     if (associated(structure_in%power_ntor)) then
-       if (associated(structure_out%power_ntor)) then
-         if (size(structure_in%power_ntor) &
-          /= size(structure_out%power_ntor)) &
-          deallocate(structure_out%power_ntor)
-       end if
-       if (.not. associated(structure_out%power_ntor)) then
-         allocate(structure_out%power_ntor(size(structure_in%power_ntor, 1), &
-          size(structure_in%power_ntor, 2), &
-          size(structure_in%power_ntor, 3)))
-       end if
-       structure_out%power_ntor = structure_in%power_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_volume_intgr%power_ntor'
-     end if
- 
-     if (associated(structure_in%power_e_ntor)) then
-       if (associated(structure_out%power_e_ntor)) then
-         if (size(structure_in%power_e_ntor) &
-          /= size(structure_out%power_e_ntor)) &
-          deallocate(structure_out%power_e_ntor)
-       end if
-       if (.not. associated(structure_out%power_e_ntor)) then
-         allocate(structure_out%power_e_ntor(size(structure_in%power_e_ntor, 1), &
-          size(structure_in%power_e_ntor, 2), &
-          size(structure_in%power_e_ntor, 3)))
-       end if
-       structure_out%power_e_ntor = structure_in%power_e_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_volume_intgr%power_e_ntor'
-     end if
- 
-     if (associated(structure_in%power_i_ntor)) then
-       if (associated(structure_out%power_i_ntor)) then
-         if (size(structure_in%power_i_ntor) &
-          /= size(structure_out%power_i_ntor)) &
-          deallocate(structure_out%power_i_ntor)
-       end if
-       if (.not. associated(structure_out%power_i_ntor)) then
-         allocate(structure_out%power_i_ntor(size(structure_in%power_i_ntor, 1), &
-          size(structure_in%power_i_ntor, 2), &
-          size(structure_in%power_i_ntor, 3), &
-          size(structure_in%power_i_ntor, 4)))
-       end if
-       structure_out%power_i_ntor = structure_in%power_i_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_volume_intgr%power_i_ntor'
-     end if
- 
-     if (associated(structure_in%lin_curr_dr)) then
-       if (associated(structure_out%lin_curr_dr)) then
-         if (size(structure_in%lin_curr_dr) &
-          /= size(structure_out%lin_curr_dr)) &
-          deallocate(structure_out%lin_curr_dr)
-       end if
-       if (.not. associated(structure_out%lin_curr_dr)) then
-         allocate(structure_out%lin_curr_dr(size(structure_in%lin_curr_dr, 1), &
-          size(structure_in%lin_curr_dr, 2), &
-          size(structure_in%lin_curr_dr, 3)))
-       end if
-       structure_out%lin_curr_dr = structure_in%lin_curr_dr
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_volume_intgr%lin_curr_dr'
-     end if
- 
-   end subroutine copy_type_waves_dep_profiles_volume_intgr
- 
-   subroutine copy_type_waves_dep_profiles_two_dim(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_dep_profiles_two_dim), intent(in) :: structure_in
-     type (type_waves_dep_profiles_two_dim), intent(inout) :: structure_out
- 
-     if (associated(structure_in%powerd_tot)) then
-       if (associated(structure_out%powerd_tot)) then
-         if (size(structure_in%powerd_tot) &
-          /= size(structure_out%powerd_tot)) &
-          deallocate(structure_out%powerd_tot)
-       end if
-       if (.not. associated(structure_out%powerd_tot)) then
-         allocate(structure_out%powerd_tot(size(structure_in%powerd_tot, 1), &
-          size(structure_in%powerd_tot, 2), &
-          size(structure_in%powerd_tot, 3)))
-       end if
-       structure_out%powerd_tot = structure_in%powerd_tot
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_two_dim%powerd_tot'
-     end if
- 
-     if (associated(structure_in%powerd_e)) then
-       if (associated(structure_out%powerd_e)) then
-         if (size(structure_in%powerd_e) &
-          /= size(structure_out%powerd_e)) &
-          deallocate(structure_out%powerd_e)
-       end if
-       if (.not. associated(structure_out%powerd_e)) then
-         allocate(structure_out%powerd_e(size(structure_in%powerd_e, 1), &
-          size(structure_in%powerd_e, 2), &
-          size(structure_in%powerd_e, 3)))
-       end if
-       structure_out%powerd_e = structure_in%powerd_e
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_two_dim%powerd_e'
-     end if
- 
-     if (associated(structure_in%powerd_i)) then
-       if (associated(structure_out%powerd_i)) then
-         if (size(structure_in%powerd_i) &
-          /= size(structure_out%powerd_i)) &
-          deallocate(structure_out%powerd_i)
-       end if
-       if (.not. associated(structure_out%powerd_i)) then
-         allocate(structure_out%powerd_i(size(structure_in%powerd_i, 1), &
-          size(structure_in%powerd_i, 2), &
-          size(structure_in%powerd_i, 3), &
-          size(structure_in%powerd_i, 4)))
-       end if
-       structure_out%powerd_i = structure_in%powerd_i
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_two_dim%powerd_i'
-     end if
- 
-     if (associated(structure_in%powerd_ntor)) then
-       if (associated(structure_out%powerd_ntor)) then
-         if (size(structure_in%powerd_ntor) &
-          /= size(structure_out%powerd_ntor)) &
-          deallocate(structure_out%powerd_ntor)
-       end if
-       if (.not. associated(structure_out%powerd_ntor)) then
-         allocate(structure_out%powerd_ntor(size(structure_in%powerd_ntor, 1), &
-          size(structure_in%powerd_ntor, 2), &
-          size(structure_in%powerd_ntor, 3), &
-          size(structure_in%powerd_ntor, 4)))
-       end if
-       structure_out%powerd_ntor = structure_in%powerd_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_two_dim%powerd_ntor'
-     end if
- 
-     if (associated(structure_in%powerd_entor)) then
-       if (associated(structure_out%powerd_entor)) then
-         if (size(structure_in%powerd_entor) &
-          /= size(structure_out%powerd_entor)) &
-          deallocate(structure_out%powerd_entor)
-       end if
-       if (.not. associated(structure_out%powerd_entor)) then
-         allocate(structure_out%powerd_entor(size(structure_in%powerd_entor, 1), &
-          size(structure_in%powerd_entor, 2), &
-          size(structure_in%powerd_entor, 3), &
-          size(structure_in%powerd_entor, 4)))
-       end if
-       structure_out%powerd_entor = structure_in%powerd_entor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_two_dim%powerd_entor'
-     end if
- 
-     if (associated(structure_in%powerd_intor)) then
-       if (associated(structure_out%powerd_intor)) then
-         if (size(structure_in%powerd_intor) &
-          /= size(structure_out%powerd_intor)) &
-          deallocate(structure_out%powerd_intor)
-       end if
-       if (.not. associated(structure_out%powerd_intor)) then
-         allocate(structure_out%powerd_intor(size(structure_in%powerd_intor, 1), &
-          size(structure_in%powerd_intor, 2), &
-          size(structure_in%powerd_intor, 3), &
-          size(structure_in%powerd_intor, 4), &
-          size(structure_in%powerd_intor, 5)))
-       end if
-       structure_out%powerd_intor = structure_in%powerd_intor
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_two_dim%powerd_intor'
-     end if
- 
-     if (associated(structure_in%powerd_iharm)) then
-       if (associated(structure_out%powerd_iharm)) then
-         if (size(structure_in%powerd_iharm) &
-          /= size(structure_out%powerd_iharm)) &
-          deallocate(structure_out%powerd_iharm)
-       end if
-       if (.not. associated(structure_out%powerd_iharm)) then
-         allocate(structure_out%powerd_iharm(size(structure_in%powerd_iharm, 1), &
-          size(structure_in%powerd_iharm, 2), &
-          size(structure_in%powerd_iharm, 3), &
-          size(structure_in%powerd_iharm, 4), &
-          size(structure_in%powerd_iharm, 5)))
-       end if
-       structure_out%powerd_iharm = structure_in%powerd_iharm
-       if (verbose > 0) write(iu6, *) 'copied waves_dep_profiles_two_dim%powerd_iharm'
-     end if
- 
-   end subroutine copy_type_waves_dep_profiles_two_dim
- 
-   subroutine copy_type_waves_dep_profiles(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_dep_profiles), intent(in) :: structure_in
-     type (type_waves_dep_profiles), intent(inout) :: structure_out
- 
-     call copy_type_waves_2dgrid(structure_in%grid, structure_out%grid)
- 
-     call copy_type_waves_dep_profiles_volume_intgr(structure_in%volume_intgr, structure_out%volume_intgr)
- 
-     call copy_type_waves_dep_profiles_flux_surf_avr(structure_in%flux_surf_av, structure_out%flux_surf_av)
- 
-     call copy_type_waves_dep_profiles_two_dim(structure_in%profiles_2d, structure_out%profiles_2d)
- 
-   end subroutine copy_type_waves_dep_profiles
- 
-   subroutine copy_type_waves_rtwavevector(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_rtwavevector), intent(in) :: structure_in
-     type (type_waves_rtwavevector), intent(inout) :: structure_out
- 
-     if (associated(structure_in%kr)) then
-       if (associated(structure_out%kr)) then
-         if (size(structure_in%kr) &
-          /= size(structure_out%kr)) &
-          deallocate(structure_out%kr)
-       end if
-       if (.not. associated(structure_out%kr)) then
-         allocate(structure_out%kr(size(structure_in%kr, 1), &
-          size(structure_in%kr, 2), &
-          size(structure_in%kr, 3)))
-       end if
-       structure_out%kr = structure_in%kr
-       if (verbose > 0) write(iu6, *) 'copied waves_rtwavevector%kr'
-     end if
- 
-     if (associated(structure_in%kz)) then
-       if (associated(structure_out%kz)) then
-         if (size(structure_in%kz) &
-          /= size(structure_out%kz)) &
-          deallocate(structure_out%kz)
-       end if
-       if (.not. associated(structure_out%kz)) then
-         allocate(structure_out%kz(size(structure_in%kz, 1), &
-          size(structure_in%kz, 2), &
-          size(structure_in%kz, 3)))
-       end if
-       structure_out%kz = structure_in%kz
-       if (verbose > 0) write(iu6, *) 'copied waves_rtwavevector%kz'
-     end if
- 
-     if (associated(structure_in%npar)) then
-       if (associated(structure_out%npar)) then
-         if (size(structure_in%npar) &
-          /= size(structure_out%npar)) &
-          deallocate(structure_out%npar)
-       end if
-       if (.not. associated(structure_out%npar)) then
-         allocate(structure_out%npar(size(structure_in%npar, 1), &
-          size(structure_in%npar, 2), &
-          size(structure_in%npar, 3)))
-       end if
-       structure_out%npar = structure_in%npar
-       if (verbose > 0) write(iu6, *) 'copied waves_rtwavevector%npar'
-     end if
- 
-     if (associated(structure_in%nperp)) then
-       if (associated(structure_out%nperp)) then
-         if (size(structure_in%nperp) &
-          /= size(structure_out%nperp)) &
-          deallocate(structure_out%nperp)
-       end if
-       if (.not. associated(structure_out%nperp)) then
-         allocate(structure_out%nperp(size(structure_in%nperp, 1), &
-          size(structure_in%nperp, 2), &
-          size(structure_in%nperp, 3)))
-       end if
-       structure_out%nperp = structure_in%nperp
-       if (verbose > 0) write(iu6, *) 'copied waves_rtwavevector%nperp'
-     end if
- 
-     if (associated(structure_in%ntor)) then
-       if (associated(structure_out%ntor)) then
-         if (size(structure_in%ntor) &
-          /= size(structure_out%ntor)) &
-          deallocate(structure_out%ntor)
-       end if
-       if (.not. associated(structure_out%ntor)) then
-         allocate(structure_out%ntor(size(structure_in%ntor, 1), &
-          size(structure_in%ntor, 2), &
-          size(structure_in%ntor, 3)))
-       end if
-       structure_out%ntor = structure_in%ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_rtwavevector%ntor'
-     end if
- 
-     if (associated(structure_in%var_ntor)) then
-       if (associated(structure_out%var_ntor)) then
-         if (size(structure_in%var_ntor) &
-          /= size(structure_out%var_ntor)) &
-          deallocate(structure_out%var_ntor)
-       end if
-       if (.not. associated(structure_out%var_ntor)) then
-         allocate(structure_out%var_ntor(size(structure_in%var_ntor, 1)))
-       end if
-       structure_out%var_ntor = structure_in%var_ntor
-       if (verbose > 0) write(iu6, *) 'copied waves_rtwavevector%var_ntor'
-     end if
- 
-   end subroutine copy_type_waves_rtwavevector
- 
-   subroutine copy_type_waves_rtposition(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves_rtposition), intent(in) :: structure_in
-     type (type_waves_rtposition), intent(inout) :: structure_out
- 
-     if (associated(structure_in%r)) then
-       if (associated(structure_out%r)) then
-         if (size(structure_in%r) &
-          /= size(structure_out%r)) &
-          deallocate(structure_out%r)
-       end if
-       if (.not. associated(structure_out%r)) then
-         allocate(structure_out%r(size(structure_in%r, 1), &
-          size(structure_in%r, 2), &
-          size(structure_in%r, 3)))
-       end if
-       structure_out%r = structure_in%r
-       if (verbose > 0) write(iu6, *) 'copied waves_rtposition%r'
-     end if
- 
-     if (associated(structure_in%z)) then
-       if (associated(structure_out%z)) then
-         if (size(structure_in%z) &
-          /= size(structure_out%z)) &
-          deallocate(structure_out%z)
-       end if
-       if (.not. associated(structure_out%z)) then
-         allocate(structure_out%z(size(structure_in%z, 1), &
-          size(structure_in%z, 2), &
-          size(structure_in%z, 3)))
-       end if
-       structure_out%z = structure_in%z
-       if (verbose > 0) write(iu6, *) 'copied waves_rtposition%z'
-     end if
- 
-     if (associated(structure_in%psin)) then
-       if (associated(structure_out%psin)) then
-         if (size(structure_in%psin) &
-          /= size(structure_out%psin)) &
-          deallocate(structure_out%psin)
-       end if
-       if (.not. associated(structure_out%psin)) then
-         allocate(structure_out%psin(size(structure_in%psin, 1), &
-          size(structure_in%psin, 2), &
-          size(structure_in%psin, 3)))
-       end if
-       structure_out%psin = structure_in%psin
-       if (verbose > 0) write(iu6, *) 'copied waves_rtposition%psin'
-     end if
- 
-     if (associated(structure_in%theta)) then
-       if (associated(structure_out%theta)) then
-         if (size(structure_in%theta) &
-          /= size(structure_out%theta)) &
-          deallocate(structure_out%theta)
-       end if
-       if (.not. associated(structure_out%theta)) then
-         allocate(structure_out%theta(size(structure_in%theta, 1), &
-          size(structure_in%theta, 2), &
-          size(structure_in%theta, 3)))
-       end if
-       structure_out%theta = structure_in%theta
-       if (verbose > 0) write(iu6, *) 'copied waves_rtposition%theta'
-     end if
- 
-     if (associated(structure_in%phi)) then
-       if (associated(structure_out%phi)) then
-         if (size(structure_in%phi) &
-          /= size(structure_out%phi)) &
-          deallocate(structure_out%phi)
-       end if
-       if (.not. associated(structure_out%phi)) then
-         allocate(structure_out%phi(size(structure_in%phi, 1), &
-          size(structure_in%phi, 2), &
-          size(structure_in%phi, 3)))
-       end if
-       structure_out%phi = structure_in%phi
-       if (verbose > 0) write(iu6, *) 'copied waves_rtposition%phi'
-     end if
- 
-   end subroutine copy_type_waves_rtposition
- 
-   subroutine copy_type_polarization(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_polarization), intent(in) :: structure_in
-     type (type_polarization), intent(inout) :: structure_out
- 
-     if (associated(structure_in%epol_p)) then
-       if (associated(structure_out%epol_p)) then
-         if (size(structure_in%epol_p) &
-          /= size(structure_out%epol_p)) &
-          deallocate(structure_out%epol_p)
-       end if
-       if (.not. associated(structure_out%epol_p)) then
-         allocate(structure_out%epol_p(size(structure_in%epol_p, 1), &
-          size(structure_in%epol_p, 2), &
-          size(structure_in%epol_p, 3)))
-       end if
-       structure_out%epol_p = structure_in%epol_p
-       if (verbose > 0) write(iu6, *) 'copied polarization%epol_p'
-     end if
- 
-     if (associated(structure_in%epol_m)) then
-       if (associated(structure_out%epol_m)) then
-         if (size(structure_in%epol_m) &
-          /= size(structure_out%epol_m)) &
-          deallocate(structure_out%epol_m)
-       end if
-       if (.not. associated(structure_out%epol_m)) then
-         allocate(structure_out%epol_m(size(structure_in%epol_m, 1), &
-          size(structure_in%epol_m, 2), &
-          size(structure_in%epol_m, 3)))
-       end if
-       structure_out%epol_m = structure_in%epol_m
-       if (verbose > 0) write(iu6, *) 'copied polarization%epol_m'
-     end if
- 
-     if (associated(structure_in%epol_par)) then
-       if (associated(structure_out%epol_par)) then
-         if (size(structure_in%epol_par) &
-          /= size(structure_out%epol_par)) &
-          deallocate(structure_out%epol_par)
-       end if
-       if (.not. associated(structure_out%epol_par)) then
-         allocate(structure_out%epol_par(size(structure_in%epol_par, 1), &
-          size(structure_in%epol_par, 2), &
-          size(structure_in%epol_par, 3)))
-       end if
-       structure_out%epol_par = structure_in%epol_par
-       if (verbose > 0) write(iu6, *) 'copied polarization%epol_par'
-     end if
- 
-   end subroutine copy_type_polarization
- 
-   subroutine copy_type_powerflow(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_powerflow), intent(in) :: structure_in
-     type (type_powerflow), intent(inout) :: structure_out
- 
-     if (associated(structure_in%phi_perp)) then
-       if (associated(structure_out%phi_perp)) then
-         if (size(structure_in%phi_perp) &
-          /= size(structure_out%phi_perp)) &
-          deallocate(structure_out%phi_perp)
-       end if
-       if (.not. associated(structure_out%phi_perp)) then
-         allocate(structure_out%phi_perp(size(structure_in%phi_perp, 1), &
-          size(structure_in%phi_perp, 2), &
-          size(structure_in%phi_perp, 3)))
-       end if
-       structure_out%phi_perp = structure_in%phi_perp
-       if (verbose > 0) write(iu6, *) 'copied powerflow%phi_perp'
-     end if
- 
-     if (associated(structure_in%phi_par)) then
-       if (associated(structure_out%phi_par)) then
-         if (size(structure_in%phi_par) &
-          /= size(structure_out%phi_par)) &
-          deallocate(structure_out%phi_par)
-       end if
-       if (.not. associated(structure_out%phi_par)) then
-         allocate(structure_out%phi_par(size(structure_in%phi_par, 1), &
-          size(structure_in%phi_par, 2), &
-          size(structure_in%phi_par, 3)))
-       end if
-       structure_out%phi_par = structure_in%phi_par
-       if (verbose > 0) write(iu6, *) 'copied powerflow%phi_par'
-     end if
- 
-     if (associated(structure_in%power_e)) then
-       if (associated(structure_out%power_e)) then
-         if (size(structure_in%power_e) &
-          /= size(structure_out%power_e)) &
-          deallocate(structure_out%power_e)
-       end if
-       if (.not. associated(structure_out%power_e)) then
-         allocate(structure_out%power_e(size(structure_in%power_e, 1), &
-          size(structure_in%power_e, 2), &
-          size(structure_in%power_e, 3)))
-       end if
-       structure_out%power_e = structure_in%power_e
-       if (verbose > 0) write(iu6, *) 'copied powerflow%power_e'
-     end if
- 
-     if (associated(structure_in%power_i)) then
-       if (associated(structure_out%power_i)) then
-         if (size(structure_in%power_i) &
-          /= size(structure_out%power_i)) &
-          deallocate(structure_out%power_i)
-       end if
-       if (.not. associated(structure_out%power_i)) then
-         allocate(structure_out%power_i(size(structure_in%power_i, 1), &
-          size(structure_in%power_i, 2), &
-          size(structure_in%power_i, 3), &
-          size(structure_in%power_i, 4)))
-       end if
-       structure_out%power_i = structure_in%power_i
-       if (verbose > 0) write(iu6, *) 'copied powerflow%power_i'
-     end if
- 
-   end subroutine copy_type_powerflow
- 
-   subroutine copy_type_poloidal_decomp(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_poloidal_decomp), intent(in) :: structure_in
-     type (type_poloidal_decomp), intent(inout) :: structure_out
- 
-     if (associated(structure_in%mpol)) then
-       if (associated(structure_out%mpol)) then
-         if (size(structure_in%mpol) &
-          /= size(structure_out%mpol)) &
-          deallocate(structure_out%mpol)
-       end if
-       if (.not. associated(structure_out%mpol)) then
-         allocate(structure_out%mpol(size(structure_in%mpol, 1), &
-          size(structure_in%mpol, 2)))
-       end if
-       structure_out%mpol = structure_in%mpol
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%mpol'
-     end if
- 
-     if (associated(structure_in%nmpol)) then
-       if (associated(structure_out%nmpol)) then
-         if (size(structure_in%nmpol) &
-          /= size(structure_out%nmpol)) &
-          deallocate(structure_out%nmpol)
-       end if
-       if (.not. associated(structure_out%nmpol)) then
-         allocate(structure_out%nmpol(size(structure_in%nmpol, 1)))
-       end if
-       structure_out%nmpol = structure_in%nmpol
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%nmpol'
-     end if
- 
-     if (associated(structure_in%e_plus_m)) then
-       if (associated(structure_out%e_plus_m)) then
-         if (size(structure_in%e_plus_m) &
-          /= size(structure_out%e_plus_m)) &
-          deallocate(structure_out%e_plus_m)
-       end if
-       if (.not. associated(structure_out%e_plus_m)) then
-         allocate(structure_out%e_plus_m(size(structure_in%e_plus_m, 1), &
-          size(structure_in%e_plus_m, 2), &
-          size(structure_in%e_plus_m, 3), &
-          size(structure_in%e_plus_m, 4)))
-       end if
-       structure_out%e_plus_m = structure_in%e_plus_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%e_plus_m'
-     end if
- 
-     if (associated(structure_in%e_minus_m)) then
-       if (associated(structure_out%e_minus_m)) then
-         if (size(structure_in%e_minus_m) &
-          /= size(structure_out%e_minus_m)) &
-          deallocate(structure_out%e_minus_m)
-       end if
-       if (.not. associated(structure_out%e_minus_m)) then
-         allocate(structure_out%e_minus_m(size(structure_in%e_minus_m, 1), &
-          size(structure_in%e_minus_m, 2), &
-          size(structure_in%e_minus_m, 3), &
-          size(structure_in%e_minus_m, 4)))
-       end if
-       structure_out%e_minus_m = structure_in%e_minus_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%e_minus_m'
-     end if
- 
-     if (associated(structure_in%e_norm_m)) then
-       if (associated(structure_out%e_norm_m)) then
-         if (size(structure_in%e_norm_m) &
-          /= size(structure_out%e_norm_m)) &
-          deallocate(structure_out%e_norm_m)
-       end if
-       if (.not. associated(structure_out%e_norm_m)) then
-         allocate(structure_out%e_norm_m(size(structure_in%e_norm_m, 1), &
-          size(structure_in%e_norm_m, 2), &
-          size(structure_in%e_norm_m, 3), &
-          size(structure_in%e_norm_m, 4)))
-       end if
-       structure_out%e_norm_m = structure_in%e_norm_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%e_norm_m'
-     end if
- 
-     if (associated(structure_in%e_bi_norm_m)) then
-       if (associated(structure_out%e_bi_norm_m)) then
-         if (size(structure_in%e_bi_norm_m) &
-          /= size(structure_out%e_bi_norm_m)) &
-          deallocate(structure_out%e_bi_norm_m)
-       end if
-       if (.not. associated(structure_out%e_bi_norm_m)) then
-         allocate(structure_out%e_bi_norm_m(size(structure_in%e_bi_norm_m, 1), &
-          size(structure_in%e_bi_norm_m, 2), &
-          size(structure_in%e_bi_norm_m, 3), &
-          size(structure_in%e_bi_norm_m, 4)))
-       end if
-       structure_out%e_bi_norm_m = structure_in%e_bi_norm_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%e_bi_norm_m'
-     end if
- 
-     if (associated(structure_in%e_parallel_m)) then
-       if (associated(structure_out%e_parallel_m)) then
-         if (size(structure_in%e_parallel_m) &
-          /= size(structure_out%e_parallel_m)) &
-          deallocate(structure_out%e_parallel_m)
-       end if
-       if (.not. associated(structure_out%e_parallel_m)) then
-         allocate(structure_out%e_parallel_m(size(structure_in%e_parallel_m, 1), &
-          size(structure_in%e_parallel_m, 2), &
-          size(structure_in%e_parallel_m, 3), &
-          size(structure_in%e_parallel_m, 4)))
-       end if
-       structure_out%e_parallel_m = structure_in%e_parallel_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%e_parallel_m'
-     end if
- 
-     if (associated(structure_in%b_norm_m)) then
-       if (associated(structure_out%b_norm_m)) then
-         if (size(structure_in%b_norm_m) &
-          /= size(structure_out%b_norm_m)) &
-          deallocate(structure_out%b_norm_m)
-       end if
-       if (.not. associated(structure_out%b_norm_m)) then
-         allocate(structure_out%b_norm_m(size(structure_in%b_norm_m, 1), &
-          size(structure_in%b_norm_m, 2), &
-          size(structure_in%b_norm_m, 3), &
-          size(structure_in%b_norm_m, 4)))
-       end if
-       structure_out%b_norm_m = structure_in%b_norm_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%b_norm_m'
-     end if
- 
-     if (associated(structure_in%b_bi_norm_m)) then
-       if (associated(structure_out%b_bi_norm_m)) then
-         if (size(structure_in%b_bi_norm_m) &
-          /= size(structure_out%b_bi_norm_m)) &
-          deallocate(structure_out%b_bi_norm_m)
-       end if
-       if (.not. associated(structure_out%b_bi_norm_m)) then
-         allocate(structure_out%b_bi_norm_m(size(structure_in%b_bi_norm_m, 1), &
-          size(structure_in%b_bi_norm_m, 2), &
-          size(structure_in%b_bi_norm_m, 3), &
-          size(structure_in%b_bi_norm_m, 4)))
-       end if
-       structure_out%b_bi_norm_m = structure_in%b_bi_norm_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%b_bi_norm_m'
-     end if
- 
-     if (associated(structure_in%b_parallel_m)) then
-       if (associated(structure_out%b_parallel_m)) then
-         if (size(structure_in%b_parallel_m) &
-          /= size(structure_out%b_parallel_m)) &
-          deallocate(structure_out%b_parallel_m)
-       end if
-       if (.not. associated(structure_out%b_parallel_m)) then
-         allocate(structure_out%b_parallel_m(size(structure_in%b_parallel_m, 1), &
-          size(structure_in%b_parallel_m, 2), &
-          size(structure_in%b_parallel_m, 3), &
-          size(structure_in%b_parallel_m, 4)))
-       end if
-       structure_out%b_parallel_m = structure_in%b_parallel_m
-       if (verbose > 0) write(iu6, *) 'copied poloidal_decomp%b_parallel_m'
-     end if
- 
-   end subroutine copy_type_poloidal_decomp
- 
-   subroutine copy_type_local(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_local), intent(in) :: structure_in
-     type (type_local), intent(inout) :: structure_out
- 
-     if (associated(structure_in%e_plus)) then
-       if (associated(structure_out%e_plus)) then
-         if (size(structure_in%e_plus) &
-          /= size(structure_out%e_plus)) &
-          deallocate(structure_out%e_plus)
-       end if
-       if (.not. associated(structure_out%e_plus)) then
-         allocate(structure_out%e_plus(size(structure_in%e_plus, 1), &
-          size(structure_in%e_plus, 2), &
-          size(structure_in%e_plus, 3), &
-          size(structure_in%e_plus, 4)))
-       end if
-       structure_out%e_plus = structure_in%e_plus
-       if (verbose > 0) write(iu6, *) 'copied local%e_plus'
-     end if
- 
-     if (associated(structure_in%e_minus)) then
-       if (associated(structure_out%e_minus)) then
-         if (size(structure_in%e_minus) &
-          /= size(structure_out%e_minus)) &
-          deallocate(structure_out%e_minus)
-       end if
-       if (.not. associated(structure_out%e_minus)) then
-         allocate(structure_out%e_minus(size(structure_in%e_minus, 1), &
-          size(structure_in%e_minus, 2), &
-          size(structure_in%e_minus, 3), &
-          size(structure_in%e_minus, 4)))
-       end if
-       structure_out%e_minus = structure_in%e_minus
-       if (verbose > 0) write(iu6, *) 'copied local%e_minus'
-     end if
- 
-     if (associated(structure_in%e_norm)) then
-       if (associated(structure_out%e_norm)) then
-         if (size(structure_in%e_norm) &
-          /= size(structure_out%e_norm)) &
-          deallocate(structure_out%e_norm)
-       end if
-       if (.not. associated(structure_out%e_norm)) then
-         allocate(structure_out%e_norm(size(structure_in%e_norm, 1), &
-          size(structure_in%e_norm, 2), &
-          size(structure_in%e_norm, 3), &
-          size(structure_in%e_norm, 4)))
-       end if
-       structure_out%e_norm = structure_in%e_norm
-       if (verbose > 0) write(iu6, *) 'copied local%e_norm'
-     end if
- 
-     if (associated(structure_in%e_bi_norm)) then
-       if (associated(structure_out%e_bi_norm)) then
-         if (size(structure_in%e_bi_norm) &
-          /= size(structure_out%e_bi_norm)) &
-          deallocate(structure_out%e_bi_norm)
-       end if
-       if (.not. associated(structure_out%e_bi_norm)) then
-         allocate(structure_out%e_bi_norm(size(structure_in%e_bi_norm, 1), &
-          size(structure_in%e_bi_norm, 2), &
-          size(structure_in%e_bi_norm, 3), &
-          size(structure_in%e_bi_norm, 4)))
-       end if
-       structure_out%e_bi_norm = structure_in%e_bi_norm
-       if (verbose > 0) write(iu6, *) 'copied local%e_bi_norm'
-     end if
- 
-     if (associated(structure_in%e_parallel)) then
-       if (associated(structure_out%e_parallel)) then
-         if (size(structure_in%e_parallel) &
-          /= size(structure_out%e_parallel)) &
-          deallocate(structure_out%e_parallel)
-       end if
-       if (.not. associated(structure_out%e_parallel)) then
-         allocate(structure_out%e_parallel(size(structure_in%e_parallel, 1), &
-          size(structure_in%e_parallel, 2), &
-          size(structure_in%e_parallel, 3), &
-          size(structure_in%e_parallel, 4)))
-       end if
-       structure_out%e_parallel = structure_in%e_parallel
-       if (verbose > 0) write(iu6, *) 'copied local%e_parallel'
-     end if
- 
-     if (associated(structure_in%b_norm)) then
-       if (associated(structure_out%b_norm)) then
-         if (size(structure_in%b_norm) &
-          /= size(structure_out%b_norm)) &
-          deallocate(structure_out%b_norm)
-       end if
-       if (.not. associated(structure_out%b_norm)) then
-         allocate(structure_out%b_norm(size(structure_in%b_norm, 1), &
-          size(structure_in%b_norm, 2), &
-          size(structure_in%b_norm, 3), &
-          size(structure_in%b_norm, 4)))
-       end if
-       structure_out%b_norm = structure_in%b_norm
-       if (verbose > 0) write(iu6, *) 'copied local%b_norm'
-     end if
- 
-     if (associated(structure_in%b_bi_norm)) then
-       if (associated(structure_out%b_bi_norm)) then
-         if (size(structure_in%b_bi_norm) &
-          /= size(structure_out%b_bi_norm)) &
-          deallocate(structure_out%b_bi_norm)
-       end if
-       if (.not. associated(structure_out%b_bi_norm)) then
-         allocate(structure_out%b_bi_norm(size(structure_in%b_bi_norm, 1), &
-          size(structure_in%b_bi_norm, 2), &
-          size(structure_in%b_bi_norm, 3), &
-          size(structure_in%b_bi_norm, 4)))
-       end if
-       structure_out%b_bi_norm = structure_in%b_bi_norm
-       if (verbose > 0) write(iu6, *) 'copied local%b_bi_norm'
-     end if
- 
-     if (associated(structure_in%b_parallel)) then
-       if (associated(structure_out%b_parallel)) then
-         if (size(structure_in%b_parallel) &
-          /= size(structure_out%b_parallel)) &
-          deallocate(structure_out%b_parallel)
-       end if
-       if (.not. associated(structure_out%b_parallel)) then
-         allocate(structure_out%b_parallel(size(structure_in%b_parallel, 1), &
-          size(structure_in%b_parallel, 2), &
-          size(structure_in%b_parallel, 3), &
-          size(structure_in%b_parallel, 4)))
-       end if
-       structure_out%b_parallel = structure_in%b_parallel
-       if (verbose > 0) write(iu6, *) 'copied local%b_parallel'
-     end if
- 
-   end subroutine copy_type_local
- 
-   subroutine copy_type_beamtracing(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_beamtracing), intent(in) :: structure_in
-     type (type_beamtracing), intent(inout) :: structure_out
- 
-     if (associated(structure_in%nbeams)) then
-       if (associated(structure_out%nbeams)) then
-         if (size(structure_in%nbeams) &
-          /= size(structure_out%nbeams)) &
-          deallocate(structure_out%nbeams)
-       end if
-       if (.not. associated(structure_out%nbeams)) then
-         allocate(structure_out%nbeams(size(structure_in%nbeams, 1)))
-       end if
-       structure_out%nbeams = structure_in%nbeams
-       if (verbose > 0) write(iu6, *) 'copied beamtracing%nbeams'
-     end if
- 
-     if (associated(structure_in%npoints)) then
-       if (associated(structure_out%npoints)) then
-         if (size(structure_in%npoints) &
-          /= size(structure_out%npoints)) &
-          deallocate(structure_out%npoints)
-       end if
-       if (.not. associated(structure_out%npoints)) then
-         allocate(structure_out%npoints(size(structure_in%npoints, 1), &
-          size(structure_in%npoints, 2)))
-       end if
-       structure_out%npoints = structure_in%npoints
-       if (verbose > 0) write(iu6, *) 'copied beamtracing%npoints'
-     end if
- 
-     if (associated(structure_in%power)) then
-       if (associated(structure_out%power)) then
-         if (size(structure_in%power) &
-          /= size(structure_out%power)) &
-          deallocate(structure_out%power)
-       end if
-       if (.not. associated(structure_out%power)) then
-         allocate(structure_out%power(size(structure_in%power, 1), &
-          size(structure_in%power, 2)))
-       end if
-       structure_out%power = structure_in%power
-       if (verbose > 0) write(iu6, *) 'copied beamtracing%power'
-     end if
- 
-     if (associated(structure_in%dnpar)) then
-       if (associated(structure_out%dnpar)) then
-         if (size(structure_in%dnpar) &
-          /= size(structure_out%dnpar)) &
-          deallocate(structure_out%dnpar)
-       end if
-       if (.not. associated(structure_out%dnpar)) then
-         allocate(structure_out%dnpar(size(structure_in%dnpar, 1), &
-          size(structure_in%dnpar, 2), &
-          size(structure_in%dnpar, 3)))
-       end if
-       structure_out%dnpar = structure_in%dnpar
-       if (verbose > 0) write(iu6, *) 'copied beamtracing%dnpar'
-     end if
- 
-     if (associated(structure_in%length)) then
-       if (associated(structure_out%length)) then
-         if (size(structure_in%length) &
-          /= size(structure_out%length)) &
-          deallocate(structure_out%length)
-       end if
-       if (.not. associated(structure_out%length)) then
-         allocate(structure_out%length(size(structure_in%length, 1), &
-          size(structure_in%length, 2), &
-          size(structure_in%length, 3)))
-       end if
-       structure_out%length = structure_in%length
-       if (verbose > 0) write(iu6, *) 'copied beamtracing%length'
-     end if
- 
-     call copy_type_waves_rtposition(structure_in%position, structure_out%position)
- 
-     call copy_type_waves_rtwavevector(structure_in%wavevector, structure_out%wavevector)
- 
-     call copy_type_polarization(structure_in%polarization, structure_out%polarization)
- 
-     call copy_type_powerflow(structure_in%powerflow, structure_out%powerflow)
- 
-   end subroutine copy_type_beamtracing
- 
-   subroutine copy_type_fullwave(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_fullwave), intent(in) :: structure_in
-     type (type_fullwave), intent(inout) :: structure_out
- 
-     call copy_type_poloidal_decomp(structure_in%poloidal_decomp, structure_out%poloidal_decomp)
- 
-     call copy_type_local(structure_in%local, structure_out%local)
- 
-   end subroutine copy_type_fullwave
- 
-   subroutine copy_type_waves(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_waves), intent(in) :: structure_in
-     type (type_waves), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     call copy_type_composition(structure_in%composition, structure_out%composition)
- 
-     call copy_type_waves_global_param(structure_in%global_param, structure_out%global_param)
- 
-     call copy_type_waves_dep_profiles(structure_in%profiles, structure_out%profiles)
- 
-     call copy_type_beamtracing(structure_in%beamtracing, structure_out%beamtracing)
- 
-     call copy_type_fullwave(structure_in%fullwave, structure_out%fullwave)
- 
-     call copy_type_codeparam(structure_in%codeparam, structure_out%codeparam)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied waves%time'
-     end if
- 
-   end subroutine copy_type_waves
- 
-   subroutine copy_type_mdinfo(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_mdinfo), intent(in) :: structure_in
-     type (type_mdinfo), intent(inout) :: structure_out
- 
-     if (structure_in%shot_min /= -999999999) then
-       structure_out%shot_min = structure_in%shot_min
-       if (verbose > 0) write(iu6, *) 'copied mdinfo%shot_min'
-     end if
- 
-     if (structure_in%shot_max /= -999999999) then
-       structure_out%shot_max = structure_in%shot_max
-       if (verbose > 0) write(iu6, *) 'copied mdinfo%shot_max'
-     end if
- 
-     call copy_type_entry_def(structure_in%md_entry, structure_out%md_entry)
- 
-   end subroutine copy_type_mdinfo
- 
-   subroutine copy_type_topinfo(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_topinfo), intent(in) :: structure_in
-     type (type_topinfo), intent(inout) :: structure_out
- 
-     if (associated(structure_in%dataprovider)) then
-       if (associated(structure_out%dataprovider)) then
-         if (size(structure_in%dataprovider) &
-          /= size(structure_out%dataprovider)) &
-          deallocate(structure_out%dataprovider)
-       end if
-       if (.not. associated(structure_out%dataprovider)) then
-         allocate(structure_out%dataprovider(size(structure_in%dataprovider)))
-       end if
-       structure_out%dataprovider = structure_in%dataprovider
-       if (verbose > 0) write(iu6, *) 'copied topinfo%dataprovider'
-     end if
- 
-     if (associated(structure_in%description)) then
-       if (associated(structure_out%description)) then
-         if (size(structure_in%description) &
-          /= size(structure_out%description)) &
-          deallocate(structure_out%description)
-       end if
-       if (.not. associated(structure_out%description)) then
-         allocate(structure_out%description(size(structure_in%description)))
-       end if
-       structure_out%description = structure_in%description
-       if (verbose > 0) write(iu6, *) 'copied topinfo%description'
-     end if
- 
-     if (associated(structure_in%firstputdate)) then
-       if (associated(structure_out%firstputdate)) then
-         if (size(structure_in%firstputdate) &
-          /= size(structure_out%firstputdate)) &
-          deallocate(structure_out%firstputdate)
-       end if
-       if (.not. associated(structure_out%firstputdate)) then
-         allocate(structure_out%firstputdate(size(structure_in%firstputdate)))
-       end if
-       structure_out%firstputdate = structure_in%firstputdate
-       if (verbose > 0) write(iu6, *) 'copied topinfo%firstputdate'
-     end if
- 
-     if (associated(structure_in%lastupdate)) then
-       if (associated(structure_out%lastupdate)) then
-         if (size(structure_in%lastupdate) &
-          /= size(structure_out%lastupdate)) &
-          deallocate(structure_out%lastupdate)
-       end if
-       if (.not. associated(structure_out%lastupdate)) then
-         allocate(structure_out%lastupdate(size(structure_in%lastupdate)))
-       end if
-       structure_out%lastupdate = structure_in%lastupdate
-       if (verbose > 0) write(iu6, *) 'copied topinfo%lastupdate'
-     end if
- 
-     if (associated(structure_in%source)) then
-       if (associated(structure_out%source)) then
-         if (size(structure_in%source) &
-          /= size(structure_out%source)) &
-          deallocate(structure_out%source)
-       end if
-       if (.not. associated(structure_out%source)) then
-         allocate(structure_out%source(size(structure_in%source)))
-       end if
-       structure_out%source = structure_in%source
-       if (verbose > 0) write(iu6, *) 'copied topinfo%source'
-     end if
- 
-     if (associated(structure_in%comment)) then
-       if (associated(structure_out%comment)) then
-         if (size(structure_in%comment) &
-          /= size(structure_out%comment)) &
-          deallocate(structure_out%comment)
-       end if
-       if (.not. associated(structure_out%comment)) then
-         allocate(structure_out%comment(size(structure_in%comment)))
-       end if
-       structure_out%comment = structure_in%comment
-       if (verbose > 0) write(iu6, *) 'copied topinfo%comment'
-     end if
- 
-     if (associated(structure_in%dataversion)) then
-       if (associated(structure_out%dataversion)) then
-         if (size(structure_in%dataversion) &
-          /= size(structure_out%dataversion)) &
-          deallocate(structure_out%dataversion)
-       end if
-       if (.not. associated(structure_out%dataversion)) then
-         allocate(structure_out%dataversion(size(structure_in%dataversion)))
-       end if
-       structure_out%dataversion = structure_in%dataversion
-       if (verbose > 0) write(iu6, *) 'copied topinfo%dataversion'
-     end if
- 
-     if (associated(structure_in%workflow)) then
-       if (associated(structure_out%workflow)) then
-         if (size(structure_in%workflow) &
-          /= size(structure_out%workflow)) &
-          deallocate(structure_out%workflow)
-       end if
-       if (.not. associated(structure_out%workflow)) then
-         allocate(structure_out%workflow(size(structure_in%workflow)))
-       end if
-       structure_out%workflow = structure_in%workflow
-       if (verbose > 0) write(iu6, *) 'copied topinfo%workflow'
-     end if
- 
-     call copy_type_entry_def(structure_in%entry, structure_out%entry)
- 
-     call copy_type_entry_def(structure_in%parent_entry, structure_out%parent_entry)
- 
-     call copy_type_mdinfo(structure_in%mdinfo, structure_out%mdinfo)
- 
-   end subroutine copy_type_topinfo
- 
-   subroutine copy_type_interfdiag(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_interfdiag), intent(in) :: structure_in
-     type (type_interfdiag), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%expression)) then
-       if (associated(structure_out%expression)) then
-         if (size(structure_in%expression) &
-          /= size(structure_out%expression)) &
-          deallocate(structure_out%expression)
-       end if
-       if (.not. associated(structure_out%expression)) then
-         allocate(structure_out%expression(size(structure_in%expression)))
-       end if
-       structure_out%expression = structure_in%expression
-       if (verbose > 0) write(iu6, *) 'copied interfdiag%expression'
-     end if
- 
-     call copy_type_setup_line(structure_in%setup_line, structure_out%setup_line)
- 
-     call copy_type_exp1D(structure_in%measure, structure_out%measure)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied interfdiag%time'
-     end if
- 
-   end subroutine copy_type_interfdiag
- 
-   subroutine copy_type_polardiag(structure_in, structure_out)
- 
-     use itm_types
-     use euitm_schemas
- 
-     implicit none
- 
-     type (type_polardiag), intent(in) :: structure_in
-     type (type_polardiag), intent(inout) :: structure_out
- 
-     call copy_type_datainfo(structure_in%datainfo, structure_out%datainfo)
- 
-     if (associated(structure_in%expression)) then
-       if (associated(structure_out%expression)) then
-         if (size(structure_in%expression) &
-          /= size(structure_out%expression)) &
-          deallocate(structure_out%expression)
-       end if
-       if (.not. associated(structure_out%expression)) then
-         allocate(structure_out%expression(size(structure_in%expression)))
-       end if
-       structure_out%expression = structure_in%expression
-       if (verbose > 0) write(iu6, *) 'copied polardiag%expression'
-     end if
- 
-     call copy_type_setup_line(structure_in%setup_line, structure_out%setup_line)
- 
-     call copy_type_exp1D(structure_in%measure, structure_out%measure)
- 
-     if (structure_in%time /= -9.0D40) then
-       structure_out%time = structure_in%time
-       if (verbose > 0) write(iu6, *) 'copied polardiag%time'
-     end if
- 
-   end subroutine copy_type_polardiag
- 
- 
- 
- end module copy_structures

Property changes on: src/helena_lib/tg02a.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

Index: src/helena_lib/qsort_c_module.f90
===================================================================
--- src/helena_lib/qsort_c_module.f90	(revision 252)
+++ src/helena_lib/qsort_c_module.f90	(working copy)
@@ -1,87 +1,87 @@
-!--------------------------------------------------------------------------
-! Recursive Fortran 95 quicksort routine
-! sorts real numbers into ascending numerical order
-! Author: Juli Rew, SCD Consulting (juliana@ucar.edu), 09/03
-! Based on algorithm from Cormen et al., Introduction to Algorithms,
-! 1997 printing
-! Made F conformant by Walt Brainerd
-! modified to return permutated indices by Christian Konz 09/08
-!  indices has to be set to 1..n in ascending order before external
-!  call to QsortC
-!--------------------------------------------------------------------------
-
-module qsort_c_module
-
-  use itm_types
-
-  implicit none
-
-  public :: QsortC
-  private :: Partition
-
-  contains
-
-!------------------------------------------------------------------------
-  recursive subroutine QsortC(A, indices)
-!------------------------------------------------------------------------
-
-    real(r8), intent(inout), dimension(:) :: A
-    integer(itm_i4), intent(inout), dimension(:) :: indices
-
-    integer(itm_i4) :: iq
-
-    if (size(A) > 1) then
-      call Partition(A, indices, iq)
-      call QsortC(A( : iq - 1), indices( : iq - 1))
-      call QsortC(A(iq :), indices(iq :))
-    end if
-  end subroutine QsortC
-
-!------------------------------------------------------------------------
-  subroutine Partition(A, indices, marker)
-!------------------------------------------------------------------------
-
-    real(r8), intent(inout), dimension(:) :: A
-    integer(itm_i4), intent(inout), dimension(:) :: indices
-    integer(itm_i4), intent(out) :: marker
-
-    real(r8) :: temp
-    real(r8) :: x      ! pivot point
-    integer(itm_i4) :: i, j
-    integer(itm_i4) :: i_temp
-
-    x = A(1)
-    i= 0
-    j= size(A) + 1
-
-    do
-      j = j - 1
-      do
-        if (A(j) <= x) exit
-        j = j - 1
-      end do
-      i = i + 1
-      do
-        if (A(i) >= x) exit
-        i = i + 1
-      end do
-      if (i < j) then
-        ! exchange A(i) and A(j) and indices(i) and indices(j)
-        temp = A(i)
-        A(i) = A(j)
-        A(j) = temp
-        i_temp = indices(i)
-        indices(i) = indices(j)
-        indices(j) = i_temp
-      else if (i == j) then
-        marker = i + 1
-        return
-      else
-        marker = i
-        return
-      end if
-    end do
-
-  end subroutine Partition
-
-end module qsort_c_module
+!--------------------------------------------------------------------------
+! Recursive Fortran 95 quicksort routine
+! sorts real numbers into ascending numerical order
+! Author: Juli Rew, SCD Consulting (juliana@ucar.edu), 09/03
+! Based on algorithm from Cormen et al., Introduction to Algorithms,
+! 1997 printing
+! Made F conformant by Walt Brainerd
+! modified to return permutated indices by Christian Konz 09/08
+!  indices has to be set to 1..n in ascending order before external
+!  call to QsortC
+!--------------------------------------------------------------------------
+
+module qsort_c_module
+
+  use itm_types
+
+  implicit none
+
+  public :: QsortC
+  private :: Partition
+
+  contains
+
+!------------------------------------------------------------------------
+  recursive subroutine QsortC(A, indices)
+!------------------------------------------------------------------------
+
+    real(r8), intent(inout), dimension(:) :: A
+    integer(itm_i4), intent(inout), dimension(:) :: indices
+
+    integer(itm_i4) :: iq
+
+    if (size(A) > 1) then
+      call Partition(A, indices, iq)
+      call QsortC(A( : iq - 1), indices( : iq - 1))
+      call QsortC(A(iq :), indices(iq :))
+    end if
+  end subroutine QsortC
+
+!------------------------------------------------------------------------
+  subroutine Partition(A, indices, marker)
+!------------------------------------------------------------------------
+
+    real(r8), intent(inout), dimension(:) :: A
+    integer(itm_i4), intent(inout), dimension(:) :: indices
+    integer(itm_i4), intent(out) :: marker
+
+    real(r8) :: temp
+    real(r8) :: x      ! pivot point
+    integer(itm_i4) :: i, j
+    integer(itm_i4) :: i_temp
+
+    x = A(1)
+    i= 0
+    j= size(A) + 1
+
+    do
+      j = j - 1
+      do
+        if (A(j) <= x) exit
+        j = j - 1
+      end do
+      i = i + 1
+      do
+        if (A(i) >= x) exit
+        i = i + 1
+      end do
+      if (i < j) then
+        ! exchange A(i) and A(j) and indices(i) and indices(j)
+        temp = A(i)
+        A(i) = A(j)
+        A(j) = temp
+        i_temp = indices(i)
+        indices(i) = indices(j)
+        indices(j) = i_temp
+      else if (i == j) then
+        marker = i + 1
+        return
+      else
+        marker = i
+        return
+      end if
+    end do
+
+  end subroutine Partition
+
+end module qsort_c_module

Property changes on: src/helena_lib/qsort_c_module.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native


Property changes on: src/helena_lib/zero.f90
___________________________________________________________________
Added: svn:keywords
   + Id
Added: svn:eol-style
   + native

