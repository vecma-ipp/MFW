! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> Run chease based on a CPO stored in ascii format
!>
!> \author D. Coster
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
program run_chease

  use itm_types
  use euitm_schemas
  use xml_file_reader
  use read_structures
  use write_structures
  use deallocate_structures
  implicit none

  type (type_equilibrium), pointer :: euitm_equilibrium_in(:)
  type (type_equilibrium), pointer :: euitm_equilibrium_out(:)
  type (type_param), save  :: code_parameters
  logical, save :: first = .true.
  integer, save :: ncall = 0
  character*32 :: filename = 'EQ_######'
  integer(itm_i4) :: i, iargc

  interface
     subroutine chease (euitm_equilibrium_in, euitm_equilibrium_out, code_parameters)
       use euitm_schemas
       IMPLICIT NONE
       type (type_equilibrium), pointer :: euitm_equilibrium_in(:)
       type (type_equilibrium), pointer :: euitm_equilibrium_out(:)
       type (type_param) :: code_parameters
     end SUBROUTINE Chease
  end interface
    
  if(iargc().lt.1) then
     write(*,*) 'filename should be specified'
     stop 'error: missing filename'
  endif
  call fill_param(code_parameters, 'XML/chease.xml', '', 'XML/chease.xsd')
  do i=1, iargc()
     call getarg(i,filename)
     write(*,*) 'Processing ',trim(filename)

     call open_read_file(1, filename)
     allocate(euitm_equilibrium_in(1))
     call read_cpo(euitm_equilibrium_in(1), 'equilibrium')
     call close_read_file
     CALL CHEASE(euitm_equilibrium_in, euitm_equilibrium_out, code_parameters)

     filename='EQ_######'
     write(filename(4:9),'(I6.6)') i-1
     call open_write_file(1, trim(filename)//'.OUT2')
     call write_cpo(euitm_equilibrium_out(1), 'equilibrium')
     call close_write_file

     call deallocate_cpo(euitm_equilibrium_in)
     call deallocate_cpo(euitm_equilibrium_out)
  enddo
  
end program run_chease
