! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> ??
!>
!> \author ???
!>
!> \version "$Id$"
      SUBROUTINE MAIN_NEUTRALS                                  &
      (GEOMETRY,PROFILES,NEUTRALS,SOURCES,CONTROL,ifail)

!-------------------------------------------------------!
!     This subroutine calculates densities, fluxes and  !
!     temperatures of neutrals, source of main ions     !
!     and sinks of energy from electrons and ions       !
!     due to interaction with main neutrals4            !
!-------------------------------------------------------!
!     Source:       RITM code                           !
!     Developers:   M.Tokar, D.Kalupin                  !
!     Contacts:     M.Tokar@fz-juelich.de               !
!                   D.Kalupin@fz-juelich.de             !
!                                                       !
!     Comments:     --                                  !
!                                                       !
!-------------------------------------------------------!


! +++ Declaration of variables: 
      USE itm_constants
      USE ETS_PLASMA
      USE TYPE_NEUTRALS
      USE TYPE_SOLVER


      IMPLICIT NONE

      INTEGER, INTENT (INOUT)       :: ifail

! +++ External parameters:
      TYPE (MAGNETIC_GEOMETRY)      :: GEOMETRY               !contains all geometry quantities
      TYPE (PLASMA_PROFILES)        :: PROFILES               !contains profiles of plasma parameters
      TYPE (SOURCES_AND_SINKS)      :: SOURCES                !contains profiles of sources
      TYPE (NEUTRAL_PROFILES)       :: NEUTRALS               !contains profiles of incoming neutrals
      TYPE (RUN_CONTROL)            :: CONTROL                !contains all control parameters

! +++ Input/Output to numerical solver:
      TYPE (NUMERICS)               :: SOLVER                 !contains all I/O quantities to numerics part
 
! +++ Internal parameters:
      INTEGER   :: NRHO                                       !number of radial points (input)
      INTEGER   :: NION                                       !number of ion species (input)

      INTEGER   :: INEU                                       !neutral type index
      INTEGER   :: IRHO                                       !current radial knot
      INTEGER   :: IION                                       !current ion type

      REAL (R8) :: RHO(PROFILES%NRHO)                         !normalised minor radius,                  [m]
      REAL (R8) :: VPR(PROFILES%NRHO)                         !V',                                       [m^2]

      REAL (R8) :: AION                                       !ion mass number                           [proton mass]
      REAL (R8) :: TI(PROFILES%NRHO)                          !ion temperature,                          [eV]
      REAL (R8) :: NI(PROFILES%NRHO)                          !ion density,                              [m^-3]
      REAL (R8) :: TE(PROFILES%NRHO)                          !electron temperature,                     [eV]
      REAL (R8) :: NE(PROFILES%NRHO)                          !electron density,                         [m^-3]

      REAL (R8) :: T01                                        !temperature of primary neutrals,          [eV]
      REAL (R8) :: V01                                        !velocity^2 of primary neutrals,           [m^2/s^2]
      REAL (R8) :: N01(PROFILES%NRHO)                         !density of primary neutrals,              [m^-3]
      REAL (R8) :: DN01(PROFILES%NRHO)                        !gradient of primary neutrals density,     [m^-4]
      REAL (R8) :: FLUX_N01(PROFILES%NRHO)                    !flux density of primary neutrals,         [1/s]

      INTEGER   :: NEU_BND_TYPE                               !boundary condition type  (specified for cold neutrals)
      REAL (R8) :: NEU_BND(3)                                 !boundary condition value (specified for cold neutrals)

      REAL (R8) :: T02(PROFILES%NRHO)                         !temperature of hot neutrals,              [eV]
      REAL (R8) :: V02(PROFILES%NRHO)                         !velocity^2 of hot neutrals,               [m^2/s^2]   
      REAL (R8) :: N02(PROFILES%NRHO)                         !density of hot neutrals,                  [m^-3]
      REAL (R8) :: P02(PROFILES%NRHO)                         !pressure of hot neutrals,                 [eV/m^3]
      REAL (R8) :: DP02(PROFILES%NRHO)                        !pressure gradient of hot neutrals,        [eV/m^4]
      REAL (R8) :: FLUX_N02(PROFILES%NRHO)                    !flux density of hot neutrals,             [1/s]
      REAL (R8) :: SOURCE_N02(PROFILES%NRHO)                  !source of hot neutrals,                   [1//m^3/s]

      REAL (R8) :: SI(PROFILES%NRHO)                          !source density of ions,                   [1/(m^3*s)] 
      REAL (R8) :: QE(PROFILES%NRHO)                          !energy source/loss density for electrons, [eV/(m^3*s)]  
      REAL (R8) :: QI(PROFILES%NRHO)                          !energy source/loss density for ions,      [eV/(m^3*s)]  

      REAL (R8) :: REC                                        !recycling coefficient of hot neutrals
      REAL (R8) :: C_ION                                      !ionization rate coefficient               [m^3/s]
      REAL (R8) :: C_CX                                       !charge-exchange rate coefficient          [m^3/s]
      REAL (R8) :: C_REC                                      !recombination rate coefficient            [m^3/s]
      REAL (R8) :: S_REC(PROFILES%NRHO)                       !recombination source                      [1/m^3/s]
      REAL (R8) :: NU_ION(PROFILES%NRHO)                      !ionization rate coefficient               [1/s]
      REAL (R8) :: NU_CX(PROFILES%NRHO)                       !charge-exchange rate coefficient          [1/s]
      REAL (R8) :: NU_REC(PROFILES%NRHO)                      !ionization rate coefficient               [1/s]
      REAL (R8) :: NU_N(PROFILES%NRHO)                        !ionization rate coefficient               [1/s]

      INTEGER   :: ITER                                       !iterration index
      REAL (R8) :: TN02(PROFILES%NRHO)                        !
      INTEGER   :: I0                                         !index of R0 point     
      REAL (R8) :: R0                                         !point with zero flux and T02 = T_i     
      REAL (R8) :: T020                                       !temperature of neutrals in point R0
      REAL (R8) :: SOURCE_N020                                !source of neutrals in point R0 
      REAL (R8) :: HLA, TX                                    !    

      REAL (R8) :: AMIX, TAU                                  !mixing factor, time step,                 [s]

      INTEGER   :: FLAG                                       !flag for equation: 0 - interpretative (not solved), 1 - predictive (solved)
      INTEGER   :: NDIM                                       !number of equations to be solved
      INTEGER   :: SOLVER_TYPE                                !specifies the option for numerical solution
      REAL (R8) :: Y(PROFILES%NRHO)                           !function at the current amd previous time steps
      REAL (R8) :: YM(PROFILES%NRHO)                          !function at the current amd previous time steps
      REAL (R8) :: DY(PROFILES%NRHO)                          !derivative of function
      REAL (R8) :: A(PROFILES%NRHO)                           !coefficients for numerical solver
      REAL (R8) :: B(PROFILES%NRHO)                           !coefficients for numerical solver
      REAL (R8) :: C(PROFILES%NRHO)                           !coefficients for numerical solver
      REAL (R8) :: D(PROFILES%NRHO)                           !coefficients for numerical solver
      REAL (R8) :: E(PROFILES%NRHO)                           !coefficients for numerical solver
      REAL (R8) :: F(PROFILES%NRHO)                           !coefficients for numerical solver
      REAL (R8) :: G(PROFILES%NRHO)                           !coefficients for numerical solver
      REAL (R8) :: H                                          !coefficients for numerical solver
      REAL (R8) :: V(2), U(2), W(2)                           !boundary conditions for numerical solver

      REAL (R8) :: FUN1(PROFILES%NRHO), DFUN1(PROFILES%NRHO)


! +++ Set up dimensions:
      NRHO                  = PROFILES%NRHO      
      NION                  = PROFILES%NION      
      NDIM                  = 1


! +++ Allocate types for interface with numerical solver:
      CALL  ALLOCATE_NUMERICS (NDIM, NRHO, SOLVER, ifail)



! +++ Set up local variables:
      AMIX                  = 1.D0
      SOLVER_TYPE           = CONTROL%SOLVER_TYPE 



! +++ Set up local variables:
      RHO_LOOP1: DO IRHO=1,NRHO
        RHO(IRHO)           = GEOMETRY%RHO(IRHO)
        VPR(IRHO)           = GEOMETRY%VPR(IRHO)

        TE(IRHO)            = PROFILES%TE(IRHO)
        NE(IRHO)            = PROFILES%NE(IRHO)

        QE(IRHO)            = 0.D0
      END DO RHO_LOOP1

!!! dpc: HACK
      IF(rho(1).EQ.0.0_R8 .AND. vpr(1).EQ.0.0_R8) THEN
         vpr(1) = vpr(2) / 1e6_R8
      ENDIF


      REC                   = NEUTRALS%COEF_RECYCLE


      ION_LOOP1: DO IION=1,NION
        AION                = NEUTRALS%MION(IION)
        T01                 = NEUTRALS%T0(NRHO,IION,1)
        N01                 = NEUTRALS%N0(NRHO,IION,1)


       
! +++ Set up boundary conditions for particular ion type:
        NEU_BND_TYPE        = NEUTRALS%NEU_BND_TYPE(IION)
        NEU_BND(1)          = NEUTRALS%NEU_BND(1,IION)
        NEU_BND(2)          = NEUTRALS%NEU_BND(2,IION)
        NEU_BND(3)          = NEUTRALS%NEU_BND(3,IION)



! +++ Set up profiles:
        RHO_LOOP2: DO IRHO = 1,NRHO
          SI(IRHO)          = 0.D0
          QI(IRHO)          = 0.D0

          TI(IRHO)          = PROFILES%TI(IRHO,IION)
          NI(IRHO)          = PROFILES%NI(IRHO,IION)


! +++ Frequencies of elementary processes: 
          CALL CONST_ATOM (TE(IRHO), TI(IRHO), C_ION, C_CX, C_REC)
 
          NU_ION(IRHO)      = C_ION * NE(IRHO)
          NU_CX(IRHO)       = C_CX * NI(IRHO) 
          NU_N(IRHO)        = NU_ION(IRHO) + NU_CX(IRHO)
          S_REC(IRHO)       = C_REC * NE(IRHO) * NI(IRHO)
        END DO RHO_LOOP2
 


!-------------------------------------------------------!
!                Primary neutrals                       !
!-------------------------------------------------------!

        V01                 = 9.58D7 * T01 / AION 



! +++ Set equation to 'predictive' and all coefficients to zero:
        FLAG                = 1
        Y(:)                = 0.0D0
        DY(:)               = 0.0D0
        YM(:)               = 0.0D0
        A(:)                = 0.0D0
        B(:)                = 0.0D0
        C(:)                = 0.0D0
        D(:)                = 0.0D0
        E(:)                = 0.0D0
        F(:)                = 0.0D0
        G(:)                = 0.0D0
        H                   = 0.0D0
        V(:)                = 0.0D0
        U(:)                = 0.0D0
        W(:)                = 0.0D0



! +++   Coefficients for for continuity equation in form:        
!
!       (A*Y-B*Y(t-1))/H + 1/C * (-D*Y' + E*Y) = F - G*Y

        RHO_LOOP3: DO IRHO = 1,NRHO
          Y(IRHO)           = N01(IRHO)

          C(IRHO)           = VPR(IRHO)
          D(IRHO)           = VPR(IRHO) / NU_N(IRHO)
          G(IRHO)           = NU_N(IRHO) / V01
        END DO RHO_LOOP3
          H                 = 1.D0


! +++ Boundary conditions for ion diffusion equation in form:
!
!     V*Y' + U*Y =W 
!
! +++ On axis:
!       dN0/drho(rho=0)=0:
        V(1)                = 1.D0
        U(1)                = 0.D0
        W(1)                = 0.D0

! +++ At the edge:
!       FIXED N0
        IF(NEU_BND_TYPE.EQ.1) THEN
          V(2)              = 0.D0
          U(2)              = 1.D0
          W(2)              = NEU_BND(1)
        END IF


!       FIXED FLUX_N0
        IF(NEU_BND_TYPE.EQ.2) THEN
          V(2)              = 1.D0
          U(2)              = DSQRT(V01)/NU_N(NRHO)
          W(2)              = 2.D0 * NEU_BND(1) / DSQRT(V01)
        END IF

!       Generic boundary condition
        IF(NEU_BND_TYPE.EQ.3) THEN
          V(2) = NEU_BND(1)
          U(2) = NEU_BND(2)
          W(2) = NEU_BND(3)
        ENDIF



! +++ Defining coefficients for numerical solver:    
        SOLVER%TYPE                   = SOLVER_TYPE
        SOLVER%EQ_FLAG(NDIM)          = FLAG
        SOLVER%NDIM                   = NDIM
        SOLVER%NRHO                   = NRHO
        SOLVER%AMIX                   = AMIX
 

        RHO_LOOP4: DO IRHO=1,NRHO

          SOLVER%RHO(IRHO)            = RHO(IRHO)

          SOLVER%Y(NDIM,IRHO)         = Y(IRHO)
          SOLVER%DY(NDIM,IRHO)        = DY(IRHO)
          SOLVER%YM(NDIM,IRHO)        = YM(IRHO)

          SOLVER%A(NDIM,IRHO)         = A(IRHO)
          SOLVER%B(NDIM,IRHO)         = B(IRHO) 
          SOLVER%C(NDIM,IRHO)         = C(IRHO)
          SOLVER%D(NDIM,IRHO)         = D(IRHO)
          SOLVER%E(NDIM,IRHO)         = E(IRHO)
          SOLVER%F(NDIM,IRHO)         = F(IRHO)
          SOLVER%G(NDIM,IRHO)         = G(IRHO)

        END DO RHO_LOOP4

        SOLVER%H                      = H

        SOLVER%V(NDIM,1)              = V(1)
        SOLVER%U(NDIM,1)              = U(1)
        SOLVER%W(NDIM,1)              = W(1)
        SOLVER%V(NDIM,2)              = V(2)
        SOLVER%U(NDIM,2)              = U(2)
        SOLVER%W(NDIM,2)              = W(2)



! +++ Solution of density diffusion equation:            
        CALL SOLUTION_INTERFACE (SOLVER, ifail)
     


        RHO_LOOP5: DO IRHO=1,NRHO
! +++ New solution:  
          Y(IRHO)                     = SOLVER%Y(NDIM,IRHO)
          DY(IRHO)                    = SOLVER%DY(NDIM,IRHO)



! +++ New profiles of neutral density flux and flux:                
          N01(IRHO)                   = Y(IRHO)                                               
          DN01(IRHO)                  = DY(IRHO)    


          FLUX_N01(IRHO)              = - DN01(IRHO) / NU_N(IRHO) * V01 * VPR(IRHO)



!-------------------------------------------------------!
!                Secondary neutrals                     !
!-------------------------------------------------------!


! +++ Source and initial temperature
          SOURCE_N02(IRHO)           = S_REC(IRHO) + NU_CX(IRHO) * N01(IRHO)
          T02(IRHO)                  = TI(IRHO)
        END DO RHO_LOOP5



        ITER_LOOP1: DO ITER = 1,5 ! iteration loop for secondary ion temperature T02


! +++ Set equation to 'predictive' and all coefficients to zero:
          FLAG                       = 1
          Y(:)                       = 0.0D0
          DY(:)                      = 0.0D0
          YM(:)                      = 0.0D0
          A(:)                       = 0.0D0
          B(:)                       = 0.0D0
          C(:)                       = 0.0D0
          D(:)                       = 0.0D0
          E(:)                       = 0.0D0
          F(:)                       = 0.0D0
          G(:)                       = 0.0D0
          H                          = 0.0D0
          V(:)                       = 0.0D0
          U(:)                       = 0.0D0
          W(:)                       = 0.0D0



        RHO_LOOP6: DO IRHO = 1,NRHO

          V02(IRHO)                  = 9.58D7 * T02(IRHO) / AION 


! +++   Coefficients for for continuity equation in form:        
!
!       (A*Y-B*Y(t-1))/H + 1/C * (-D*Y' + E*Y) = F - G*Y

          Y(IRHO)                   = P02(IRHO)

          C(IRHO)                   = VPR(IRHO)
          D(IRHO)                   = VPR(IRHO) / NU_N(IRHO)
          F(IRHO)                   = SOURCE_N02(IRHO) / V02(IRHO) * T02(IRHO)*1.6D-12 
          G(IRHO)                   = NU_ION(IRHO) / V02(IRHO)
        END DO RHO_LOOP6
          H                         = 1.D0


! +++ Boundary conditions:
! +++ On axis:
!         dP0/drho(rho=0)=0:
          V(1)                      = 1.D0
          U(1)                      = 0.D0
          W(1)                      = 0.D0

! +++ At the edge:
          V(2)                      = (1.D0+REC) / NU_N(NRHO)
          U(2)                      = (1.D0-REC) / DSQRT(V02(NRHO))
          W(2)                      = 0.D0




! +++ Defining coefficients for numerical solver:    
        SOLVER%TYPE                 = SOLVER_TYPE
        SOLVER%EQ_FLAG(NDIM)        = FLAG
        SOLVER%NDIM                 = NDIM
        SOLVER%NRHO                 = NRHO
        SOLVER%AMIX                 = AMIX
 
        RHO_LOOP7: DO IRHO=1,NRHO

          SOLVER%RHO(IRHO)          = RHO(IRHO)

          SOLVER%Y(NDIM,IRHO)       = Y(IRHO)
          SOLVER%DY(NDIM,IRHO)      = DY(IRHO)
          SOLVER%YM(NDIM,IRHO)      = YM(IRHO)

          SOLVER%A(NDIM,IRHO)       = A(IRHO)
          SOLVER%B(NDIM,IRHO)       = B(IRHO) 
          SOLVER%C(NDIM,IRHO)       = C(IRHO)
          SOLVER%D(NDIM,IRHO)       = D(IRHO)
          SOLVER%E(NDIM,IRHO)       = E(IRHO)
          SOLVER%F(NDIM,IRHO)       = F(IRHO)
          SOLVER%G(NDIM,IRHO)       = G(IRHO)

        END DO RHO_LOOP7

        SOLVER%H                    = H

        SOLVER%V(NDIM,1)            = V(1)
        SOLVER%U(NDIM,1)            = U(1)
        SOLVER%W(NDIM,1)            = W(1)
        SOLVER%V(NDIM,2)            = V(2)
        SOLVER%U(NDIM,2)            = U(2)
        SOLVER%W(NDIM,2)            = W(2)



! +++ Solution of density diffusion equation:            
        CALL SOLUTION_INTERFACE (SOLVER, ifail)
     


         RHO_LOOP8: DO IRHO=1,NRHO
! +++ New solution:  
            Y(IRHO)                = SOLVER%Y(NDIM,IRHO)
            DY(IRHO)               = SOLVER%DY(NDIM,IRHO)


! +++ New neutral pressure and its derivative:  
            P02(IRHO)              = Y(IRHO)
            DP02(IRHO)             = DY(IRHO)


! +++ New neutral density and flux:  
            N02(IRHO)              = P02(IRHO) / (1.6D-12*T02(IRHO))
            FLUX_N02(IRHO)         = - DP02(IRHO) * V02(IRHO) / (1.6D-12*T02(IRHO))        &
                                     / NU_N(IRHO) * VPR(IRHO)
          END DO RHO_LOOP8

!!! DPC: HACK
          FLUX_N02(1) = 0.0_R8

! +++ temperature
!         point R0 with zero flux and T02 = T_i
          RHO_LOOP9: DO IRHO = NRHO, 2, -1
            I0=IRHO
            IF (FLUX_N02(IRHO) * FLUX_N02(IRHO-1).LE.0.D0) GOTO 10
          END DO RHO_LOOP9

 10       CONTINUE
          R0                       = ( FLUX_N02(I0)/VPR(I0)*RHO(I0-1)                      &
                                     - FLUX_N02(I0-1)/VPR(I0-1)*RHO(I0) )                  &
                                     / (FLUX_N02(I0)/VPR(I0) - FLUX_N02(I0-1)/VPR(I0-1))
          T020                     = ( TI(I0) * (R0 - RHO(I0-1))                           &
                                     + TI(I0-1)*(RHO(I0)-R0))                              &
                                     / (RHO(I0)-RHO(I0-1))
          SOURCE_N020              = (SOURCE_N02(I0)*(R0-RHO(I0-1))                        &
                                     + SOURCE_N02(I0-1) * (RHO(I0)-R0))                    &
                                     / (RHO(I0)-RHO(I0-1))



!         T02 towards edge from R0
          HLA                      = (R0-RHO(I0)) * (SOURCE_N020+SOURCE_N02(I0))           &
                                     / FLUX_N02(I0) * VPR(I0)
          TX                       = (T020+TI(I0)) / 2.D0

          CALL STEP_T02 (HLA, TX, T020, TN02(I0))

          RHO_LOOP10: DO IRHO = I0,NRHO-1 
            HLA                    = (RHO(IRHO)-RHO(IRHO+1))                                &
                                     * (SOURCE_N02(IRHO)+SOURCE_N02(IRHO+1))                &
                                     / (FLUX_N02(IRHO)/VPR(IRHO)+FLUX_N02(IRHO+1)/VPR(IRHO+1))
            TX                     = (TI(IRHO)+TI(IRHO+1)) / 2.D0

            CALL STEP_T02 (HLA, TX, TN02(IRHO),TN02(IRHO+1))

          END DO RHO_LOOP10



!         T02 towards core from R0
!!! DPC: another hack
          IF(i0.GT.2) THEN
             HLA                      = (R0-RHO(I0-1)) * (SOURCE_N020+SOURCE_N02(I0-1))       &
                                         / FLUX_N02(I0-1) * VPR(I0-1)
             TX                       = (T020+TI(I0-1)) / 2.D0

             CALL STEP_T02 (HLA, TX, T020, TN02(I0-1))

             RHO_LOOP11: DO IRHO = I0-1, 2, -1 
                HLA                    = (RHO(IRHO)-RHO(IRHO-1))                                &
                                         * (SOURCE_N02(IRHO)+SOURCE_N02(IRHO-1))                &
                                         / (FLUX_N02(IRHO)/VPR(IRHO)+FLUX_N02(IRHO-1)/VPR(IRHO-1))
                TX                     = (TI(IRHO)+TI(IRHO-1))/2.D0
 
                TN02(IRHO-1)           = TI(IRHO-1)

                IF (HLA.LT.0.D0) CALL STEP_T02(HLA, TX, TN02(IRHO), TN02(IRHO-1))

             END DO RHO_LOOP11
          ENDIF


!         new approximation for T02
          AMIX                = 1.D0

          RHO_LOOP12: DO IRHO = 2, NRHO
            T02(IRHO)               = (1.D0-AMIX)*T02(IRHO) + AMIX*TN02(IRHO)
          END DO RHO_LOOP12
          T02(1)                    = T02(2) 

        END DO ITER_LOOP1



        RHO_LOOP13: DO IRHO = 1, NRHO
! +++ Particle and heat sources due to neutrals:
          SI(IRHO)                  = (N01(IRHO)+N02(IRHO)) * NU_ION(IRHO) - S_REC(IRHO)
          QE(IRHO)                  = QE(IRHO) - 30.D0 * (N01(IRHO)+N02(IRHO))               &
                                       * NU_ION(IRHO) - 1.5D0*TE(IRHO) * S_REC(IRHO)     
          QI(IRHO)                  = 1.5D0 * (T01*N01(IRHO) + T02(IRHO)*N02(IRHO))          &
                                      * NU_N(IRHO) -  1.5D0*TI(IRHO)                         &
                                      * ((N01(IRHO)+N02(IRHO)) * NU_CX(IRHO) + S_REC(IRHO))


! +++ Output neutral particle and heat sources to the work flow:
          NEUTRALS%N0(IRHO,IION,1)          = N01(IRHO)
          NEUTRALS%FLUX_N0(IRHO,IION,1)     = FLUX_N01(IRHO)
          NEUTRALS%T0(IRHO,IION,2)          = T01
                  
          NEUTRALS%N0(IRHO,IION,2)          = N02(IRHO)
          NEUTRALS%FLUX_N0(IRHO,IION,2)     = FLUX_N02(IRHO)      
          NEUTRALS%T0(IRHO,IION,2)          = T02(IRHO)


          SOURCES%SI_EXP(IRHO,IION)         = SI(IRHO) 
          SOURCES%QI_EXP(IRHO,IION)         = QI(IRHO) * itm_ev
          SOURCES%QE_EXP(IRHO)              = QE(IRHO) * itm_ev

        END DO RHO_LOOP13



      END DO ION_LOOP1


      RETURN 



      END SUBROUTINE MAIN_NEUTRALS
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  







! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> ??
!>
!> \author ???
!>
!> \version "$Id$"
      SUBROUTINE STEP_T02(FUN, TX, T0, T1)

      USE itm_constants

      IMPLICIT NONE

      REAL (R8)            :: FUN, TX, T0, T1


      T1         = TX + (T0-TX) * DEXP(FUN)


      RETURN


      END SUBROUTINE STEP_T02
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  







! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> ??
!>
!> \author ???
!>
!> \version "$Id$"
      SUBROUTINE CONST_ATOM (TE, TI, C_ION, C_CX, C_REC)
!-------------------------------------------------------!
!     The temperature dependence of the rate            !
!     coefficients for atom ionization,                 !
!     charge-exchange and recombination                 !
!-------------------------------------------------------!

      USE itm_constants

      IMPLICIT NONE
        
      REAL (R8)          :: TE, TI                          ! eectron and ion temperatur         [eV]
      REAL (R8)          :: C_ION                           ! ionization rate coefficient        [m^3/s]
      REAL (R8)          :: C_CX                            ! charge-exchange rate coefficient   [m^3/s]
      REAL (R8)          :: C_REC                           ! ionization rate coefficient        [m^3/s]
 
      REAL (R8)          :: FUN1, FUN2                             


      C_ION     = 0.73D-14 * DSQRT(TE) * DEXP(-13.6D0/TE)    &
                  / (1.D0+0.01D0*TE)
      C_CX      = 1.D-14*TI**0.3D0
      FUN1      = 13.6D0/TE
      FUN2      = 0.D0

      IF (FUN1.GT.0.D0.AND.FUN1.LE.1.D0)                    &
         FUN2  = FUN1 *DEXP(-FUN1) * ( -0.58D0  -DLOG(FUN1) &
                 +FUN1 -0.25D0*FUN1**2 +0.055D0*FUN1**3 )
                                                             
      IF (FUN1.GT.1.D0)                                     &
         FUN2  = (FUN1**2 +2.33D0*FUN1 +0.25D0)             &
                 / (FUN1**2 +3.33D0*FUN1 +1.68D0)

      C_REC    = 5.2D-20*DSQRT(FUN1)*FUN2


      RETURN


      END SUBROUTINE CONST_ATOM
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  




