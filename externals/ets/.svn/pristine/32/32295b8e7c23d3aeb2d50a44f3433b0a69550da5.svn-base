! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
!> ??
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
      MODULE TYPE_NEUTRALS

!-------------------------------------------------------!
!     The module declares types of variables            !
!     used in neutral solver                            !
!-------------------------------------------------------!
!     Source:       --                                  !
!     Developers:   M.Tokar, D.Kalupin                  !
!     Kontacts:     M.Tokar@fz-juelich.de               !
!                   D.Kalupin@fz-juelich.de             !
!                                                       !
!     Comments:     --                                  !
!                                                       !
!-------------------------------------------------------!

      IMPLICIT NONE

      INTEGER, PARAMETER   :: DP = KIND(1.0D0)                ! Double precision  




! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
      TYPE NEUTRAL_PROFILES

! + + Dimensions:
        INTEGER            :: NRHO                            !number of radial points
        INTEGER            :: NION                            !number of ion species
        INTEGER            :: NNEU                            !number of neutral types
    
! + + Boundary conditions:
        INTEGER,   POINTER :: NEU_BND_TYPE(:)                 !type of boundary conditions    (ion type dependent) 
        REAL (DP), POINTER :: NEU_BND(:,:)                    !boundary conditions (value),   (boundary type and ion type dependent) 

        REAL (DP), POINTER ::                            &

! + + Coefficients:
             COEF_RECYCLE,                               &    !recycling coefficient 
!
! + + Plasma composition:
!     (ion type dependent):
             MION(:),                                    &    !neutral mass number 
!
! + + density and fluxes of neutrals: 
!     (radius, ion type and neutral type dependent):
             N0(:,:,:),                                  &    !neutral density (calculated)
             FLUX_N0(:,:,:),                             &    !neutral particle flux
!
! + + temperature of neutrals: 
!     (radius ion type and neutral type dependent):
             T0(:,:,:)                                        !neutral temperature (calculated)

      END TYPE NEUTRAL_PROFILES



! + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + 
      CONTAINS


! ----------------------- NEUTRAL PROFILES ---------------------- !


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Allocate profiles of neutrals  needed by the neutral solver

!> ??
!>
!> \author ???
!>
!> \version "$Id$"
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
    SUBROUTINE ALLOCATE_NEUTRAL_PROFILES (NRHO, NION, NNEU, NEUTRALS, ifail)

! +++ Input/Output:
      INTEGER, INTENT (IN)    :: NRHO, NION, NNEU
      TYPE (NEUTRAL_PROFILES) :: NEUTRALS
      INTEGER, INTENT (INOUT) :: ifail

! +++ Local variables:
      INTEGER                 :: ISTAT    

      ALLOCATE (NEUTRALS%COEF_RECYCLE,                  &
!
                NEUTRALS%MION(NION),                    &
!
                NEUTRALS%N0(NRHO,NION,NNEU),            &
                NEUTRALS%FLUX_N0(NRHO,NION,NNEU),       &
                NEUTRALS%NEU_BND(3,NION),               &
                NEUTRALS%NEU_BND_TYPE(NION),            &
!
                NEUTRALS%T0(NRHO,NION,NNEU),            &
!
                  STAT=ISTAT)

! +++ Error checking and reporting:
      IF (ISTAT /= 0) THEN
         ifail = 1    ! Failure to allocate
         RETURN
      ELSE
         ifail = 0    ! Normal return
      END IF

! +++ Set dimensions
      NEUTRALS%NRHO = NRHO
      NEUTRALS%NION = NION
      NEUTRALS%NNEU = NNEU

! +++ Coefficients:
      NEUTRALS%COEF_RECYCLE        = 0.0_DP

! +++ Plasma composition:
      NEUTRALS%MION(:)             = 0.0_DP

! +++ Zero out arrays:
      NEUTRALS%N0(:,:,:)           = 0.0_DP
      NEUTRALS%FLUX_N0(:,:,:)      = 0.0_DP
      NEUTRALS%NEU_BND(:,:)        = 0.0_DP
      NEUTRALS%NEU_BND_TYPE(:)     = 0

      NEUTRALS%T0(:,:,:)           = 0.0_DP

      END SUBROUTINE ALLOCATE_NEUTRAL_PROFILES


! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! +++ Deallocate profiles needed by the transportused by neutral solver
!> ??
!>
!> \author ???
!>
!> \version "$Id$"
      SUBROUTINE DEALLOCATE_NEUTRAL_PROFILES (NEUTRALS, ifail)

! +++ Input/Output:
      TYPE (NEUTRAL_PROFILES) :: NEUTRALS
      INTEGER, INTENT (INOUT) :: ifail

! +++ Local variables:
      INTEGER                 :: ISTAT

      DEALLOCATE (NEUTRALS%COEF_RECYCLE,                &
!
                  NEUTRALS%MION,                        &
!
                  NEUTRALS%N0,                          &
                  NEUTRALS%FLUX_N0,                     &
                  NEUTRALS%NEU_BND,                     &
                  NEUTRALS%NEU_BND_TYPE,                &
!
                  NEUTRALS%T0,                          &
!
                   STAT=ISTAT)

! +++ Error checking and reporting
      IF (ISTAT /= 0) THEN
         ifail = 1    ! Failure to allocate
         RETURN
      ELSE
         ifail = 0    ! Normal return
      END IF

      END SUBROUTINE DEALLOCATE_NEUTRAL_PROFILES



! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  
! + + + + + + + + + + + + + + + + + + + + + + + + + + + +  

      END MODULE


