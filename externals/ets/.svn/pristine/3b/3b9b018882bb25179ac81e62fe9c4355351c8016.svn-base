#! /bin/tcsh
# run a scan of test cases, aand then extract results into SUMMARY
#
# don't run cases if they already exist
# determine the system from argument 1 or, if empty, from the Makefile
# argument 2 if set should contain "bsub" on the Gateway for queuing jobs
#
# D. Coster

if ("X$1X" ==  "XX") then
  setenv SYS `cd .. ; make SYS`
else
  setenv SYS "$1"
endif

if ("X$2X" ==  "XX") then
  set LAUNCH="time"
else
  set LAUNCH="$2"
endif

echo Using $SYS for binary

set T="1e-4 1e-3 1e-2 1e-1"
set R="1025 513 257 129 65 33 17 9 5"
set S="1 2 3 4 6 7 8 10"
set S="1 2 3 7 10"

# scan over time-steps
foreach t ($T)
# scan over number of rho points
  foreach r ($R)
# scan over solvers
    foreach s ($S)
      set n=`echo $t | awk '{print 1/$1}'`
      set CASE=${s}_${t}_${r}_${n}
      echo $CASE
      set c=`echo ${s} ${t} ${r} | awk '{printf "%s%s%s\n",$1,-log($2)/log(10),int(log($3)/log(2)-1)}'`
      echo $c
      if (! -e $CASE/data/OUTPUT) then
        mkdir -p $CASE/data/OUTPUT
        sed -e "s:#c#:${c}:g" -e "s:#s#:${s}:g" -e "s:#t#:${t}:g" -e "s:#r#:${r}:g" -e "s:#n#:${n}:g" < TEMPLATE > $CASE/ets_analytics.xml
        (cd $CASE/ ; ln -s ../../ets_analytics.xsd ../ets.xml ../ets.xsd . ; $LAUNCH ../../obj/$SYS/solver_test)
      endif
    end
  end
end

set T=`echo $T | tr ' ' '\n' | tac`
set R=`echo $R | tr ' ' '\n' | tac`

cp /dev/null SUMMARY
cp /dev/null SUMMARY.L2
foreach s ($S)
  foreach t ($T)
    foreach r ($R)
      set n=`echo $t | awk '{print 1/$1}'`
      set CASE=${s}_${t}_${r}_${n}
      echo $CASE
      set OUT=`echo $n | awk '{printf "OUT%07i.DAT\n",$1}'`
      [ -e $CASE/data/OUTPUT/$OUT ] && echo $s $t $r `awk '($1-0.5)==0{print $0}' $CASE/data/OUTPUT/$OUT` >> SUMMARY
      [ -e $CASE/data/OUTPUT/$OUT ] && echo $s $t $r `awk '{c++;NC=(NF-1)/2;for (i=2;i<NF;i+=2) {val[i/2]+=$(i+1)**2;diff[i/2]+=($i-$(i+1))**2}}END{for (i=1;i<=NC;i++) printf "%s %s ",sqrt(diff[i])/c,sqrt(diff[i]/val[i])/c;printf "\n"}' $CASE/data/OUTPUT/$OUT` >> SUMMARY.L2
    end
  end
end

cp /dev/null scan.L2.gnuplot
cat <<EOF >> scan.L2.gnuplot
set term png large size 800,600
# set term png font Vera 14 size 800,600
set pointsize 3
# set out "scan_L2.ps" ; set term postscript color solid 20
set log xy
set key below
set data style lp
EOF
cat <<EOF >> scan.L2.gnuplot
set xlabel "1/NRHO"
set xrange [8e-4:0.3]
EOF
foreach s ($S)
  foreach t ($T)
cat <<EOF >> scan.L2.gnuplot
set out "scan_L2_S=${s}_dt=${t}.png"
set title "L2 Normed Residual for S=$s, dt=$t"
plot \
     "< awk '\$1==$s&&\$2==$t{print \$0}' SUMMARY.L2" using (1/\$3):5 title 'NI',\
     "< awk '\$1==$s&&\$2==$t{print \$0}' SUMMARY.L2" using (1/\$3):7 title 'NE',\
     "< awk '\$1==$s&&\$2==$t{print \$0}' SUMMARY.L2" using (1/\$3):9 title 'TI',\
     "< awk '\$1==$s&&\$2==$t{print \$0}' SUMMARY.L2" using (1/\$3):11 title 'TE',\
     "< awk '\$1==$s&&\$2==$t{print \$0}' SUMMARY.L2" using (1/\$3):13 title 'VTOR',\
     "< awk '\$1==$s&&\$2==$t{print \$0}' SUMMARY.L2" using (1/\$3):15 title 'PSI'
EOF
  end
end
cat <<EOF >> scan.L2.gnuplot
set xlabel "DT"
set xrange [5e-5:0.2]
EOF
foreach s ($S)
  foreach r ($R)
cat <<EOF >> scan.L2.gnuplot
set out "scan_L2_S=${s}_NRHO=${r}.png"
set title "L2 Normed Residual for S=$s, NRHO=$r"
plot \
     "< awk '\$1==$s&&\$3==$r{print \$0}' SUMMARY.L2" using 2:5 title 'NI',\
     "< awk '\$1==$s&&\$3==$r{print \$0}' SUMMARY.L2" using 2:7 title 'NE',\
     "< awk '\$1==$s&&\$3==$r{print \$0}' SUMMARY.L2" using 2:9 title 'TI',\
     "< awk '\$1==$s&&\$3==$r{print \$0}' SUMMARY.L2" using 2:11 title 'TE',\
     "< awk '\$1==$s&&\$3==$r{print \$0}' SUMMARY.L2" using 2:13 title 'VTOR',\
     "< awk '\$1==$s&&\$3==$r{print \$0}' SUMMARY.L2" using 2:15 title 'PSI'
EOF
  end
end
gnuplot scan.L2.gnuplot
sed -i~ -e '/^set out/d' -e 's:# set out:set out:' scan.L2.gnuplot
gnuplot scan.L2.gnuplot
foreach i (scan_L2*.ps)
  sed -i~ 's:1 1 0 DL:1 0.8 0 DL:' $i
end
